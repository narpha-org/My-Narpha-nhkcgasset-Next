# Code generated by "php artisan lighthouse:print-schema". DO NOT EDIT.

type Query {
  "Find a single CGABroadcastingRight by an identifying attribute."
  CGABroadcastingRight("Search by primary key." id: ID): CGABroadcastingRight

  "List all available CGABroadcastingRight."
  CGABroadcastingRightsValid: [CGABroadcastingRight!]!

  "Find a single CGARegistrantAffiliation by an identifying attribute."
  CGARegistrantAffiliation(
    "Search by primary key."
    id: ID
  ): CGARegistrantAffiliation

  "List all available CGARegistrantAffiliation."
  CGARegistrantAffiliationsValid: [CGARegistrantAffiliation!]!

  "Find a single CGARevisionHistory by an identifying attribute."
  CGARevisionHistory("Search by primary key." id: ID): CGARevisionHistory

  "List all available CGARevisionHistory."
  CGARevisionHistoriesValid: [CGARevisionHistory!]!

  "Find a single CGASharedArea by an identifying attribute."
  CGASharedArea("Search by primary key." id: ID): CGASharedArea

  "List all available CGASharedArea."
  CGASharedAreasValid: [CGASharedArea!]!

  "Find a single CGAViewingRestriction by an identifying attribute."
  CGAViewingRestriction("Search by primary key." id: ID): CGAViewingRestriction

  "List all available CGAViewingRestriction."
  CGAViewingRestrictionsValid: [CGAViewingRestriction!]!

  "Find a single CGAsset by an identifying attribute."
  CGAsset("Search by primary key." id: ID): CGAsset

  "Find a single CGAsset3DCG by an identifying attribute."
  CGAsset3DCG("Search by primary key." id: ID): CGAsset3DCG

  "Find a single CGAssetCate by an identifying attribute."
  CGAssetCate("Search by primary key." id: ID): CGAssetCate

  "List all available CGAssetCate."
  CGAssetCatesValid: [CGAssetCate!]!

  "Find a single CGAssetImage by an identifying attribute."
  CGAssetImage("Search by primary key." id: ID): CGAssetImage

  "Find a single CGAssetTag by an identifying attribute."
  CGAssetTag("Search by primary key." id: ID): CGAssetTag

  "List all available CGAssetTag."
  CGAssetTagsValid: [CGAssetTag!]!

  "Find a single CGAssetVideo by an identifying attribute."
  CGAssetVideo("Search by primary key." id: ID): CGAssetVideo

  "Find a single OktaSession by an identifying attribute."
  getSessionAndUser(sessionToken: String!): OktaSession

  "Find a single OktaVerificationToken by an identifying attribute."
  useVerificationToken(input: UseVerificationTokenInput!): OktaVerificationToken

  "Find a single Sample by an identifying attribute."
  sample("Search by primary key." id: ID): Sample

  "List all Samples."
  samplesAll: [Sample!]!

  "Find a single user by an identifying attribute."
  getUser(id: ID!): User

  "Find a single user by an identifying attribute."
  getUserByEmail(email: String!): User

  "Find a single user by an identifying attribute."
  getUserByAccount(input: GetUserByAccountInput!): User

  "Find a single UserRoleCGAssetStore by an identifying attribute."
  UserRoleCGAssetStore("Search by primary key." id: ID): UserRoleCGAssetStore

  "List all available UserRoleCGAssetStore."
  UserRoleCGAssetStoresValid: [UserRoleCGAssetStore!]!

  "List multiple CGABroadcastingRight."
  CGABroadcastingRights(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    desc: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGABroadcastingRightPaginator!

  "List multiple CGARegistrantAffiliation."
  CGARegistrantAffiliations(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    desc: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGARegistrantAffiliationPaginator!

  "List multiple CGARevisionHistory."
  CGARevisionHistories(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    desc: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGARevisionHistoryPaginator!

  "List multiple CGASharedArea."
  CGASharedAreas(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    desc: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGASharedAreaPaginator!

  "List multiple CGAViewingRestriction."
  CGAViewingRestrictions(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    desc: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGAViewingRestrictionPaginator!

  "List multiple CGAssets."
  CGAssets(
    "Limits number of fetched items. Maximum allowed value: 100."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int

    orderBy: [OrderByClause!]
    search: CGAssetSearchFormValues
  ): CGAssetPaginator!

  "List all available CGAssetCate."
  CGAssetsValid(
    "Limits number of fetched items. Maximum allowed value: 100."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int

    orderBy: [OrderByClause!]
    search: CGAssetSearchFormValues
  ): CGAssetPaginator!

  "List multiple CGAsset3DCG."
  CGAsset3DCGs(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    file_path: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGAsset3DCGPaginator!

  "List multiple CGAssetCate."
  CGAssetCates(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    desc: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGAssetCatePaginator!

  "List multiple CGAssetImage."
  CGAssetImages(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    file_path: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGAssetImagePaginator!

  "List multiple CGAssetTag."
  CGAssetTags(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    tag: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGAssetTagPaginator!

  "List multiple CGAssetVideo."
  CGAssetVideos(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    file_path: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): CGAssetVideoPaginator!

  "List multiple Samples."
  samples(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    text: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): SamplePaginator!

  "List multiple UserRoleCGAssetStore."
  UserRoleCGAssetStores(
    "Filters by text. Accepts SQL LIKE wildcards `%` and `_`."
    desc: String

    "Limits number of fetched items."
    first: Int! = 10

    "The offset from which items are returned."
    page: Int
  ): UserRoleCGAssetStorePaginator!
}

type Mutation {
  "Create a CGABroadcastingRight."
  createCGABroadcastingRight(
    desc: String!
    valid_flg: Boolean!
  ): CGABroadcastingRight

  "Update a CGABroadcastingRight."
  updateCGABroadcastingRight(
    id: ID!
    desc: String!
    valid_flg: Boolean!
  ): CGABroadcastingRight

  "Delete a CGABroadcastingRight."
  deleteCGABroadcastingRight(id: ID!): CGABroadcastingRight

  "Create a CGARegistrantAffiliation."
  createCGARegistrantAffiliation(
    desc: String!
    valid_flg: Boolean!
  ): CGARegistrantAffiliation

  "Update a CGARegistrantAffiliation."
  updateCGARegistrantAffiliation(
    id: ID!
    desc: String!
    valid_flg: Boolean!
  ): CGARegistrantAffiliation

  "Delete a CGARegistrantAffiliation."
  deleteCGARegistrantAffiliation(id: ID!): CGARegistrantAffiliation

  "Create a CGARevisionHistory."
  createCGARevisionHistory(
    asset_db_id: ID!
    desc: String!
    revised_user_id: ID!
  ): CGARevisionHistory

  "Update a CGARevisionHistory."
  updateCGARevisionHistory(desc: String!): CGARevisionHistory

  "Delete a CGARevisionHistory."
  deleteCGARevisionHistory(id: ID!): CGARevisionHistory

  "Create a CGASharedArea."
  createCGASharedArea(desc: String!, valid_flg: Boolean!): CGASharedArea

  "Update a CGASharedArea."
  updateCGASharedArea(
    id: ID!
    desc: String!
    valid_flg: Boolean!
  ): CGASharedArea

  "Delete a CGASharedArea."
  deleteCGASharedArea(id: ID!): CGASharedArea

  "Create a CGAViewingRestriction."
  createCGAViewingRestriction(
    desc: String!
    valid_flg: Boolean!
  ): CGAViewingRestriction

  "Update a CGAViewingRestriction."
  updateCGAViewingRestriction(
    id: ID!
    desc: String!
    valid_flg: Boolean!
  ): CGAViewingRestriction

  "Delete a CGAViewingRestriction."
  deleteCGAViewingRestriction(id: ID!): CGAViewingRestriction

  "Create a CGAsset."
  createCGAsset(input: CreateCGAssetInput!): CGAsset

  "Update a CGAsset."
  updateCGAsset(input: UpdateCGAssetInput!): CGAsset

  "Delete a CGAsset."
  deleteCGAsset(id: ID!): CGAsset

  "Create a CGAsset3DCG."
  createCGAsset3DCG(
    asset_db_id: ID!
    file_name: String!
    url: String!
    file_path: String!
    thumb_file_name: String!
    thumb_url: String!
    thumb_file_path: String!
    revised_user_id: ID!
  ): CGAsset3DCG

  "Update a CGAsset3DCG."
  updateCGAsset3DCG(
    file_name: String!
    url: String!
    file_path: String!
    thumb_file_name: String!
    thumb_url: String!
    thumb_file_path: String!
  ): CGAsset3DCG

  "Delete a CGAsset3DCG."
  deleteCGAsset3DCG(id: ID!): CGAsset3DCG

  "Create a CGAssetCate."
  createCGAssetCate(desc: String!, valid_flg: Boolean!): CGAssetCate

  "Update a CGAssetCate."
  updateCGAssetCate(id: ID!, desc: String!, valid_flg: Boolean!): CGAssetCate

  "Delete a CGAssetCate."
  deleteCGAssetCate(id: ID!): CGAssetCate

  "Create a CGAssetImage."
  createCGAssetImage(
    asset_db_id: ID!
    file_name: String!
    url: String!
    file_path: String!
    thumb_file_name: String!
    thumb_url: String!
    thumb_file_path: String!
    revised_user_id: ID!
  ): CGAssetImage

  "Update a CGAssetImage."
  updateCGAssetImage(
    file_name: String!
    url: String!
    file_path: String!
    thumb_file_name: String!
    thumb_url: String!
    thumb_file_path: String!
  ): CGAssetImage

  "Delete a CGAssetImage."
  deleteCGAssetImage(id: ID!): CGAssetImage

  "Create a CGAssetTag."
  createCGAssetTag(
    asset_db_id: ID!
    tag: String!
    revised_user_id: ID!
  ): CGAssetTag

  "Update a CGAssetTag."
  updateCGAssetTag(tag: String!): CGAssetTag

  "Delete a CGAssetTag."
  deleteCGAssetTag(id: ID!): CGAssetTag

  "Create a CGAssetVideo."
  createCGAssetVideo(
    asset_db_id: ID!
    file_name: String!
    url: String!
    file_path: String!
    thumb_file_name: String!
    thumb_url: String!
    thumb_file_path: String!
    revised_user_id: ID!
  ): CGAssetVideo

  "Update a CGAssetVideo."
  updateCGAssetVideo(
    file_name: String!
    url: String!
    file_path: String!
    thumb_file_name: String!
    thumb_url: String!
    thumb_file_path: String!
  ): CGAssetVideo

  "Delete a CGAssetVideo."
  deleteCGAssetVideo(id: ID!): CGAssetVideo

  "Link a OktaAccount."
  linkAccount(account: LinkAccountInput!): OktaAccount

  "Unlink a OktaAccount."
  unlinkAccount(input: UnlinkAccountInput!): OktaAccount

  "Create a OktaSession."
  createSession(input: CreateSessionInput!): OktaSession

  "Update a OktaSession."
  updateSession(input: UpdateSessionInput!): OktaSession

  "Delete a OktaSession."
  deleteSession(sessionToken: String!): OktaSession

  "Create a OktaVerificationToken."
  createVerificationToken(
    input: CreateVerificationTokenInput!
  ): OktaVerificationToken

  "Create a Sample."
  createSample(text: String): Sample

  "Update a Sample."
  updateSample(id: ID!, text: String!): Sample

  "Delete a Sample."
  deleteSample(id: ID!): Sample

  "Create a OktaSession."
  createUser(user: CreateUserInput!): User

  "Update a OktaSession."
  updateUser(user: UpdateUserInput!): User

  "Delete a OktaSession."
  deleteUser(userId: ID!): User

  "Create a UserRoleCGAssetStore."
  createUserRoleCGAssetStore(
    role: RoleCGAssetStore!
    desc: String!
    valid_flg: Boolean!
  ): UserRoleCGAssetStore

  "Update a UserRoleCGAssetStore."
  updateUserRoleCGAssetStore(
    id: ID!
    role: RoleCGAssetStore!
    desc: String!
    valid_flg: Boolean!
  ): UserRoleCGAssetStore

  "Delete a UserRoleCGAssetStore."
  deleteUserRoleCGAssetStore(id: ID!): UserRoleCGAssetStore
}

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime

scalar Date

"""
CGABroadcastingRight.
放送権利
"""
type CGABroadcastingRight {
  "Unique primary key."
  id: ID!

  "表記"
  desc: String!

  "有効フラグ"
  valid_flg: Boolean!

  "When the CGABroadcastingRight was created."
  created_at: DateTime!

  "When the CGABroadcastingRight was last updated."
  updated_at: DateTime!
}

"""
CGARegistrantAffiliation.
登録者所属
"""
type CGARegistrantAffiliation {
  "Unique primary key."
  id: ID!

  "表記"
  desc: String!

  "有効フラグ"
  valid_flg: Boolean!

  "When the CGARegistrantAffiliation was created."
  created_at: DateTime!

  "When the CGARegistrantAffiliation was last updated."
  updated_at: DateTime!
}

"""
CGARevisionHistory.
修正履歴
"""
type CGARevisionHistory {
  "Unique primary key."
  id: ID!

  "CGアセットID"
  cgAsset: CGAsset

  "修正内容"
  desc: String!

  "修正ユーザID"
  revisedUser: User

  "When the CGARevisionHistory was created."
  created_at: DateTime!

  "When the CGARevisionHistory was last updated."
  updated_at: DateTime!
}

"""
CGASharedArea.
公開エリア
"""
type CGASharedArea {
  "Unique primary key."
  id: ID!

  "表記"
  desc: String!

  "有効フラグ"
  valid_flg: Boolean!

  "When the CGASharedArea was created."
  created_at: DateTime!

  "When the CGASharedArea was last updated."
  updated_at: DateTime!
}

"""
CGAViewingRestriction.
閲覧制限
"""
type CGAViewingRestriction {
  "Unique primary key."
  id: ID!

  "表記"
  desc: String!

  "有効フラグ"
  valid_flg: Boolean!

  "When the CGAViewingRestriction was created."
  created_at: DateTime!

  "When the CGAViewingRestriction was last updated."
  updated_at: DateTime!
}

"""
CGAsset.
CGアセット
"""
type CGAsset {
  "Unique primary key."
  id: ID!

  "アセットID"
  asset_id: String!

  "アセット種別ID"
  assetCate: CGAssetCate

  "制作アプリ"
  asset_app_prod: String

  "形式"
  asset_format: String

  "サイズ"
  asset_size: String

  "レンダラ"
  asset_renderer: String

  "番組ID"
  program_id: String

  "番組名"
  program_name: String

  "登録者所属ID"
  registrantAffiliation: CGARegistrantAffiliation

  "閲覧制限ID"
  viewingRestriction: CGAViewingRestriction

  "放送権利ID"
  broadcastingRight: CGABroadcastingRight

  "公開エリアID"
  sharedArea: CGASharedArea

  "権利補足（使用上の注意）"
  rights_supplement: String

  "アセット詳細説明"
  asset_detail: String!

  "アップロード場所"
  asset_media_base: String!

  "アセット画像"
  assetImages: [CGAssetImage]

  "アセット動画"
  assetVideos: [CGAssetVideo]

  "アセット3DCG"
  asset3DCGs: [CGAsset3DCG]

  "アセットタグ"
  assetTags: [CGAssetTag]

  "修正履歴"
  revisionHistory: [CGARevisionHistory]

  "有効フラグ"
  valid_flg: Boolean!

  "When the CGAsset was created."
  created_at: DateTime!

  "When the CGAsset was last updated."
  updated_at: DateTime!
}

"Allows ordering a list of records."
input OrderByClause {
  "The column that is used for ordering."
  column: String!

  "The direction that is used for ordering."
  order: SortOrder!
}

"Directions for ordering a list of records."
enum SortOrder {
  "Sort records in ascending order."
  ASC

  "Sort records in descending order."
  DESC
}

input CGAssetSearchFormValues {
  assetCates: [ID]
  assetTags: [String]
  assetAppProds: [String]
  keyword: String
}

input CreateCGAssetInput {
  "更新ユーザID"
  user_id: ID!

  "アセットID"
  asset_id: String

  "アセット種別ID"
  assetCateId: ID

  "制作アプリ"
  asset_app_prod: String

  "形式"
  asset_format: String

  "サイズ"
  asset_size: String

  "レンダラ"
  asset_renderer: String

  "番組ID"
  program_id: String

  "番組名"
  program_name: String

  "登録者所属ID"
  registrantAffiliationId: ID

  "閲覧制限ID"
  viewingRestrictionId: ID

  "放送権利ID"
  broadcastingRightId: ID

  "公開エリアID"
  sharedAreaId: ID

  "権利補足（使用上の注意）"
  rights_supplement: String

  "アセット詳細説明"
  asset_detail: String

  "アップロード場所"
  asset_media_base: String

  "アセット画像"
  assetImages: [CGAssetImageInput]

  "アセット動画"
  assetVideos: [CGAssetVideoInput]

  "アセット3DCG"
  asset3DCGs: [CGAsset3DCGInput]

  "アセットタグ文字列"
  assetTagsStr: String

  "有効フラグ"
  valid_flg: Boolean
}

input UpdateCGAssetInput {
  id: ID!

  "更新ユーザID"
  user_id: ID!

  "アセットID"
  asset_id: String

  "アセット種別ID"
  assetCateId: ID

  "制作アプリ"
  asset_app_prod: String

  "形式"
  asset_format: String

  "サイズ"
  asset_size: String

  "レンダラ"
  asset_renderer: String

  "番組ID"
  program_id: String

  "番組名"
  program_name: String

  "登録者所属ID"
  registrantAffiliationId: ID

  "閲覧制限ID"
  viewingRestrictionId: ID

  "放送権利ID"
  broadcastingRightId: ID

  "公開エリアID"
  sharedAreaId: ID

  "権利補足（使用上の注意）"
  rights_supplement: String

  "アセット詳細説明"
  asset_detail: String

  "アップロード場所"
  asset_media_base: String

  "アセット画像"
  assetImages: [CGAssetImageInput]

  "アセット動画"
  assetVideos: [CGAssetVideoInput]

  "アセット3DCG"
  asset3DCGs: [CGAsset3DCGInput]

  "アセットタグ文字列"
  assetTagsStr: String

  "有効フラグ"
  valid_flg: Boolean
}

"アセット画像"
input CGAssetImageInput {
  "リソースファイル名"
  file_name: String!

  "URL"
  url: String!

  "リソースファイルパス"
  file_path: String!
  thumb_file_name: String!
  thumb_url: String!
  thumb_file_path: String!
}

"アセット動画"
input CGAssetVideoInput {
  "リソースファイル名"
  file_name: String!

  "URL"
  url: String!

  "リソースファイルパス"
  file_path: String!
  thumb_file_name: String!
  thumb_url: String!
  thumb_file_path: String!
}

"アセット3DCG"
input CGAsset3DCGInput {
  "リソースファイル名"
  file_name: String!

  "URL"
  url: String!

  "リソースファイルパス"
  file_path: String!
  thumb_file_name: String!
  thumb_url: String!
  thumb_file_path: String!
}

"""
CGAsset3DCG.
アセット3DCG
"""
type CGAsset3DCG {
  "Unique primary key."
  id: ID!

  "CGアセットID"
  cgAsset: CGAsset

  "リソースファイル名"
  file_name: String!

  "URL"
  url: String!

  "リソースファイルパス"
  file_path: String!

  "サムネイルファイル名"
  thumb_file_name: String

  "サムネイルURL"
  thumb_url: String

  "サムネイルファイルパス"
  thumb_file_path: String

  "When the CGAsset3DCG was created."
  created_at: DateTime!

  "When the CGAsset3DCG was last updated."
  updated_at: DateTime!
}

"""
CGAssetCate.
アセット種別
"""
type CGAssetCate {
  "Unique primary key."
  id: ID!

  "表記"
  desc: String!

  "有効フラグ"
  valid_flg: Boolean!

  "When the CGAssetCate was created."
  created_at: DateTime!

  "When the CGAssetCate was last updated."
  updated_at: DateTime!
}

"""
CGAssetImage.
アセット画像
"""
type CGAssetImage {
  "Unique primary key."
  id: ID!

  "CGアセットID"
  cgAsset: CGAsset

  "リソースファイル名"
  file_name: String!

  "URL"
  url: String!

  "リソースファイルパス"
  file_path: String!

  "サムネイルファイル名"
  thumb_file_name: String

  "サムネイルURL"
  thumb_url: String

  "サムネイルファイルパス"
  thumb_file_path: String

  "When the CGAssetImage was created."
  created_at: DateTime!

  "When the CGAssetImage was last updated."
  updated_at: DateTime!
}

"""
CGAssetTag.
アセットタグ
"""
type CGAssetTag {
  "Unique primary key."
  id: ID!

  "CGアセットID"
  cgAsset: CGAsset

  "タグ表記"
  tag: String!

  "タグ付けユーザID"
  taggedUser: User

  "データ登録（編集）画面で付けたタグか？"
  tag_add_edit_flg: Boolean!

  "When the CGAssetTag was created."
  created_at: DateTime!

  "When the CGAssetTag was last updated."
  updated_at: DateTime!
}

"""
CGAssetVideo.
アセット動画
"""
type CGAssetVideo {
  "Unique primary key."
  id: ID!

  "CGアセットID"
  cgAsset: CGAsset

  "リソースファイル名"
  file_name: String!

  "URL"
  url: String!

  "リソースファイルパス"
  file_path: String!

  "サムネイルファイル名"
  thumb_file_name: String

  "サムネイルURL"
  thumb_url: String

  "サムネイルファイルパス"
  thumb_file_path: String

  "When the CGAssetVideo was created."
  created_at: DateTime!

  "When the CGAssetVideo was last updated."
  updated_at: DateTime!
}

"""
OktaAccount.
ユーザーアカウント（Next.js）

unique([provider, providerAccountId])
"""
type OktaAccount {
  "Unique primary key."
  id: ID!

  user: User!
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  refresh_token_expires_in: Int
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
  oauth_token_secret: String
  oauth_token: String

  "When the account was created."
  created_at: DateTime!

  "When the account was last updated."
  updated_at: DateTime!
}

input LinkAccountInput {
  userId: ID!
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  refresh_token_expires_in: Int
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
  oauth_token_secret: String
  oauth_token: String
}

input UnlinkAccountInput {
  providerAccountId: String
  provider: String
}

"""
OktaSession.
ユーザーセッション（Next.js）
"""
type OktaSession {
  "Unique primary key."
  id: ID!

  expires: DateTime
  sessionToken: String
  user: User

  "When the OktaSession was created."
  created_at: DateTime!

  "When the OktaSession was last updated."
  updated_at: DateTime!
}

input CreateSessionInput {
  sessionToken: String
  userId: ID
  expires: DateTime
}

input UpdateSessionInput {
  sessionToken: String
}

"""
OktaVerificationToken.
認証トークン（Next.js）
"""
type OktaVerificationToken {
  "Unique primary key."
  id: ID!

  identifier: String
  token: String
  expires: DateTime
  user: User

  "When the OktaVerificationToken was created."
  created_at: DateTime!

  "When the OktaVerificationToken was last updated."
  updated_at: DateTime!
}

input UseVerificationTokenInput {
  identifier: String
  token: String
}

input CreateVerificationTokenInput {
  identifier: String
  expires: DateTime
  token: String
}

"""
Sample.
サンプル
"""
type Sample {
  "Unique primary key."
  id: ID!

  "Non-unique text."
  text: String!

  "When the Sample was created."
  created_at: DateTime!

  "When the Sample was last updated."
  updated_at: DateTime!
}

"""
Account of a person who utilizes this application.
ユーザ
"""
type User {
  "Unique primary key."
  id: ID!

  "Non-unique name."
  name: String!

  "Unique email address."
  email: String!

  "When the email was verified."
  emailVerified: DateTime

  "Image."
  image: String

  "CGアセットストア ロール"
  roleCGAssetStore: UserRoleCGAssetStore

  accounts: [OktaAccount]
  sessions: [OktaSession]
  verificationTokens: [OktaVerificationToken]

  "When the account was created."
  created_at: DateTime!

  "When the account was last updated."
  updated_at: DateTime!
}

input GetUserByAccountInput {
  providerAccountId: String!
  provider: String!
}

input CreateUserInput {
  "Non-unique name."
  name: String!

  "Unique email address."
  email: String!

  "When the email was verified."
  emailVerified: DateTime
  image: String

  "CGアセットストア ロール"
  user_role_cgas_id: ID
}

input UpdateUserInput {
  "Unique primary key."
  id: ID!

  "Non-unique name."
  name: String!

  "Unique email address."
  email: String!

  "When the email was verified."
  emailVerified: DateTime
  image: String

  "CGアセットストア ロール"
  user_role_cgas_id: ID
}

"""
UserRoleCGAssetStore.
CGアセットストアロール
"""
type UserRoleCGAssetStore {
  "Unique primary key."
  id: ID!

  "CGアセットストア ロール"
  role: RoleCGAssetStore!

  "表記"
  desc: String!

  "有効フラグ"
  valid_flg: Boolean!

  "When the UserRoleCGAssetStore was created."
  created_at: DateTime!

  "When the UserRoleCGAssetStore was last updated."
  updated_at: DateTime!
}

enum RoleCGAssetStore {
  ADMIN
  MANAGER
  USER
}

"Information about pagination using a fully featured paginator."
type PaginatorInfo {
  "Number of items in the current page."
  count: Int!

  "Index of the current page."
  currentPage: Int!

  "Index of the first item in the current page."
  firstItem: Int

  "Are there more pages after this one?"
  hasMorePages: Boolean!

  "Index of the last item in the current page."
  lastItem: Int

  "Index of the last available page."
  lastPage: Int!

  "Number of items per page."
  perPage: Int!

  "Number of total available items."
  total: Int!
}

"A paginated list of CGABroadcastingRight items."
type CGABroadcastingRightPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGABroadcastingRight items."
  data: [CGABroadcastingRight!]!
}

"A paginated list of CGARegistrantAffiliation items."
type CGARegistrantAffiliationPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGARegistrantAffiliation items."
  data: [CGARegistrantAffiliation!]!
}

"A paginated list of CGARevisionHistory items."
type CGARevisionHistoryPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGARevisionHistory items."
  data: [CGARevisionHistory!]!
}

"A paginated list of CGASharedArea items."
type CGASharedAreaPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGASharedArea items."
  data: [CGASharedArea!]!
}

"A paginated list of CGAViewingRestriction items."
type CGAViewingRestrictionPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGAViewingRestriction items."
  data: [CGAViewingRestriction!]!
}

"A paginated list of CGAsset items."
type CGAssetPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGAsset items."
  data: [CGAsset!]!
}

"A paginated list of CGAsset3DCG items."
type CGAsset3DCGPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGAsset3DCG items."
  data: [CGAsset3DCG!]!
}

"A paginated list of CGAssetCate items."
type CGAssetCatePaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGAssetCate items."
  data: [CGAssetCate!]!
}

"A paginated list of CGAssetImage items."
type CGAssetImagePaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGAssetImage items."
  data: [CGAssetImage!]!
}

"A paginated list of CGAssetTag items."
type CGAssetTagPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGAssetTag items."
  data: [CGAssetTag!]!
}

"A paginated list of CGAssetVideo items."
type CGAssetVideoPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of CGAssetVideo items."
  data: [CGAssetVideo!]!
}

"A paginated list of Sample items."
type SamplePaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of Sample items."
  data: [Sample!]!
}

"A paginated list of UserRoleCGAssetStore items."
type UserRoleCGAssetStorePaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of UserRoleCGAssetStore items."
  data: [UserRoleCGAssetStore!]!
}

"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
  "Amount of items."
  COUNT
}

"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
  "Average."
  AVG

  "Minimum."
  MIN

  "Maximum."
  MAX

  "Sum."
  SUM

  "Amount of items."
  COUNT
}

"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
  "Only return trashed results."
  ONLY

  "Return both trashed and non-trashed results."
  WITH

  "Only return non-trashed results."
  WITHOUT
}

"Dynamic WHERE conditions for queries."
input WhereConditions {
  "The column that is used for the condition."
  column: String

  "The operator that is used for the condition."
  operator: SQLOperator = EQ

  "The value that is used for the condition."
  value: Mixed

  "A set of conditions that requires all conditions to match."
  AND: [WhereConditions!]

  "A set of conditions that requires at least one condition to match."
  OR: [WhereConditions!]

  "Check whether a relation exists. Extra conditions or a minimum amount can be applied."
  HAS: WhereConditionsRelation
}

"Dynamic HAS conditions for WHERE condition queries."
input WhereConditionsRelation {
  "The relation that is checked."
  relation: String!

  "The comparison operator to test against the amount."
  operator: SQLOperator = GTE

  "The amount to test."
  amount: Int = 1

  "Additional condition logic."
  condition: WhereConditions
}

"The available SQL operators that are used to filter query results."
enum SQLOperator {
  "Equal operator (`=`)"
  EQ

  "Not equal operator (`!=`)"
  NEQ

  "Greater than operator (`>`)"
  GT

  "Greater than or equal operator (`>=`)"
  GTE

  "Less than operator (`<`)"
  LT

  "Less than or equal operator (`<=`)"
  LTE

  "Simple pattern matching (`LIKE`)"
  LIKE

  "Negation of simple pattern matching (`NOT LIKE`)"
  NOT_LIKE

  "Whether a value is within a set of values (`IN`)"
  IN

  "Whether a value is not within a set of values (`NOT IN`)"
  NOT_IN

  "Whether a value is within a range of values (`BETWEEN`)"
  BETWEEN

  "Whether a value is not within a range of values (`NOT BETWEEN`)"
  NOT_BETWEEN

  "Whether a value is null (`IS NULL`)"
  IS_NULL

  "Whether a value is not null (`IS NOT NULL`)"
  IS_NOT_NULL
}

"""
Loose type that allows any value. Be careful when passing in large `Int` or `Float` literals,
as they may not be parsed correctly on the server side. Use `String` literals if you are
dealing with really large numbers to be on the safe side.
"""
scalar Mixed
