// Code generated by graphql-codegen. DO NOT EDIT.
/* eslint-disable */
// @ts-nocheck
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: any; output: any; }
  /** A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`. */
  DateTime: { input: any; output: any; }
  /**
   * Loose type that allows any value. Be careful when passing in large `Int` or `Float` literals,
   * as they may not be parsed correctly on the server side. Use `String` literals if you are
   * dealing with really large numbers to be on the safe side.
   */
  Mixed: { input: any; output: any; }
};

/**
 * CGABroadcastingRight.
 * 放送権利
 */
export type CgaBroadcastingRight = {
  __typename?: 'CGABroadcastingRight';
  /** When the CGABroadcastingRight was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGABroadcastingRight was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGABroadcastingRight items. */
export type CgaBroadcastingRightPaginator = {
  __typename?: 'CGABroadcastingRightPaginator';
  /** A list of CGABroadcastingRight items. */
  data: Array<CgaBroadcastingRight>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGARegistrantAffiliation.
 * 登録者所属
 */
export type CgaRegistrantAffiliation = {
  __typename?: 'CGARegistrantAffiliation';
  /** When the CGARegistrantAffiliation was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGARegistrantAffiliation was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGARegistrantAffiliation items. */
export type CgaRegistrantAffiliationPaginator = {
  __typename?: 'CGARegistrantAffiliationPaginator';
  /** A list of CGARegistrantAffiliation items. */
  data: Array<CgaRegistrantAffiliation>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGARevisionHistory.
 * 修正履歴
 */
export type CgaRevisionHistory = {
  __typename?: 'CGARevisionHistory';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGARevisionHistory was created. */
  created_at: Scalars['DateTime']['output'];
  /** 修正内容 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 修正ユーザID */
  revisedUser?: Maybe<User>;
  /** When the CGARevisionHistory was last updated. */
  updated_at: Scalars['DateTime']['output'];
};

/** A paginated list of CGARevisionHistory items. */
export type CgaRevisionHistoryPaginator = {
  __typename?: 'CGARevisionHistoryPaginator';
  /** A list of CGARevisionHistory items. */
  data: Array<CgaRevisionHistory>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGASharedArea.
 * 公開エリア
 */
export type CgaSharedArea = {
  __typename?: 'CGASharedArea';
  /** When the CGASharedArea was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGASharedArea was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGASharedArea items. */
export type CgaSharedAreaPaginator = {
  __typename?: 'CGASharedAreaPaginator';
  /** A list of CGASharedArea items. */
  data: Array<CgaSharedArea>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAViewingRestriction.
 * 閲覧制限
 */
export type CgaViewingRestriction = {
  __typename?: 'CGAViewingRestriction';
  /** When the CGAViewingRestriction was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGAViewingRestriction was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGAViewingRestriction items. */
export type CgaViewingRestrictionPaginator = {
  __typename?: 'CGAViewingRestrictionPaginator';
  /** A list of CGAViewingRestriction items. */
  data: Array<CgaViewingRestriction>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAsset.
 * CGアセット
 */
export type CgAsset = {
  __typename?: 'CGAsset';
  /** アセット3DCG */
  asset3DCGs?: Maybe<Array<Maybe<CgAsset3Dcg>>>;
  /** アセット種別ID */
  assetCate?: Maybe<CgAssetCate>;
  /** アセット画像 */
  assetImages?: Maybe<Array<Maybe<CgAssetImage>>>;
  /** アセットタグ */
  assetTags?: Maybe<Array<Maybe<CgAssetTag>>>;
  /** アセット動画 */
  assetVideos?: Maybe<Array<Maybe<CgAssetVideo>>>;
  /** 制作アプリ */
  asset_app_prod?: Maybe<Scalars['String']['output']>;
  /** アセット詳細説明 */
  asset_detail: Scalars['String']['output'];
  /** 形式 */
  asset_format?: Maybe<Scalars['String']['output']>;
  /** アセットID */
  asset_id: Scalars['String']['output'];
  /** アップロード場所 */
  asset_media_base: Scalars['String']['output'];
  /** レンダラ */
  asset_renderer?: Maybe<Scalars['String']['output']>;
  /** サイズ */
  asset_size?: Maybe<Scalars['String']['output']>;
  /** 放送権利ID */
  broadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** When the CGAsset was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 番組ID */
  program_id?: Maybe<Scalars['String']['output']>;
  /** 番組名 */
  program_name?: Maybe<Scalars['String']['output']>;
  /** 登録者所属ID */
  registrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** 修正履歴 */
  revisionHistory?: Maybe<Array<Maybe<CgaRevisionHistory>>>;
  /** 権利補足（使用上の注意） */
  rights_supplement?: Maybe<Scalars['String']['output']>;
  /** 公開エリアID */
  sharedArea?: Maybe<CgaSharedArea>;
  /** When the CGAsset was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
  /** 閲覧制限ID */
  viewingRestriction?: Maybe<CgaViewingRestriction>;
};

/**
 * CGAsset3DCG.
 * アセット3DCG
 */
export type CgAsset3Dcg = {
  __typename?: 'CGAsset3DCG';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAsset3DCG was created. */
  created_at: Scalars['DateTime']['output'];
  /** リソースファイル名 */
  file_name: Scalars['String']['output'];
  /** リソースファイルパス */
  file_path: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGAsset3DCG was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** URL */
  url: Scalars['String']['output'];
};

/** アセット3DCG */
export type CgAsset3DcgInput = {
  /** リソースファイル名 */
  file_name: Scalars['String']['input'];
  /** リソースファイルパス */
  file_path: Scalars['String']['input'];
  /** URL */
  url: Scalars['String']['input'];
};

/** A paginated list of CGAsset3DCG items. */
export type CgAsset3DcgPaginator = {
  __typename?: 'CGAsset3DCGPaginator';
  /** A list of CGAsset3DCG items. */
  data: Array<CgAsset3Dcg>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetCate.
 * アセット種別
 */
export type CgAssetCate = {
  __typename?: 'CGAssetCate';
  /** When the CGAssetCate was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGAssetCate was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGAssetCate items. */
export type CgAssetCatePaginator = {
  __typename?: 'CGAssetCatePaginator';
  /** A list of CGAssetCate items. */
  data: Array<CgAssetCate>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetImage.
 * アセット画像
 */
export type CgAssetImage = {
  __typename?: 'CGAssetImage';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetImage was created. */
  created_at: Scalars['DateTime']['output'];
  /** リソースファイル名 */
  file_name: Scalars['String']['output'];
  /** リソースファイルパス */
  file_path: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGAssetImage was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** URL */
  url: Scalars['String']['output'];
};

/** アセット画像 */
export type CgAssetImageInput = {
  /** リソースファイル名 */
  file_name: Scalars['String']['input'];
  /** リソースファイルパス */
  file_path: Scalars['String']['input'];
  /** URL */
  url: Scalars['String']['input'];
};

/** A paginated list of CGAssetImage items. */
export type CgAssetImagePaginator = {
  __typename?: 'CGAssetImagePaginator';
  /** A list of CGAssetImage items. */
  data: Array<CgAssetImage>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** A paginated list of CGAsset items. */
export type CgAssetPaginator = {
  __typename?: 'CGAssetPaginator';
  /** A list of CGAsset items. */
  data: Array<CgAsset>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

export type CgAssetSearchFormValues = {
  assetAppProds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assetCates?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  assetTags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  keyword?: InputMaybe<Scalars['String']['input']>;
};

/**
 * CGAssetTag.
 * アセットタグ
 */
export type CgAssetTag = {
  __typename?: 'CGAssetTag';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetTag was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** タグ表記 */
  tag: Scalars['String']['output'];
  /** データ登録（編集）画面で付けたタグか？ */
  tag_add_edit_flg: Scalars['Boolean']['output'];
  /** タグ付けユーザID */
  taggedUser?: Maybe<User>;
  /** When the CGAssetTag was last updated. */
  updated_at: Scalars['DateTime']['output'];
};

/** A paginated list of CGAssetTag items. */
export type CgAssetTagPaginator = {
  __typename?: 'CGAssetTagPaginator';
  /** A list of CGAssetTag items. */
  data: Array<CgAssetTag>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetVideo.
 * アセット動画
 */
export type CgAssetVideo = {
  __typename?: 'CGAssetVideo';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetVideo was created. */
  created_at: Scalars['DateTime']['output'];
  /** リソースファイル名 */
  file_name: Scalars['String']['output'];
  /** リソースファイルパス */
  file_path: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGAssetVideo was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** URL */
  url: Scalars['String']['output'];
};

/** アセット動画 */
export type CgAssetVideoInput = {
  /** リソースファイル名 */
  file_name: Scalars['String']['input'];
  /** リソースファイルパス */
  file_path: Scalars['String']['input'];
  /** URL */
  url: Scalars['String']['input'];
};

/** A paginated list of CGAssetVideo items. */
export type CgAssetVideoPaginator = {
  __typename?: 'CGAssetVideoPaginator';
  /** A list of CGAssetVideo items. */
  data: Array<CgAssetVideo>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

export type CreateCgAssetInput = {
  /** アセット3DCG */
  asset3DCGs?: InputMaybe<Array<InputMaybe<CgAsset3DcgInput>>>;
  /** アセット種別ID */
  assetCateId?: InputMaybe<Scalars['ID']['input']>;
  /** アセット画像 */
  assetImages?: InputMaybe<Array<InputMaybe<CgAssetImageInput>>>;
  /** アセットタグ文字列 */
  assetTagsStr?: InputMaybe<Scalars['String']['input']>;
  /** アセット動画 */
  assetVideos?: InputMaybe<Array<InputMaybe<CgAssetVideoInput>>>;
  /** 制作アプリ */
  asset_app_prod?: InputMaybe<Scalars['String']['input']>;
  /** アセット詳細説明 */
  asset_detail?: InputMaybe<Scalars['String']['input']>;
  /** 形式 */
  asset_format?: InputMaybe<Scalars['String']['input']>;
  /** アセットID */
  asset_id?: InputMaybe<Scalars['String']['input']>;
  /** アップロード場所 */
  asset_media_base?: InputMaybe<Scalars['String']['input']>;
  /** レンダラ */
  asset_renderer?: InputMaybe<Scalars['String']['input']>;
  /** サイズ */
  asset_size?: InputMaybe<Scalars['String']['input']>;
  /** 放送権利ID */
  broadcastingRightId?: InputMaybe<Scalars['ID']['input']>;
  /** 番組ID */
  program_id?: InputMaybe<Scalars['String']['input']>;
  /** 番組名 */
  program_name?: InputMaybe<Scalars['String']['input']>;
  /** 登録者所属ID */
  registrantAffiliationId?: InputMaybe<Scalars['ID']['input']>;
  /** 権利補足（使用上の注意） */
  rights_supplement?: InputMaybe<Scalars['String']['input']>;
  /** 公開エリアID */
  sharedAreaId?: InputMaybe<Scalars['ID']['input']>;
  /** 更新ユーザID */
  user_id: Scalars['ID']['input'];
  /** 有効フラグ */
  valid_flg?: InputMaybe<Scalars['Boolean']['input']>;
  /** 閲覧制限ID */
  viewingRestrictionId?: InputMaybe<Scalars['ID']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a CGABroadcastingRight. */
  createCGABroadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** Create a CGARegistrantAffiliation. */
  createCGARegistrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** Create a CGARevisionHistory. */
  createCGARevisionHistory?: Maybe<CgaRevisionHistory>;
  /** Create a CGASharedArea. */
  createCGASharedArea?: Maybe<CgaSharedArea>;
  /** Create a CGAViewingRestriction. */
  createCGAViewingRestriction?: Maybe<CgaViewingRestriction>;
  /** Create a CGAsset. */
  createCGAsset?: Maybe<CgAsset>;
  /** Create a CGAsset3DCG. */
  createCGAsset3DCG?: Maybe<CgAsset3Dcg>;
  /** Create a CGAssetCate. */
  createCGAssetCate?: Maybe<CgAssetCate>;
  /** Create a CGAssetImage. */
  createCGAssetImage?: Maybe<CgAssetImage>;
  /** Create a CGAssetTag. */
  createCGAssetTag?: Maybe<CgAssetTag>;
  /** Create a CGAssetVideo. */
  createCGAssetVideo?: Maybe<CgAssetVideo>;
  /** Create a Sample. */
  createSample?: Maybe<Sample>;
  /** Create a UserRoleCGAssetStore. */
  createUserRoleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
  /** Delete a CGABroadcastingRight. */
  deleteCGABroadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** Delete a CGARegistrantAffiliation. */
  deleteCGARegistrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** Delete a CGARevisionHistory. */
  deleteCGARevisionHistory?: Maybe<CgaRevisionHistory>;
  /** Delete a CGASharedArea. */
  deleteCGASharedArea?: Maybe<CgaSharedArea>;
  /** Delete a CGAViewingRestriction. */
  deleteCGAViewingRestriction?: Maybe<CgaViewingRestriction>;
  /** Delete a CGAsset. */
  deleteCGAsset?: Maybe<CgAsset>;
  /** Delete a CGAsset3DCG. */
  deleteCGAsset3DCG?: Maybe<CgAsset3Dcg>;
  /** Delete a CGAssetCate. */
  deleteCGAssetCate?: Maybe<CgAssetCate>;
  /** Delete a CGAssetImage. */
  deleteCGAssetImage?: Maybe<CgAssetImage>;
  /** Delete a CGAssetTag. */
  deleteCGAssetTag?: Maybe<CgAssetTag>;
  /** Delete a CGAssetVideo. */
  deleteCGAssetVideo?: Maybe<CgAssetVideo>;
  /** Delete a Sample. */
  deleteSample?: Maybe<Sample>;
  /** Delete a UserRoleCGAssetStore. */
  deleteUserRoleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
  /** Update a CGABroadcastingRight. */
  updateCGABroadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** Update a CGARegistrantAffiliation. */
  updateCGARegistrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** Update a CGARevisionHistory. */
  updateCGARevisionHistory?: Maybe<CgaRevisionHistory>;
  /** Update a CGASharedArea. */
  updateCGASharedArea?: Maybe<CgaSharedArea>;
  /** Update a CGAViewingRestriction. */
  updateCGAViewingRestriction?: Maybe<CgaViewingRestriction>;
  /** Update a CGAsset. */
  updateCGAsset?: Maybe<CgAsset>;
  /** Update a CGAsset3DCG. */
  updateCGAsset3DCG?: Maybe<CgAsset3Dcg>;
  /** Update a CGAssetCate. */
  updateCGAssetCate?: Maybe<CgAssetCate>;
  /** Update a CGAssetImage. */
  updateCGAssetImage?: Maybe<CgAssetImage>;
  /** Update a CGAssetTag. */
  updateCGAssetTag?: Maybe<CgAssetTag>;
  /** Update a CGAssetVideo. */
  updateCGAssetVideo?: Maybe<CgAssetVideo>;
  /** Update a Sample. */
  updateSample?: Maybe<Sample>;
  /** Update a UserRoleCGAssetStore. */
  updateUserRoleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
};


export type MutationCreateCgaBroadcastingRightArgs = {
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgaRegistrantAffiliationArgs = {
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgaRevisionHistoryArgs = {
  asset_db_id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
};


export type MutationCreateCgaSharedAreaArgs = {
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgaViewingRestrictionArgs = {
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgAssetArgs = {
  input: CreateCgAssetInput;
};


export type MutationCreateCgAsset3DcgArgs = {
  asset_db_id: Scalars['ID']['input'];
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
  url: Scalars['String']['input'];
};


export type MutationCreateCgAssetCateArgs = {
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgAssetImageArgs = {
  asset_db_id: Scalars['ID']['input'];
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
  url: Scalars['String']['input'];
};


export type MutationCreateCgAssetTagArgs = {
  asset_db_id: Scalars['ID']['input'];
  revised_user_id: Scalars['ID']['input'];
  tag: Scalars['String']['input'];
};


export type MutationCreateCgAssetVideoArgs = {
  asset_db_id: Scalars['ID']['input'];
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
  url: Scalars['String']['input'];
};


export type MutationCreateSampleArgs = {
  text?: InputMaybe<Scalars['String']['input']>;
};


export type MutationCreateUserRoleCgAssetStoreArgs = {
  desc: Scalars['String']['input'];
  role: RoleCgAssetStore;
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationDeleteCgaBroadcastingRightArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaRegistrantAffiliationArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaRevisionHistoryArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaSharedAreaArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaViewingRestrictionArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAsset3DcgArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetCateArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetImageArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetTagArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetVideoArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteSampleArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteUserRoleCgAssetStoreArgs = {
  id: Scalars['ID']['input'];
};


export type MutationUpdateCgaBroadcastingRightArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgaRegistrantAffiliationArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgaRevisionHistoryArgs = {
  desc: Scalars['String']['input'];
};


export type MutationUpdateCgaSharedAreaArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgaViewingRestrictionArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgAssetArgs = {
  input: UpdateCgAssetInput;
};


export type MutationUpdateCgAsset3DcgArgs = {
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationUpdateCgAssetCateArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgAssetImageArgs = {
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationUpdateCgAssetTagArgs = {
  tag: Scalars['String']['input'];
};


export type MutationUpdateCgAssetVideoArgs = {
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationUpdateSampleArgs = {
  id: Scalars['ID']['input'];
  text: Scalars['String']['input'];
};


export type MutationUpdateUserRoleCgAssetStoreArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  role: RoleCgAssetStore;
  valid_flg: Scalars['Boolean']['input'];
};

/** Allows ordering a list of records. */
export type OrderByClause = {
  /** The column that is used for ordering. */
  column: Scalars['String']['input'];
  /** The direction that is used for ordering. */
  order: SortOrder;
};

/** Aggregate functions when ordering by a relation without specifying a column. */
export enum OrderByRelationAggregateFunction {
  /** Amount of items. */
  Count = 'COUNT'
}

/** Aggregate functions when ordering by a relation that may specify a column. */
export enum OrderByRelationWithColumnAggregateFunction {
  /** Average. */
  Avg = 'AVG',
  /** Amount of items. */
  Count = 'COUNT',
  /** Maximum. */
  Max = 'MAX',
  /** Minimum. */
  Min = 'MIN',
  /** Sum. */
  Sum = 'SUM'
}

/** Information about pagination using a fully featured paginator. */
export type PaginatorInfo = {
  __typename?: 'PaginatorInfo';
  /** Number of items in the current page. */
  count: Scalars['Int']['output'];
  /** Index of the current page. */
  currentPage: Scalars['Int']['output'];
  /** Index of the first item in the current page. */
  firstItem?: Maybe<Scalars['Int']['output']>;
  /** Are there more pages after this one? */
  hasMorePages: Scalars['Boolean']['output'];
  /** Index of the last item in the current page. */
  lastItem?: Maybe<Scalars['Int']['output']>;
  /** Index of the last available page. */
  lastPage: Scalars['Int']['output'];
  /** Number of items per page. */
  perPage: Scalars['Int']['output'];
  /** Number of total available items. */
  total: Scalars['Int']['output'];
};

export type Query = {
  __typename?: 'Query';
  /** Find a single CGABroadcastingRight by an identifying attribute. */
  CGABroadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** List multiple CGABroadcastingRight. */
  CGABroadcastingRights: CgaBroadcastingRightPaginator;
  /** List all available CGABroadcastingRight. */
  CGABroadcastingRightsValid: Array<CgaBroadcastingRight>;
  /** Find a single CGARegistrantAffiliation by an identifying attribute. */
  CGARegistrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** List multiple CGARegistrantAffiliation. */
  CGARegistrantAffiliations: CgaRegistrantAffiliationPaginator;
  /** List all available CGARegistrantAffiliation. */
  CGARegistrantAffiliationsValid: Array<CgaRegistrantAffiliation>;
  /** List multiple CGARevisionHistory. */
  CGARevisionHistories: CgaRevisionHistoryPaginator;
  /** List all available CGARevisionHistory. */
  CGARevisionHistoriesValid: Array<CgaRevisionHistory>;
  /** Find a single CGARevisionHistory by an identifying attribute. */
  CGARevisionHistory?: Maybe<CgaRevisionHistory>;
  /** Find a single CGASharedArea by an identifying attribute. */
  CGASharedArea?: Maybe<CgaSharedArea>;
  /** List multiple CGASharedArea. */
  CGASharedAreas: CgaSharedAreaPaginator;
  /** List all available CGASharedArea. */
  CGASharedAreasValid: Array<CgaSharedArea>;
  /** Find a single CGAViewingRestriction by an identifying attribute. */
  CGAViewingRestriction?: Maybe<CgaViewingRestriction>;
  /** List multiple CGAViewingRestriction. */
  CGAViewingRestrictions: CgaViewingRestrictionPaginator;
  /** List all available CGAViewingRestriction. */
  CGAViewingRestrictionsValid: Array<CgaViewingRestriction>;
  /** Find a single CGAsset by an identifying attribute. */
  CGAsset?: Maybe<CgAsset>;
  /** Find a single CGAsset3DCG by an identifying attribute. */
  CGAsset3DCG?: Maybe<CgAsset3Dcg>;
  /** List multiple CGAsset3DCG. */
  CGAsset3DCGs: CgAsset3DcgPaginator;
  /** Find a single CGAssetCate by an identifying attribute. */
  CGAssetCate?: Maybe<CgAssetCate>;
  /** List multiple CGAssetCate. */
  CGAssetCates: CgAssetCatePaginator;
  /** List all available CGAssetCate. */
  CGAssetCatesValid: Array<CgAssetCate>;
  /** Find a single CGAssetImage by an identifying attribute. */
  CGAssetImage?: Maybe<CgAssetImage>;
  /** List multiple CGAssetImage. */
  CGAssetImages: CgAssetImagePaginator;
  /** Find a single CGAssetTag by an identifying attribute. */
  CGAssetTag?: Maybe<CgAssetTag>;
  /** List multiple CGAssetTag. */
  CGAssetTags: CgAssetTagPaginator;
  /** List all available CGAssetTag. */
  CGAssetTagsValid: Array<CgAssetTag>;
  /** Find a single CGAssetVideo by an identifying attribute. */
  CGAssetVideo?: Maybe<CgAssetVideo>;
  /** List multiple CGAssetVideo. */
  CGAssetVideos: CgAssetVideoPaginator;
  /** List multiple CGAssets. */
  CGAssets: CgAssetPaginator;
  /** List all available CGAssetCate. */
  CGAssetsValid: CgAssetPaginator;
  /** Find a single UserRoleCGAssetStore by an identifying attribute. */
  UserRoleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
  /** List multiple UserRoleCGAssetStore. */
  UserRoleCGAssetStores: UserRoleCgAssetStorePaginator;
  /** List all available UserRoleCGAssetStore. */
  UserRoleCGAssetStoresValid: Array<UserRoleCgAssetStore>;
  /** Find a single Sample by an identifying attribute. */
  sample?: Maybe<Sample>;
  /** List multiple Samples. */
  samples: SamplePaginator;
  /** List all Samples. */
  samplesAll: Array<Sample>;
  /** Find a single user by an identifying attribute. */
  user?: Maybe<User>;
  /** List multiple users. */
  users: UserPaginator;
};


export type QueryCgaBroadcastingRightArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaBroadcastingRightsArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgaRegistrantAffiliationArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaRegistrantAffiliationsArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgaRevisionHistoriesArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgaRevisionHistoryArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaSharedAreaArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaSharedAreasArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgaViewingRestrictionArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaViewingRestrictionsArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAsset3DcgArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAsset3DcGsArgs = {
  file_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetCateArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetCatesArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetImageArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetImagesArgs = {
  file_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetTagArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetTagsArgs = {
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  tag?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCgAssetVideoArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetVideosArgs = {
  file_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetsArgs = {
  first?: Scalars['Int']['input'];
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<CgAssetSearchFormValues>;
};


export type QueryCgAssetsValidArgs = {
  first?: Scalars['Int']['input'];
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<CgAssetSearchFormValues>;
};


export type QueryUserRoleCgAssetStoreArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryUserRoleCgAssetStoresArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QuerySampleArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QuerySamplesArgs = {
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserArgs = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryUsersArgs = {
  first?: Scalars['Int']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
};

export enum RoleCgAssetStore {
  Admin = 'ADMIN',
  Manager = 'MANAGER',
  User = 'USER'
}

/** The available SQL operators that are used to filter query results. */
export enum SqlOperator {
  /** Whether a value is within a range of values (`BETWEEN`) */
  Between = 'BETWEEN',
  /** Equal operator (`=`) */
  Eq = 'EQ',
  /** Greater than operator (`>`) */
  Gt = 'GT',
  /** Greater than or equal operator (`>=`) */
  Gte = 'GTE',
  /** Whether a value is within a set of values (`IN`) */
  In = 'IN',
  /** Whether a value is not null (`IS NOT NULL`) */
  IsNotNull = 'IS_NOT_NULL',
  /** Whether a value is null (`IS NULL`) */
  IsNull = 'IS_NULL',
  /** Simple pattern matching (`LIKE`) */
  Like = 'LIKE',
  /** Less than operator (`<`) */
  Lt = 'LT',
  /** Less than or equal operator (`<=`) */
  Lte = 'LTE',
  /** Not equal operator (`!=`) */
  Neq = 'NEQ',
  /** Whether a value is not within a range of values (`NOT BETWEEN`) */
  NotBetween = 'NOT_BETWEEN',
  /** Whether a value is not within a set of values (`NOT IN`) */
  NotIn = 'NOT_IN',
  /** Negation of simple pattern matching (`NOT LIKE`) */
  NotLike = 'NOT_LIKE'
}

/**
 * Sample.
 * サンプル
 */
export type Sample = {
  __typename?: 'Sample';
  /** When the Sample was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** Non-unique text. */
  text: Scalars['String']['output'];
  /** When the Sample was last updated. */
  updated_at: Scalars['DateTime']['output'];
};

/** A paginated list of Sample items. */
export type SamplePaginator = {
  __typename?: 'SamplePaginator';
  /** A list of Sample items. */
  data: Array<Sample>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** Directions for ordering a list of records. */
export enum SortOrder {
  /** Sort records in ascending order. */
  Asc = 'ASC',
  /** Sort records in descending order. */
  Desc = 'DESC'
}

/** Specify if you want to include or exclude trashed results from a query. */
export enum Trashed {
  /** Only return trashed results. */
  Only = 'ONLY',
  /** Return both trashed and non-trashed results. */
  With = 'WITH',
  /** Only return non-trashed results. */
  Without = 'WITHOUT'
}

export type UpdateCgAssetInput = {
  /** アセット3DCG */
  asset3DCGs?: InputMaybe<Array<InputMaybe<CgAsset3DcgInput>>>;
  /** アセット種別ID */
  assetCateId?: InputMaybe<Scalars['ID']['input']>;
  /** アセット画像 */
  assetImages?: InputMaybe<Array<InputMaybe<CgAssetImageInput>>>;
  /** アセットタグ文字列 */
  assetTagsStr?: InputMaybe<Scalars['String']['input']>;
  /** アセット動画 */
  assetVideos?: InputMaybe<Array<InputMaybe<CgAssetVideoInput>>>;
  /** 制作アプリ */
  asset_app_prod?: InputMaybe<Scalars['String']['input']>;
  /** アセット詳細説明 */
  asset_detail?: InputMaybe<Scalars['String']['input']>;
  /** 形式 */
  asset_format?: InputMaybe<Scalars['String']['input']>;
  /** アセットID */
  asset_id?: InputMaybe<Scalars['String']['input']>;
  /** アップロード場所 */
  asset_media_base?: InputMaybe<Scalars['String']['input']>;
  /** レンダラ */
  asset_renderer?: InputMaybe<Scalars['String']['input']>;
  /** サイズ */
  asset_size?: InputMaybe<Scalars['String']['input']>;
  /** 放送権利ID */
  broadcastingRightId?: InputMaybe<Scalars['ID']['input']>;
  id: Scalars['ID']['input'];
  /** 番組ID */
  program_id?: InputMaybe<Scalars['String']['input']>;
  /** 番組名 */
  program_name?: InputMaybe<Scalars['String']['input']>;
  /** 登録者所属ID */
  registrantAffiliationId?: InputMaybe<Scalars['ID']['input']>;
  /** 権利補足（使用上の注意） */
  rights_supplement?: InputMaybe<Scalars['String']['input']>;
  /** 公開エリアID */
  sharedAreaId?: InputMaybe<Scalars['ID']['input']>;
  /** 更新ユーザID */
  user_id: Scalars['ID']['input'];
  /** 有効フラグ */
  valid_flg?: InputMaybe<Scalars['Boolean']['input']>;
  /** 閲覧制限ID */
  viewingRestrictionId?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * Account of a person who utilizes this application.
 * ユーザ
 */
export type User = {
  __typename?: 'User';
  /** When the account was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique email address. */
  email: Scalars['String']['output'];
  /** When the email was verified. */
  email_verified_at?: Maybe<Scalars['DateTime']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** Non-unique name. */
  name: Scalars['String']['output'];
  /** CGアセットストア ロール */
  roleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
  /** When the account was last updated. */
  updated_at: Scalars['DateTime']['output'];
};

/** A paginated list of User items. */
export type UserPaginator = {
  __typename?: 'UserPaginator';
  /** A list of User items. */
  data: Array<User>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * UserRoleCGAssetStore.
 * CGアセットストアロール
 */
export type UserRoleCgAssetStore = {
  __typename?: 'UserRoleCGAssetStore';
  /** When the UserRoleCGAssetStore was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** CGアセットストア ロール */
  role: RoleCgAssetStore;
  /** When the UserRoleCGAssetStore was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of UserRoleCGAssetStore items. */
export type UserRoleCgAssetStorePaginator = {
  __typename?: 'UserRoleCGAssetStorePaginator';
  /** A list of UserRoleCGAssetStore items. */
  data: Array<UserRoleCgAssetStore>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** Dynamic WHERE conditions for queries. */
export type WhereConditions = {
  /** A set of conditions that requires all conditions to match. */
  AND?: InputMaybe<Array<WhereConditions>>;
  /** Check whether a relation exists. Extra conditions or a minimum amount can be applied. */
  HAS?: InputMaybe<WhereConditionsRelation>;
  /** A set of conditions that requires at least one condition to match. */
  OR?: InputMaybe<Array<WhereConditions>>;
  /** The column that is used for the condition. */
  column?: InputMaybe<Scalars['String']['input']>;
  /** The operator that is used for the condition. */
  operator?: InputMaybe<SqlOperator>;
  /** The value that is used for the condition. */
  value?: InputMaybe<Scalars['Mixed']['input']>;
};

/** Dynamic HAS conditions for WHERE condition queries. */
export type WhereConditionsRelation = {
  /** The amount to test. */
  amount?: InputMaybe<Scalars['Int']['input']>;
  /** Additional condition logic. */
  condition?: InputMaybe<WhereConditions>;
  /** The comparison operator to test against the amount. */
  operator?: InputMaybe<SqlOperator>;
  /** The relation that is checked. */
  relation: Scalars['String']['input'];
};

export type CreateCgaBroadcastingRightMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgaBroadcastingRightMutation = { __typename?: 'Mutation', createCGABroadcastingRight?: { __typename: 'CGABroadcastingRight', id: string, desc: string, valid_flg: boolean } | null };

export type CreateCgAssetMutationVariables = Exact<{
  input: CreateCgAssetInput;
}>;


export type CreateCgAssetMutation = { __typename?: 'Mutation', createCGAsset?: { __typename: 'CGAsset', id: string, asset_id: string, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, asset_media_base: string, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', desc: string } | null, assetImages?: Array<{ __typename?: 'CGAssetImage', file_name: string, url: string, file_path: string } | null> | null, assetVideos?: Array<{ __typename?: 'CGAssetVideo', file_name: string, url: string, file_path: string } | null> | null, asset3DCGs?: Array<{ __typename?: 'CGAsset3DCG', file_name: string, url: string, file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistory?: Array<{ __typename?: 'CGARevisionHistory', created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null } | null };

export type CreateCgAssetCateMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgAssetCateMutation = { __typename?: 'Mutation', createCGAssetCate?: { __typename: 'CGAssetCate', id: string, desc: string, valid_flg: boolean } | null };

export type CreateCgaRegistrantAffiliationMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgaRegistrantAffiliationMutation = { __typename?: 'Mutation', createCGARegistrantAffiliation?: { __typename: 'CGARegistrantAffiliation', id: string, desc: string, valid_flg: boolean } | null };

export type CreateCgaSharedAreaMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgaSharedAreaMutation = { __typename?: 'Mutation', createCGASharedArea?: { __typename: 'CGASharedArea', id: string, desc: string, valid_flg: boolean } | null };

export type CreateCgaViewingRestrictionMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgaViewingRestrictionMutation = { __typename?: 'Mutation', createCGAViewingRestriction?: { __typename: 'CGAViewingRestriction', id: string, desc: string, valid_flg: boolean } | null };

export type CreateSampleMutationVariables = Exact<{
  text: Scalars['String']['input'];
}>;


export type CreateSampleMutation = { __typename?: 'Mutation', createSample?: { __typename: 'Sample', id: string, text: string } | null };

export type CreateUserRoleCgAssetStoreMutationVariables = Exact<{
  role: RoleCgAssetStore;
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateUserRoleCgAssetStoreMutation = { __typename?: 'Mutation', createUserRoleCGAssetStore?: { __typename: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, valid_flg: boolean } | null };

export type DeleteCgaBroadcastingRightMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgaBroadcastingRightMutation = { __typename?: 'Mutation', deleteCGABroadcastingRight?: { __typename: 'CGABroadcastingRight', id: string, desc: string, valid_flg: boolean } | null };

export type DeleteCgAssetMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgAssetMutation = { __typename?: 'Mutation', deleteCGAsset?: { __typename: 'CGAsset', id: string, asset_id: string, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, asset_media_base: string, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', desc: string } | null, assetImages?: Array<{ __typename?: 'CGAssetImage', file_name: string, url: string, file_path: string } | null> | null, assetVideos?: Array<{ __typename?: 'CGAssetVideo', file_name: string, url: string, file_path: string } | null> | null, asset3DCGs?: Array<{ __typename?: 'CGAsset3DCG', file_name: string, url: string, file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistory?: Array<{ __typename?: 'CGARevisionHistory', created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null } | null };

export type DeleteCgAssetCateMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgAssetCateMutation = { __typename?: 'Mutation', deleteCGAssetCate?: { __typename: 'CGAssetCate', id: string, desc: string, valid_flg: boolean } | null };

export type DeleteCgaRegistrantAffiliationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgaRegistrantAffiliationMutation = { __typename?: 'Mutation', deleteCGARegistrantAffiliation?: { __typename: 'CGARegistrantAffiliation', id: string, desc: string, valid_flg: boolean } | null };

export type DeleteCgaSharedAreaMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgaSharedAreaMutation = { __typename?: 'Mutation', deleteCGASharedArea?: { __typename: 'CGASharedArea', id: string, desc: string, valid_flg: boolean } | null };

export type DeleteCgaViewingRestrictionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgaViewingRestrictionMutation = { __typename?: 'Mutation', deleteCGAViewingRestriction?: { __typename: 'CGAViewingRestriction', id: string, desc: string, valid_flg: boolean } | null };

export type DeleteSampleMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteSampleMutation = { __typename?: 'Mutation', deleteSample?: { __typename: 'Sample', id: string, text: string } | null };

export type DeleteUserRoleCgAssetStoreMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteUserRoleCgAssetStoreMutation = { __typename?: 'Mutation', deleteUserRoleCGAssetStore?: { __typename: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, valid_flg: boolean } | null };

export type UpdateCgaRegistrantAffiliationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgaRegistrantAffiliationMutation = { __typename?: 'Mutation', updateCGARegistrantAffiliation?: { __typename: 'CGARegistrantAffiliation', id: string, desc: string, valid_flg: boolean } | null };

export type UpdateCgaSharedAreaMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgaSharedAreaMutation = { __typename?: 'Mutation', updateCGASharedArea?: { __typename: 'CGASharedArea', id: string, desc: string, valid_flg: boolean } | null };

export type UpdateCgaViewingRestrictionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgaViewingRestrictionMutation = { __typename?: 'Mutation', updateCGAViewingRestriction?: { __typename: 'CGAViewingRestriction', id: string, desc: string, valid_flg: boolean } | null };

export type UpdateCgaBroadcastingRightMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgaBroadcastingRightMutation = { __typename?: 'Mutation', updateCGABroadcastingRight?: { __typename: 'CGABroadcastingRight', id: string, desc: string, valid_flg: boolean } | null };

export type UpdateCgAssetMutationVariables = Exact<{
  input: UpdateCgAssetInput;
}>;


export type UpdateCgAssetMutation = { __typename?: 'Mutation', updateCGAsset?: { __typename: 'CGAsset', id: string, asset_id: string, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, asset_media_base: string, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', desc: string } | null, assetImages?: Array<{ __typename?: 'CGAssetImage', file_name: string, url: string, file_path: string } | null> | null, assetVideos?: Array<{ __typename?: 'CGAssetVideo', file_name: string, url: string, file_path: string } | null> | null, asset3DCGs?: Array<{ __typename?: 'CGAsset3DCG', file_name: string, url: string, file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistory?: Array<{ __typename?: 'CGARevisionHistory', created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null } | null };

export type UpdateCgAssetCateMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgAssetCateMutation = { __typename?: 'Mutation', updateCGAssetCate?: { __typename: 'CGAssetCate', id: string, desc: string, valid_flg: boolean } | null };

export type UpdateUserRoleCgAssetStoreMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  role: RoleCgAssetStore;
  desc: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateUserRoleCgAssetStoreMutation = { __typename?: 'Mutation', updateUserRoleCGAssetStore?: { __typename: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, valid_flg: boolean } | null };

export type GetCgaBroadcastingRightQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgaBroadcastingRightQuery = { __typename?: 'Query', CGABroadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string, valid_flg: boolean, created_at: any } | null };

export type GetCgaBroadcastingRightsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgaBroadcastingRightsQuery = { __typename?: 'Query', CGABroadcastingRights: { __typename?: 'CGABroadcastingRightPaginator', data: Array<{ __typename?: 'CGABroadcastingRight', id: string, desc: string, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgaViewingRestrictionQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgaViewingRestrictionQuery = { __typename?: 'Query', CGAViewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string, valid_flg: boolean, created_at: any } | null };

export type GetCgaViewingRestrictionsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgaViewingRestrictionsQuery = { __typename?: 'Query', CGAViewingRestrictions: { __typename?: 'CGAViewingRestrictionPaginator', data: Array<{ __typename?: 'CGAViewingRestriction', id: string, desc: string, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgAssetQuery = { __typename?: 'Query', CGAsset?: { __typename?: 'CGAsset', id: string, asset_id: string, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, asset_media_base: string, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', id: string, desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string } | null, assetImages?: Array<{ __typename?: 'CGAssetImage', id: string, file_name: string, url: string, file_path: string } | null> | null, assetVideos?: Array<{ __typename?: 'CGAssetVideo', id: string, file_name: string, url: string, file_path: string } | null> | null, asset3DCGs?: Array<{ __typename?: 'CGAsset3DCG', id: string, file_name: string, url: string, file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', id: string, tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistory?: Array<{ __typename?: 'CGARevisionHistory', id: string, created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null } | null };

export type GetCgAssetCateQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgAssetCateQuery = { __typename?: 'Query', CGAssetCate?: { __typename?: 'CGAssetCate', id: string, desc: string, valid_flg: boolean, created_at: any } | null };

export type GetCgAssetCatesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgAssetCatesQuery = { __typename?: 'Query', CGAssetCates: { __typename?: 'CGAssetCatePaginator', data: Array<{ __typename?: 'CGAssetCate', id: string, desc: string, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetCatesValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgAssetCatesValidQuery = { __typename?: 'Query', CGAssetCatesValid: Array<{ __typename?: 'CGAssetCate', desc: string, id: string }> };

export type GetCgAssetsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  search?: InputMaybe<CgAssetSearchFormValues>;
}>;


export type GetCgAssetsQuery = { __typename?: 'Query', CGAssets: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, asset_media_base: string, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', id: string, desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string } | null, assetImages?: Array<{ __typename?: 'CGAssetImage', id: string, file_name: string, url: string, file_path: string } | null> | null, assetVideos?: Array<{ __typename?: 'CGAssetVideo', id: string, file_name: string, url: string, file_path: string } | null> | null, asset3DCGs?: Array<{ __typename?: 'CGAsset3DCG', id: string, file_name: string, url: string, file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', id: string, tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistory?: Array<{ __typename?: 'CGARevisionHistory', id: string, created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgaBroadcastingRightsValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgaBroadcastingRightsValidQuery = { __typename?: 'Query', CGABroadcastingRightsValid: Array<{ __typename?: 'CGABroadcastingRight', desc: string, id: string }> };

export type GetCgaRegistrantAffiliationQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgaRegistrantAffiliationQuery = { __typename?: 'Query', CGARegistrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string, valid_flg: boolean, created_at: any } | null };

export type GetCgaRegistrantAffiliationsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgaRegistrantAffiliationsQuery = { __typename?: 'Query', CGARegistrantAffiliations: { __typename?: 'CGARegistrantAffiliationPaginator', data: Array<{ __typename?: 'CGARegistrantAffiliation', id: string, desc: string, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgaRegistrantAffilliationsValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgaRegistrantAffilliationsValidQuery = { __typename?: 'Query', CGARegistrantAffiliationsValid: Array<{ __typename?: 'CGARegistrantAffiliation', desc: string, id: string }> };

export type GetCgaSharedAreaQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgaSharedAreaQuery = { __typename?: 'Query', CGASharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string, valid_flg: boolean, created_at: any } | null };

export type GetCgaSharedAreasQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgaSharedAreasQuery = { __typename?: 'Query', CGASharedAreas: { __typename?: 'CGASharedAreaPaginator', data: Array<{ __typename?: 'CGASharedArea', id: string, desc: string, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgaSharedAreasValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgaSharedAreasValidQuery = { __typename?: 'Query', CGASharedAreasValid: Array<{ __typename?: 'CGASharedArea', desc: string, id: string }> };

export type GetCgaViewingRestrictionsValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgaViewingRestrictionsValidQuery = { __typename?: 'Query', CGAViewingRestrictionsValid: Array<{ __typename?: 'CGAViewingRestriction', desc: string, id: string }> };

export type GetSampleQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetSampleQuery = { __typename?: 'Query', sample?: { __typename?: 'Sample', created_at: any, id: string, text: string } | null };

export type GetUserRoleCgAssetStoreQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetUserRoleCgAssetStoreQuery = { __typename?: 'Query', UserRoleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, valid_flg: boolean, created_at: any } | null };

export type GetUserRoleCgAssetStoresQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetUserRoleCgAssetStoresQuery = { __typename?: 'Query', UserRoleCGAssetStores: { __typename?: 'UserRoleCGAssetStorePaginator', data: Array<{ __typename?: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type SamplesAllQueryVariables = Exact<{ [key: string]: never; }>;


export type SamplesAllQuery = { __typename?: 'Query', samplesAll: Array<{ __typename?: 'Sample', id: string, text: string }> };


export const CreateCgaBroadcastingRightDocument = gql`
    mutation CreateCGABroadcastingRight($desc: String!, $valid_flg: Boolean!) {
  createCGABroadcastingRight(desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type CreateCgaBroadcastingRightMutationFn = Apollo.MutationFunction<CreateCgaBroadcastingRightMutation, CreateCgaBroadcastingRightMutationVariables>;

/**
 * __useCreateCgaBroadcastingRightMutation__
 *
 * To run a mutation, you first call `useCreateCgaBroadcastingRightMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgaBroadcastingRightMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgaBroadcastingRightMutation, { data, loading, error }] = useCreateCgaBroadcastingRightMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgaBroadcastingRightMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgaBroadcastingRightMutation, CreateCgaBroadcastingRightMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgaBroadcastingRightMutation, CreateCgaBroadcastingRightMutationVariables>(CreateCgaBroadcastingRightDocument, options);
      }
export type CreateCgaBroadcastingRightMutationHookResult = ReturnType<typeof useCreateCgaBroadcastingRightMutation>;
export type CreateCgaBroadcastingRightMutationResult = Apollo.MutationResult<CreateCgaBroadcastingRightMutation>;
export type CreateCgaBroadcastingRightMutationOptions = Apollo.BaseMutationOptions<CreateCgaBroadcastingRightMutation, CreateCgaBroadcastingRightMutationVariables>;
export const CreateCgAssetDocument = gql`
    mutation CreateCgAsset($input: CreateCGAssetInput!) {
  createCGAsset(input: $input) {
    __typename
    id
    asset_id
    assetCate {
      desc
    }
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      desc
    }
    viewingRestriction {
      desc
    }
    broadcastingRight {
      desc
    }
    sharedArea {
      desc
    }
    rights_supplement
    asset_detail
    asset_media_base
    assetImages {
      file_name
      url
      file_path
    }
    assetVideos {
      file_name
      url
      file_path
    }
    asset3DCGs {
      file_name
      url
      file_path
    }
    assetTags {
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistory {
      created_at
      desc
      revisedUser {
        name
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type CreateCgAssetMutationFn = Apollo.MutationFunction<CreateCgAssetMutation, CreateCgAssetMutationVariables>;

/**
 * __useCreateCgAssetMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetMutation, { data, loading, error }] = useCreateCgAssetMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCgAssetMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetMutation, CreateCgAssetMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetMutation, CreateCgAssetMutationVariables>(CreateCgAssetDocument, options);
      }
export type CreateCgAssetMutationHookResult = ReturnType<typeof useCreateCgAssetMutation>;
export type CreateCgAssetMutationResult = Apollo.MutationResult<CreateCgAssetMutation>;
export type CreateCgAssetMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetMutation, CreateCgAssetMutationVariables>;
export const CreateCgAssetCateDocument = gql`
    mutation CreateCgAssetCate($desc: String!, $valid_flg: Boolean!) {
  createCGAssetCate(desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type CreateCgAssetCateMutationFn = Apollo.MutationFunction<CreateCgAssetCateMutation, CreateCgAssetCateMutationVariables>;

/**
 * __useCreateCgAssetCateMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetCateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetCateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetCateMutation, { data, loading, error }] = useCreateCgAssetCateMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgAssetCateMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetCateMutation, CreateCgAssetCateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetCateMutation, CreateCgAssetCateMutationVariables>(CreateCgAssetCateDocument, options);
      }
export type CreateCgAssetCateMutationHookResult = ReturnType<typeof useCreateCgAssetCateMutation>;
export type CreateCgAssetCateMutationResult = Apollo.MutationResult<CreateCgAssetCateMutation>;
export type CreateCgAssetCateMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetCateMutation, CreateCgAssetCateMutationVariables>;
export const CreateCgaRegistrantAffiliationDocument = gql`
    mutation CreateCgaRegistrantAffiliation($desc: String!, $valid_flg: Boolean!) {
  createCGARegistrantAffiliation(desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type CreateCgaRegistrantAffiliationMutationFn = Apollo.MutationFunction<CreateCgaRegistrantAffiliationMutation, CreateCgaRegistrantAffiliationMutationVariables>;

/**
 * __useCreateCgaRegistrantAffiliationMutation__
 *
 * To run a mutation, you first call `useCreateCgaRegistrantAffiliationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgaRegistrantAffiliationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgaRegistrantAffiliationMutation, { data, loading, error }] = useCreateCgaRegistrantAffiliationMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgaRegistrantAffiliationMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgaRegistrantAffiliationMutation, CreateCgaRegistrantAffiliationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgaRegistrantAffiliationMutation, CreateCgaRegistrantAffiliationMutationVariables>(CreateCgaRegistrantAffiliationDocument, options);
      }
export type CreateCgaRegistrantAffiliationMutationHookResult = ReturnType<typeof useCreateCgaRegistrantAffiliationMutation>;
export type CreateCgaRegistrantAffiliationMutationResult = Apollo.MutationResult<CreateCgaRegistrantAffiliationMutation>;
export type CreateCgaRegistrantAffiliationMutationOptions = Apollo.BaseMutationOptions<CreateCgaRegistrantAffiliationMutation, CreateCgaRegistrantAffiliationMutationVariables>;
export const CreateCgaSharedAreaDocument = gql`
    mutation CreateCgaSharedArea($desc: String!, $valid_flg: Boolean!) {
  createCGASharedArea(desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type CreateCgaSharedAreaMutationFn = Apollo.MutationFunction<CreateCgaSharedAreaMutation, CreateCgaSharedAreaMutationVariables>;

/**
 * __useCreateCgaSharedAreaMutation__
 *
 * To run a mutation, you first call `useCreateCgaSharedAreaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgaSharedAreaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgaSharedAreaMutation, { data, loading, error }] = useCreateCgaSharedAreaMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgaSharedAreaMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgaSharedAreaMutation, CreateCgaSharedAreaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgaSharedAreaMutation, CreateCgaSharedAreaMutationVariables>(CreateCgaSharedAreaDocument, options);
      }
export type CreateCgaSharedAreaMutationHookResult = ReturnType<typeof useCreateCgaSharedAreaMutation>;
export type CreateCgaSharedAreaMutationResult = Apollo.MutationResult<CreateCgaSharedAreaMutation>;
export type CreateCgaSharedAreaMutationOptions = Apollo.BaseMutationOptions<CreateCgaSharedAreaMutation, CreateCgaSharedAreaMutationVariables>;
export const CreateCgaViewingRestrictionDocument = gql`
    mutation CreateCgaViewingRestriction($desc: String!, $valid_flg: Boolean!) {
  createCGAViewingRestriction(desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type CreateCgaViewingRestrictionMutationFn = Apollo.MutationFunction<CreateCgaViewingRestrictionMutation, CreateCgaViewingRestrictionMutationVariables>;

/**
 * __useCreateCgaViewingRestrictionMutation__
 *
 * To run a mutation, you first call `useCreateCgaViewingRestrictionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgaViewingRestrictionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgaViewingRestrictionMutation, { data, loading, error }] = useCreateCgaViewingRestrictionMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgaViewingRestrictionMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgaViewingRestrictionMutation, CreateCgaViewingRestrictionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgaViewingRestrictionMutation, CreateCgaViewingRestrictionMutationVariables>(CreateCgaViewingRestrictionDocument, options);
      }
export type CreateCgaViewingRestrictionMutationHookResult = ReturnType<typeof useCreateCgaViewingRestrictionMutation>;
export type CreateCgaViewingRestrictionMutationResult = Apollo.MutationResult<CreateCgaViewingRestrictionMutation>;
export type CreateCgaViewingRestrictionMutationOptions = Apollo.BaseMutationOptions<CreateCgaViewingRestrictionMutation, CreateCgaViewingRestrictionMutationVariables>;
export const CreateSampleDocument = gql`
    mutation CreateSample($text: String!) {
  createSample(text: $text) {
    __typename
    id
    text
  }
}
    `;
export type CreateSampleMutationFn = Apollo.MutationFunction<CreateSampleMutation, CreateSampleMutationVariables>;

/**
 * __useCreateSampleMutation__
 *
 * To run a mutation, you first call `useCreateSampleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSampleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSampleMutation, { data, loading, error }] = useCreateSampleMutation({
 *   variables: {
 *      text: // value for 'text'
 *   },
 * });
 */
export function useCreateSampleMutation(baseOptions?: Apollo.MutationHookOptions<CreateSampleMutation, CreateSampleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSampleMutation, CreateSampleMutationVariables>(CreateSampleDocument, options);
      }
export type CreateSampleMutationHookResult = ReturnType<typeof useCreateSampleMutation>;
export type CreateSampleMutationResult = Apollo.MutationResult<CreateSampleMutation>;
export type CreateSampleMutationOptions = Apollo.BaseMutationOptions<CreateSampleMutation, CreateSampleMutationVariables>;
export const CreateUserRoleCgAssetStoreDocument = gql`
    mutation CreateUserRoleCGAssetStore($role: RoleCGAssetStore!, $desc: String!, $valid_flg: Boolean!) {
  createUserRoleCGAssetStore(role: $role, desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    role
    desc
    valid_flg
  }
}
    `;
export type CreateUserRoleCgAssetStoreMutationFn = Apollo.MutationFunction<CreateUserRoleCgAssetStoreMutation, CreateUserRoleCgAssetStoreMutationVariables>;

/**
 * __useCreateUserRoleCgAssetStoreMutation__
 *
 * To run a mutation, you first call `useCreateUserRoleCgAssetStoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserRoleCgAssetStoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserRoleCgAssetStoreMutation, { data, loading, error }] = useCreateUserRoleCgAssetStoreMutation({
 *   variables: {
 *      role: // value for 'role'
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateUserRoleCgAssetStoreMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserRoleCgAssetStoreMutation, CreateUserRoleCgAssetStoreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserRoleCgAssetStoreMutation, CreateUserRoleCgAssetStoreMutationVariables>(CreateUserRoleCgAssetStoreDocument, options);
      }
export type CreateUserRoleCgAssetStoreMutationHookResult = ReturnType<typeof useCreateUserRoleCgAssetStoreMutation>;
export type CreateUserRoleCgAssetStoreMutationResult = Apollo.MutationResult<CreateUserRoleCgAssetStoreMutation>;
export type CreateUserRoleCgAssetStoreMutationOptions = Apollo.BaseMutationOptions<CreateUserRoleCgAssetStoreMutation, CreateUserRoleCgAssetStoreMutationVariables>;
export const DeleteCgaBroadcastingRightDocument = gql`
    mutation DeleteCGABroadcastingRight($id: ID!) {
  deleteCGABroadcastingRight(id: $id) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type DeleteCgaBroadcastingRightMutationFn = Apollo.MutationFunction<DeleteCgaBroadcastingRightMutation, DeleteCgaBroadcastingRightMutationVariables>;

/**
 * __useDeleteCgaBroadcastingRightMutation__
 *
 * To run a mutation, you first call `useDeleteCgaBroadcastingRightMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgaBroadcastingRightMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgaBroadcastingRightMutation, { data, loading, error }] = useDeleteCgaBroadcastingRightMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgaBroadcastingRightMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgaBroadcastingRightMutation, DeleteCgaBroadcastingRightMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgaBroadcastingRightMutation, DeleteCgaBroadcastingRightMutationVariables>(DeleteCgaBroadcastingRightDocument, options);
      }
export type DeleteCgaBroadcastingRightMutationHookResult = ReturnType<typeof useDeleteCgaBroadcastingRightMutation>;
export type DeleteCgaBroadcastingRightMutationResult = Apollo.MutationResult<DeleteCgaBroadcastingRightMutation>;
export type DeleteCgaBroadcastingRightMutationOptions = Apollo.BaseMutationOptions<DeleteCgaBroadcastingRightMutation, DeleteCgaBroadcastingRightMutationVariables>;
export const DeleteCgAssetDocument = gql`
    mutation DeleteCgAsset($id: ID!) {
  deleteCGAsset(id: $id) {
    __typename
    id
    asset_id
    assetCate {
      desc
    }
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      desc
    }
    viewingRestriction {
      desc
    }
    broadcastingRight {
      desc
    }
    sharedArea {
      desc
    }
    rights_supplement
    asset_detail
    asset_media_base
    assetImages {
      file_name
      url
      file_path
    }
    assetVideos {
      file_name
      url
      file_path
    }
    asset3DCGs {
      file_name
      url
      file_path
    }
    assetTags {
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistory {
      created_at
      desc
      revisedUser {
        name
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type DeleteCgAssetMutationFn = Apollo.MutationFunction<DeleteCgAssetMutation, DeleteCgAssetMutationVariables>;

/**
 * __useDeleteCgAssetMutation__
 *
 * To run a mutation, you first call `useDeleteCgAssetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgAssetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgAssetMutation, { data, loading, error }] = useDeleteCgAssetMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgAssetMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgAssetMutation, DeleteCgAssetMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgAssetMutation, DeleteCgAssetMutationVariables>(DeleteCgAssetDocument, options);
      }
export type DeleteCgAssetMutationHookResult = ReturnType<typeof useDeleteCgAssetMutation>;
export type DeleteCgAssetMutationResult = Apollo.MutationResult<DeleteCgAssetMutation>;
export type DeleteCgAssetMutationOptions = Apollo.BaseMutationOptions<DeleteCgAssetMutation, DeleteCgAssetMutationVariables>;
export const DeleteCgAssetCateDocument = gql`
    mutation DeleteCgAssetCate($id: ID!) {
  deleteCGAssetCate(id: $id) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type DeleteCgAssetCateMutationFn = Apollo.MutationFunction<DeleteCgAssetCateMutation, DeleteCgAssetCateMutationVariables>;

/**
 * __useDeleteCgAssetCateMutation__
 *
 * To run a mutation, you first call `useDeleteCgAssetCateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgAssetCateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgAssetCateMutation, { data, loading, error }] = useDeleteCgAssetCateMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgAssetCateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgAssetCateMutation, DeleteCgAssetCateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgAssetCateMutation, DeleteCgAssetCateMutationVariables>(DeleteCgAssetCateDocument, options);
      }
export type DeleteCgAssetCateMutationHookResult = ReturnType<typeof useDeleteCgAssetCateMutation>;
export type DeleteCgAssetCateMutationResult = Apollo.MutationResult<DeleteCgAssetCateMutation>;
export type DeleteCgAssetCateMutationOptions = Apollo.BaseMutationOptions<DeleteCgAssetCateMutation, DeleteCgAssetCateMutationVariables>;
export const DeleteCgaRegistrantAffiliationDocument = gql`
    mutation DeleteCgaRegistrantAffiliation($id: ID!) {
  deleteCGARegistrantAffiliation(id: $id) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type DeleteCgaRegistrantAffiliationMutationFn = Apollo.MutationFunction<DeleteCgaRegistrantAffiliationMutation, DeleteCgaRegistrantAffiliationMutationVariables>;

/**
 * __useDeleteCgaRegistrantAffiliationMutation__
 *
 * To run a mutation, you first call `useDeleteCgaRegistrantAffiliationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgaRegistrantAffiliationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgaRegistrantAffiliationMutation, { data, loading, error }] = useDeleteCgaRegistrantAffiliationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgaRegistrantAffiliationMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgaRegistrantAffiliationMutation, DeleteCgaRegistrantAffiliationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgaRegistrantAffiliationMutation, DeleteCgaRegistrantAffiliationMutationVariables>(DeleteCgaRegistrantAffiliationDocument, options);
      }
export type DeleteCgaRegistrantAffiliationMutationHookResult = ReturnType<typeof useDeleteCgaRegistrantAffiliationMutation>;
export type DeleteCgaRegistrantAffiliationMutationResult = Apollo.MutationResult<DeleteCgaRegistrantAffiliationMutation>;
export type DeleteCgaRegistrantAffiliationMutationOptions = Apollo.BaseMutationOptions<DeleteCgaRegistrantAffiliationMutation, DeleteCgaRegistrantAffiliationMutationVariables>;
export const DeleteCgaSharedAreaDocument = gql`
    mutation DeleteCgaSharedArea($id: ID!) {
  deleteCGASharedArea(id: $id) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type DeleteCgaSharedAreaMutationFn = Apollo.MutationFunction<DeleteCgaSharedAreaMutation, DeleteCgaSharedAreaMutationVariables>;

/**
 * __useDeleteCgaSharedAreaMutation__
 *
 * To run a mutation, you first call `useDeleteCgaSharedAreaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgaSharedAreaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgaSharedAreaMutation, { data, loading, error }] = useDeleteCgaSharedAreaMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgaSharedAreaMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgaSharedAreaMutation, DeleteCgaSharedAreaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgaSharedAreaMutation, DeleteCgaSharedAreaMutationVariables>(DeleteCgaSharedAreaDocument, options);
      }
export type DeleteCgaSharedAreaMutationHookResult = ReturnType<typeof useDeleteCgaSharedAreaMutation>;
export type DeleteCgaSharedAreaMutationResult = Apollo.MutationResult<DeleteCgaSharedAreaMutation>;
export type DeleteCgaSharedAreaMutationOptions = Apollo.BaseMutationOptions<DeleteCgaSharedAreaMutation, DeleteCgaSharedAreaMutationVariables>;
export const DeleteCgaViewingRestrictionDocument = gql`
    mutation DeleteCgaViewingRestriction($id: ID!) {
  deleteCGAViewingRestriction(id: $id) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type DeleteCgaViewingRestrictionMutationFn = Apollo.MutationFunction<DeleteCgaViewingRestrictionMutation, DeleteCgaViewingRestrictionMutationVariables>;

/**
 * __useDeleteCgaViewingRestrictionMutation__
 *
 * To run a mutation, you first call `useDeleteCgaViewingRestrictionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgaViewingRestrictionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgaViewingRestrictionMutation, { data, loading, error }] = useDeleteCgaViewingRestrictionMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgaViewingRestrictionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgaViewingRestrictionMutation, DeleteCgaViewingRestrictionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgaViewingRestrictionMutation, DeleteCgaViewingRestrictionMutationVariables>(DeleteCgaViewingRestrictionDocument, options);
      }
export type DeleteCgaViewingRestrictionMutationHookResult = ReturnType<typeof useDeleteCgaViewingRestrictionMutation>;
export type DeleteCgaViewingRestrictionMutationResult = Apollo.MutationResult<DeleteCgaViewingRestrictionMutation>;
export type DeleteCgaViewingRestrictionMutationOptions = Apollo.BaseMutationOptions<DeleteCgaViewingRestrictionMutation, DeleteCgaViewingRestrictionMutationVariables>;
export const DeleteSampleDocument = gql`
    mutation DeleteSample($id: ID!) {
  deleteSample(id: $id) {
    __typename
    id
    text
  }
}
    `;
export type DeleteSampleMutationFn = Apollo.MutationFunction<DeleteSampleMutation, DeleteSampleMutationVariables>;

/**
 * __useDeleteSampleMutation__
 *
 * To run a mutation, you first call `useDeleteSampleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSampleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSampleMutation, { data, loading, error }] = useDeleteSampleMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteSampleMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSampleMutation, DeleteSampleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteSampleMutation, DeleteSampleMutationVariables>(DeleteSampleDocument, options);
      }
export type DeleteSampleMutationHookResult = ReturnType<typeof useDeleteSampleMutation>;
export type DeleteSampleMutationResult = Apollo.MutationResult<DeleteSampleMutation>;
export type DeleteSampleMutationOptions = Apollo.BaseMutationOptions<DeleteSampleMutation, DeleteSampleMutationVariables>;
export const DeleteUserRoleCgAssetStoreDocument = gql`
    mutation DeleteUserRoleCGAssetStore($id: ID!) {
  deleteUserRoleCGAssetStore(id: $id) {
    __typename
    id
    role
    desc
    valid_flg
  }
}
    `;
export type DeleteUserRoleCgAssetStoreMutationFn = Apollo.MutationFunction<DeleteUserRoleCgAssetStoreMutation, DeleteUserRoleCgAssetStoreMutationVariables>;

/**
 * __useDeleteUserRoleCgAssetStoreMutation__
 *
 * To run a mutation, you first call `useDeleteUserRoleCgAssetStoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserRoleCgAssetStoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserRoleCgAssetStoreMutation, { data, loading, error }] = useDeleteUserRoleCgAssetStoreMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteUserRoleCgAssetStoreMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserRoleCgAssetStoreMutation, DeleteUserRoleCgAssetStoreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteUserRoleCgAssetStoreMutation, DeleteUserRoleCgAssetStoreMutationVariables>(DeleteUserRoleCgAssetStoreDocument, options);
      }
export type DeleteUserRoleCgAssetStoreMutationHookResult = ReturnType<typeof useDeleteUserRoleCgAssetStoreMutation>;
export type DeleteUserRoleCgAssetStoreMutationResult = Apollo.MutationResult<DeleteUserRoleCgAssetStoreMutation>;
export type DeleteUserRoleCgAssetStoreMutationOptions = Apollo.BaseMutationOptions<DeleteUserRoleCgAssetStoreMutation, DeleteUserRoleCgAssetStoreMutationVariables>;
export const UpdateCgaRegistrantAffiliationDocument = gql`
    mutation UpdateCGARegistrantAffiliation($id: ID!, $desc: String!, $valid_flg: Boolean!) {
  updateCGARegistrantAffiliation(id: $id, desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type UpdateCgaRegistrantAffiliationMutationFn = Apollo.MutationFunction<UpdateCgaRegistrantAffiliationMutation, UpdateCgaRegistrantAffiliationMutationVariables>;

/**
 * __useUpdateCgaRegistrantAffiliationMutation__
 *
 * To run a mutation, you first call `useUpdateCgaRegistrantAffiliationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgaRegistrantAffiliationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgaRegistrantAffiliationMutation, { data, loading, error }] = useUpdateCgaRegistrantAffiliationMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgaRegistrantAffiliationMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgaRegistrantAffiliationMutation, UpdateCgaRegistrantAffiliationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgaRegistrantAffiliationMutation, UpdateCgaRegistrantAffiliationMutationVariables>(UpdateCgaRegistrantAffiliationDocument, options);
      }
export type UpdateCgaRegistrantAffiliationMutationHookResult = ReturnType<typeof useUpdateCgaRegistrantAffiliationMutation>;
export type UpdateCgaRegistrantAffiliationMutationResult = Apollo.MutationResult<UpdateCgaRegistrantAffiliationMutation>;
export type UpdateCgaRegistrantAffiliationMutationOptions = Apollo.BaseMutationOptions<UpdateCgaRegistrantAffiliationMutation, UpdateCgaRegistrantAffiliationMutationVariables>;
export const UpdateCgaSharedAreaDocument = gql`
    mutation UpdateCGASharedArea($id: ID!, $desc: String!, $valid_flg: Boolean!) {
  updateCGASharedArea(id: $id, desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type UpdateCgaSharedAreaMutationFn = Apollo.MutationFunction<UpdateCgaSharedAreaMutation, UpdateCgaSharedAreaMutationVariables>;

/**
 * __useUpdateCgaSharedAreaMutation__
 *
 * To run a mutation, you first call `useUpdateCgaSharedAreaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgaSharedAreaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgaSharedAreaMutation, { data, loading, error }] = useUpdateCgaSharedAreaMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgaSharedAreaMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgaSharedAreaMutation, UpdateCgaSharedAreaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgaSharedAreaMutation, UpdateCgaSharedAreaMutationVariables>(UpdateCgaSharedAreaDocument, options);
      }
export type UpdateCgaSharedAreaMutationHookResult = ReturnType<typeof useUpdateCgaSharedAreaMutation>;
export type UpdateCgaSharedAreaMutationResult = Apollo.MutationResult<UpdateCgaSharedAreaMutation>;
export type UpdateCgaSharedAreaMutationOptions = Apollo.BaseMutationOptions<UpdateCgaSharedAreaMutation, UpdateCgaSharedAreaMutationVariables>;
export const UpdateCgaViewingRestrictionDocument = gql`
    mutation UpdateCGAViewingRestriction($id: ID!, $desc: String!, $valid_flg: Boolean!) {
  updateCGAViewingRestriction(id: $id, desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type UpdateCgaViewingRestrictionMutationFn = Apollo.MutationFunction<UpdateCgaViewingRestrictionMutation, UpdateCgaViewingRestrictionMutationVariables>;

/**
 * __useUpdateCgaViewingRestrictionMutation__
 *
 * To run a mutation, you first call `useUpdateCgaViewingRestrictionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgaViewingRestrictionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgaViewingRestrictionMutation, { data, loading, error }] = useUpdateCgaViewingRestrictionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgaViewingRestrictionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgaViewingRestrictionMutation, UpdateCgaViewingRestrictionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgaViewingRestrictionMutation, UpdateCgaViewingRestrictionMutationVariables>(UpdateCgaViewingRestrictionDocument, options);
      }
export type UpdateCgaViewingRestrictionMutationHookResult = ReturnType<typeof useUpdateCgaViewingRestrictionMutation>;
export type UpdateCgaViewingRestrictionMutationResult = Apollo.MutationResult<UpdateCgaViewingRestrictionMutation>;
export type UpdateCgaViewingRestrictionMutationOptions = Apollo.BaseMutationOptions<UpdateCgaViewingRestrictionMutation, UpdateCgaViewingRestrictionMutationVariables>;
export const UpdateCgaBroadcastingRightDocument = gql`
    mutation UpdateCGABroadcastingRight($id: ID!, $desc: String!, $valid_flg: Boolean!) {
  updateCGABroadcastingRight(id: $id, desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type UpdateCgaBroadcastingRightMutationFn = Apollo.MutationFunction<UpdateCgaBroadcastingRightMutation, UpdateCgaBroadcastingRightMutationVariables>;

/**
 * __useUpdateCgaBroadcastingRightMutation__
 *
 * To run a mutation, you first call `useUpdateCgaBroadcastingRightMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgaBroadcastingRightMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgaBroadcastingRightMutation, { data, loading, error }] = useUpdateCgaBroadcastingRightMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgaBroadcastingRightMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgaBroadcastingRightMutation, UpdateCgaBroadcastingRightMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgaBroadcastingRightMutation, UpdateCgaBroadcastingRightMutationVariables>(UpdateCgaBroadcastingRightDocument, options);
      }
export type UpdateCgaBroadcastingRightMutationHookResult = ReturnType<typeof useUpdateCgaBroadcastingRightMutation>;
export type UpdateCgaBroadcastingRightMutationResult = Apollo.MutationResult<UpdateCgaBroadcastingRightMutation>;
export type UpdateCgaBroadcastingRightMutationOptions = Apollo.BaseMutationOptions<UpdateCgaBroadcastingRightMutation, UpdateCgaBroadcastingRightMutationVariables>;
export const UpdateCgAssetDocument = gql`
    mutation UpdateCgAsset($input: UpdateCGAssetInput!) {
  updateCGAsset(input: $input) {
    __typename
    id
    asset_id
    assetCate {
      desc
    }
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      desc
    }
    viewingRestriction {
      desc
    }
    broadcastingRight {
      desc
    }
    sharedArea {
      desc
    }
    rights_supplement
    asset_detail
    asset_media_base
    assetImages {
      file_name
      url
      file_path
    }
    assetVideos {
      file_name
      url
      file_path
    }
    asset3DCGs {
      file_name
      url
      file_path
    }
    assetTags {
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistory {
      created_at
      desc
      revisedUser {
        name
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type UpdateCgAssetMutationFn = Apollo.MutationFunction<UpdateCgAssetMutation, UpdateCgAssetMutationVariables>;

/**
 * __useUpdateCgAssetMutation__
 *
 * To run a mutation, you first call `useUpdateCgAssetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgAssetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgAssetMutation, { data, loading, error }] = useUpdateCgAssetMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateCgAssetMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgAssetMutation, UpdateCgAssetMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgAssetMutation, UpdateCgAssetMutationVariables>(UpdateCgAssetDocument, options);
      }
export type UpdateCgAssetMutationHookResult = ReturnType<typeof useUpdateCgAssetMutation>;
export type UpdateCgAssetMutationResult = Apollo.MutationResult<UpdateCgAssetMutation>;
export type UpdateCgAssetMutationOptions = Apollo.BaseMutationOptions<UpdateCgAssetMutation, UpdateCgAssetMutationVariables>;
export const UpdateCgAssetCateDocument = gql`
    mutation UpdateCgAssetCate($id: ID!, $desc: String!, $valid_flg: Boolean!) {
  updateCGAssetCate(id: $id, desc: $desc, valid_flg: $valid_flg) {
    __typename
    id
    desc
    valid_flg
  }
}
    `;
export type UpdateCgAssetCateMutationFn = Apollo.MutationFunction<UpdateCgAssetCateMutation, UpdateCgAssetCateMutationVariables>;

/**
 * __useUpdateCgAssetCateMutation__
 *
 * To run a mutation, you first call `useUpdateCgAssetCateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgAssetCateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgAssetCateMutation, { data, loading, error }] = useUpdateCgAssetCateMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgAssetCateMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgAssetCateMutation, UpdateCgAssetCateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgAssetCateMutation, UpdateCgAssetCateMutationVariables>(UpdateCgAssetCateDocument, options);
      }
export type UpdateCgAssetCateMutationHookResult = ReturnType<typeof useUpdateCgAssetCateMutation>;
export type UpdateCgAssetCateMutationResult = Apollo.MutationResult<UpdateCgAssetCateMutation>;
export type UpdateCgAssetCateMutationOptions = Apollo.BaseMutationOptions<UpdateCgAssetCateMutation, UpdateCgAssetCateMutationVariables>;
export const UpdateUserRoleCgAssetStoreDocument = gql`
    mutation UpdateUserRoleCGAssetStore($id: ID!, $role: RoleCGAssetStore!, $desc: String!, $valid_flg: Boolean!) {
  updateUserRoleCGAssetStore(
    id: $id
    role: $role
    desc: $desc
    valid_flg: $valid_flg
  ) {
    __typename
    id
    role
    desc
    valid_flg
  }
}
    `;
export type UpdateUserRoleCgAssetStoreMutationFn = Apollo.MutationFunction<UpdateUserRoleCgAssetStoreMutation, UpdateUserRoleCgAssetStoreMutationVariables>;

/**
 * __useUpdateUserRoleCgAssetStoreMutation__
 *
 * To run a mutation, you first call `useUpdateUserRoleCgAssetStoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserRoleCgAssetStoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserRoleCgAssetStoreMutation, { data, loading, error }] = useUpdateUserRoleCgAssetStoreMutation({
 *   variables: {
 *      id: // value for 'id'
 *      role: // value for 'role'
 *      desc: // value for 'desc'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateUserRoleCgAssetStoreMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserRoleCgAssetStoreMutation, UpdateUserRoleCgAssetStoreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserRoleCgAssetStoreMutation, UpdateUserRoleCgAssetStoreMutationVariables>(UpdateUserRoleCgAssetStoreDocument, options);
      }
export type UpdateUserRoleCgAssetStoreMutationHookResult = ReturnType<typeof useUpdateUserRoleCgAssetStoreMutation>;
export type UpdateUserRoleCgAssetStoreMutationResult = Apollo.MutationResult<UpdateUserRoleCgAssetStoreMutation>;
export type UpdateUserRoleCgAssetStoreMutationOptions = Apollo.BaseMutationOptions<UpdateUserRoleCgAssetStoreMutation, UpdateUserRoleCgAssetStoreMutationVariables>;
export const GetCgaBroadcastingRightDocument = gql`
    query GetCGABroadcastingRight($id: ID!) {
  CGABroadcastingRight(id: $id) {
    id
    desc
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgaBroadcastingRightQuery__
 *
 * To run a query within a React component, call `useGetCgaBroadcastingRightQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaBroadcastingRightQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaBroadcastingRightQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgaBroadcastingRightQuery(baseOptions: Apollo.QueryHookOptions<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>(GetCgaBroadcastingRightDocument, options);
      }
export function useGetCgaBroadcastingRightLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>(GetCgaBroadcastingRightDocument, options);
        }
export type GetCgaBroadcastingRightQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightQuery>;
export type GetCgaBroadcastingRightLazyQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightLazyQuery>;
export type GetCgaBroadcastingRightQueryResult = Apollo.QueryResult<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>;
export const GetCgaBroadcastingRightsDocument = gql`
    query GetCGABroadcastingRights($first: Int!, $page: Int!) {
  CGABroadcastingRights(first: $first, page: $page) {
    data {
      id
      desc
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgaBroadcastingRightsQuery__
 *
 * To run a query within a React component, call `useGetCgaBroadcastingRightsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaBroadcastingRightsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaBroadcastingRightsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgaBroadcastingRightsQuery(baseOptions: Apollo.QueryHookOptions<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>(GetCgaBroadcastingRightsDocument, options);
      }
export function useGetCgaBroadcastingRightsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>(GetCgaBroadcastingRightsDocument, options);
        }
export type GetCgaBroadcastingRightsQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightsQuery>;
export type GetCgaBroadcastingRightsLazyQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightsLazyQuery>;
export type GetCgaBroadcastingRightsQueryResult = Apollo.QueryResult<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>;
export const GetCgaViewingRestrictionDocument = gql`
    query GetCgaViewingRestriction($id: ID!) {
  CGAViewingRestriction(id: $id) {
    id
    desc
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgaViewingRestrictionQuery__
 *
 * To run a query within a React component, call `useGetCgaViewingRestrictionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaViewingRestrictionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaViewingRestrictionQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgaViewingRestrictionQuery(baseOptions: Apollo.QueryHookOptions<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>(GetCgaViewingRestrictionDocument, options);
      }
export function useGetCgaViewingRestrictionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>(GetCgaViewingRestrictionDocument, options);
        }
export type GetCgaViewingRestrictionQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionQuery>;
export type GetCgaViewingRestrictionLazyQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionLazyQuery>;
export type GetCgaViewingRestrictionQueryResult = Apollo.QueryResult<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>;
export const GetCgaViewingRestrictionsDocument = gql`
    query GetCgaViewingRestrictions($first: Int!, $page: Int!) {
  CGAViewingRestrictions(first: $first, page: $page) {
    data {
      id
      desc
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgaViewingRestrictionsQuery__
 *
 * To run a query within a React component, call `useGetCgaViewingRestrictionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaViewingRestrictionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaViewingRestrictionsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgaViewingRestrictionsQuery(baseOptions: Apollo.QueryHookOptions<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>(GetCgaViewingRestrictionsDocument, options);
      }
export function useGetCgaViewingRestrictionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>(GetCgaViewingRestrictionsDocument, options);
        }
export type GetCgaViewingRestrictionsQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionsQuery>;
export type GetCgaViewingRestrictionsLazyQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionsLazyQuery>;
export type GetCgaViewingRestrictionsQueryResult = Apollo.QueryResult<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>;
export const GetCgAssetDocument = gql`
    query GetCgAsset($id: ID!) {
  CGAsset(id: $id) {
    id
    asset_id
    assetCate {
      id
      desc
    }
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      id
      desc
    }
    viewingRestriction {
      id
      desc
    }
    broadcastingRight {
      id
      desc
    }
    sharedArea {
      id
      desc
    }
    rights_supplement
    asset_detail
    asset_media_base
    assetImages {
      id
      file_name
      url
      file_path
    }
    assetVideos {
      id
      file_name
      url
      file_path
    }
    asset3DCGs {
      id
      file_name
      url
      file_path
    }
    assetTags {
      id
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistory {
      id
      created_at
      desc
      revisedUser {
        name
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;

/**
 * __useGetCgAssetQuery__
 *
 * To run a query within a React component, call `useGetCgAssetQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgAssetQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetQuery, GetCgAssetQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetQuery, GetCgAssetQueryVariables>(GetCgAssetDocument, options);
      }
export function useGetCgAssetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetQuery, GetCgAssetQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetQuery, GetCgAssetQueryVariables>(GetCgAssetDocument, options);
        }
export type GetCgAssetQueryHookResult = ReturnType<typeof useGetCgAssetQuery>;
export type GetCgAssetLazyQueryHookResult = ReturnType<typeof useGetCgAssetLazyQuery>;
export type GetCgAssetQueryResult = Apollo.QueryResult<GetCgAssetQuery, GetCgAssetQueryVariables>;
export const GetCgAssetCateDocument = gql`
    query GetCgAssetCate($id: ID!) {
  CGAssetCate(id: $id) {
    id
    desc
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgAssetCateQuery__
 *
 * To run a query within a React component, call `useGetCgAssetCateQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetCateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetCateQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgAssetCateQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>(GetCgAssetCateDocument, options);
      }
export function useGetCgAssetCateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>(GetCgAssetCateDocument, options);
        }
export type GetCgAssetCateQueryHookResult = ReturnType<typeof useGetCgAssetCateQuery>;
export type GetCgAssetCateLazyQueryHookResult = ReturnType<typeof useGetCgAssetCateLazyQuery>;
export type GetCgAssetCateQueryResult = Apollo.QueryResult<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>;
export const GetCgAssetCatesDocument = gql`
    query GetCgAssetCates($first: Int!, $page: Int!) {
  CGAssetCates(first: $first, page: $page) {
    data {
      id
      desc
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetCatesQuery__
 *
 * To run a query within a React component, call `useGetCgAssetCatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetCatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetCatesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgAssetCatesQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>(GetCgAssetCatesDocument, options);
      }
export function useGetCgAssetCatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>(GetCgAssetCatesDocument, options);
        }
export type GetCgAssetCatesQueryHookResult = ReturnType<typeof useGetCgAssetCatesQuery>;
export type GetCgAssetCatesLazyQueryHookResult = ReturnType<typeof useGetCgAssetCatesLazyQuery>;
export type GetCgAssetCatesQueryResult = Apollo.QueryResult<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>;
export const GetCgAssetCatesValidDocument = gql`
    query GetCgAssetCatesValid {
  CGAssetCatesValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgAssetCatesValidQuery__
 *
 * To run a query within a React component, call `useGetCgAssetCatesValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetCatesValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetCatesValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgAssetCatesValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>(GetCgAssetCatesValidDocument, options);
      }
export function useGetCgAssetCatesValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>(GetCgAssetCatesValidDocument, options);
        }
export type GetCgAssetCatesValidQueryHookResult = ReturnType<typeof useGetCgAssetCatesValidQuery>;
export type GetCgAssetCatesValidLazyQueryHookResult = ReturnType<typeof useGetCgAssetCatesValidLazyQuery>;
export type GetCgAssetCatesValidQueryResult = Apollo.QueryResult<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>;
export const GetCgAssetsDocument = gql`
    query GetCgAssets($first: Int!, $page: Int!, $search: CGAssetSearchFormValues) {
  CGAssets(
    first: $first
    page: $page
    orderBy: [{column: "created_at", order: DESC}, {column: "asset_id", order: ASC}]
    search: $search
  ) {
    data {
      id
      asset_id
      assetCate {
        id
        desc
      }
      asset_app_prod
      asset_format
      asset_size
      asset_renderer
      program_id
      program_name
      registrantAffiliation {
        id
        desc
      }
      viewingRestriction {
        id
        desc
      }
      broadcastingRight {
        id
        desc
      }
      sharedArea {
        id
        desc
      }
      rights_supplement
      asset_detail
      asset_media_base
      assetImages {
        id
        file_name
        url
        file_path
      }
      assetVideos {
        id
        file_name
        url
        file_path
      }
      asset3DCGs {
        id
        file_name
        url
        file_path
      }
      assetTags {
        id
        tag
        tag_add_edit_flg
        taggedUser {
          name
        }
        created_at
      }
      revisionHistory {
        id
        created_at
        desc
        revisedUser {
          name
        }
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetsQuery__
 *
 * To run a query within a React component, call `useGetCgAssetsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetCgAssetsQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetsQuery, GetCgAssetsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetsQuery, GetCgAssetsQueryVariables>(GetCgAssetsDocument, options);
      }
export function useGetCgAssetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetsQuery, GetCgAssetsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetsQuery, GetCgAssetsQueryVariables>(GetCgAssetsDocument, options);
        }
export type GetCgAssetsQueryHookResult = ReturnType<typeof useGetCgAssetsQuery>;
export type GetCgAssetsLazyQueryHookResult = ReturnType<typeof useGetCgAssetsLazyQuery>;
export type GetCgAssetsQueryResult = Apollo.QueryResult<GetCgAssetsQuery, GetCgAssetsQueryVariables>;
export const GetCgaBroadcastingRightsValidDocument = gql`
    query GetCgaBroadcastingRightsValid {
  CGABroadcastingRightsValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgaBroadcastingRightsValidQuery__
 *
 * To run a query within a React component, call `useGetCgaBroadcastingRightsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaBroadcastingRightsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaBroadcastingRightsValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgaBroadcastingRightsValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>(GetCgaBroadcastingRightsValidDocument, options);
      }
export function useGetCgaBroadcastingRightsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>(GetCgaBroadcastingRightsValidDocument, options);
        }
export type GetCgaBroadcastingRightsValidQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightsValidQuery>;
export type GetCgaBroadcastingRightsValidLazyQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightsValidLazyQuery>;
export type GetCgaBroadcastingRightsValidQueryResult = Apollo.QueryResult<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>;
export const GetCgaRegistrantAffiliationDocument = gql`
    query GetCgaRegistrantAffiliation($id: ID!) {
  CGARegistrantAffiliation(id: $id) {
    id
    desc
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgaRegistrantAffiliationQuery__
 *
 * To run a query within a React component, call `useGetCgaRegistrantAffiliationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaRegistrantAffiliationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaRegistrantAffiliationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgaRegistrantAffiliationQuery(baseOptions: Apollo.QueryHookOptions<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>(GetCgaRegistrantAffiliationDocument, options);
      }
export function useGetCgaRegistrantAffiliationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>(GetCgaRegistrantAffiliationDocument, options);
        }
export type GetCgaRegistrantAffiliationQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffiliationQuery>;
export type GetCgaRegistrantAffiliationLazyQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffiliationLazyQuery>;
export type GetCgaRegistrantAffiliationQueryResult = Apollo.QueryResult<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>;
export const GetCgaRegistrantAffiliationsDocument = gql`
    query GetCgaRegistrantAffiliations($first: Int!, $page: Int!) {
  CGARegistrantAffiliations(first: $first, page: $page) {
    data {
      id
      desc
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgaRegistrantAffiliationsQuery__
 *
 * To run a query within a React component, call `useGetCgaRegistrantAffiliationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaRegistrantAffiliationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaRegistrantAffiliationsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgaRegistrantAffiliationsQuery(baseOptions: Apollo.QueryHookOptions<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>(GetCgaRegistrantAffiliationsDocument, options);
      }
export function useGetCgaRegistrantAffiliationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>(GetCgaRegistrantAffiliationsDocument, options);
        }
export type GetCgaRegistrantAffiliationsQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffiliationsQuery>;
export type GetCgaRegistrantAffiliationsLazyQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffiliationsLazyQuery>;
export type GetCgaRegistrantAffiliationsQueryResult = Apollo.QueryResult<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>;
export const GetCgaRegistrantAffilliationsValidDocument = gql`
    query GetCgaRegistrantAffilliationsValid {
  CGARegistrantAffiliationsValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgaRegistrantAffilliationsValidQuery__
 *
 * To run a query within a React component, call `useGetCgaRegistrantAffilliationsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaRegistrantAffilliationsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaRegistrantAffilliationsValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgaRegistrantAffilliationsValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>(GetCgaRegistrantAffilliationsValidDocument, options);
      }
export function useGetCgaRegistrantAffilliationsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>(GetCgaRegistrantAffilliationsValidDocument, options);
        }
export type GetCgaRegistrantAffilliationsValidQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffilliationsValidQuery>;
export type GetCgaRegistrantAffilliationsValidLazyQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffilliationsValidLazyQuery>;
export type GetCgaRegistrantAffilliationsValidQueryResult = Apollo.QueryResult<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>;
export const GetCgaSharedAreaDocument = gql`
    query GetCgaSharedArea($id: ID!) {
  CGASharedArea(id: $id) {
    id
    desc
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgaSharedAreaQuery__
 *
 * To run a query within a React component, call `useGetCgaSharedAreaQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaSharedAreaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaSharedAreaQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgaSharedAreaQuery(baseOptions: Apollo.QueryHookOptions<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>(GetCgaSharedAreaDocument, options);
      }
export function useGetCgaSharedAreaLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>(GetCgaSharedAreaDocument, options);
        }
export type GetCgaSharedAreaQueryHookResult = ReturnType<typeof useGetCgaSharedAreaQuery>;
export type GetCgaSharedAreaLazyQueryHookResult = ReturnType<typeof useGetCgaSharedAreaLazyQuery>;
export type GetCgaSharedAreaQueryResult = Apollo.QueryResult<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>;
export const GetCgaSharedAreasDocument = gql`
    query GetCgaSharedAreas($first: Int!, $page: Int!) {
  CGASharedAreas(first: $first, page: $page) {
    data {
      id
      desc
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgaSharedAreasQuery__
 *
 * To run a query within a React component, call `useGetCgaSharedAreasQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaSharedAreasQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaSharedAreasQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgaSharedAreasQuery(baseOptions: Apollo.QueryHookOptions<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>(GetCgaSharedAreasDocument, options);
      }
export function useGetCgaSharedAreasLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>(GetCgaSharedAreasDocument, options);
        }
export type GetCgaSharedAreasQueryHookResult = ReturnType<typeof useGetCgaSharedAreasQuery>;
export type GetCgaSharedAreasLazyQueryHookResult = ReturnType<typeof useGetCgaSharedAreasLazyQuery>;
export type GetCgaSharedAreasQueryResult = Apollo.QueryResult<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>;
export const GetCgaSharedAreasValidDocument = gql`
    query GetCgaSharedAreasValid {
  CGASharedAreasValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgaSharedAreasValidQuery__
 *
 * To run a query within a React component, call `useGetCgaSharedAreasValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaSharedAreasValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaSharedAreasValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgaSharedAreasValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>(GetCgaSharedAreasValidDocument, options);
      }
export function useGetCgaSharedAreasValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>(GetCgaSharedAreasValidDocument, options);
        }
export type GetCgaSharedAreasValidQueryHookResult = ReturnType<typeof useGetCgaSharedAreasValidQuery>;
export type GetCgaSharedAreasValidLazyQueryHookResult = ReturnType<typeof useGetCgaSharedAreasValidLazyQuery>;
export type GetCgaSharedAreasValidQueryResult = Apollo.QueryResult<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>;
export const GetCgaViewingRestrictionsValidDocument = gql`
    query GetCgaViewingRestrictionsValid {
  CGAViewingRestrictionsValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgaViewingRestrictionsValidQuery__
 *
 * To run a query within a React component, call `useGetCgaViewingRestrictionsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaViewingRestrictionsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaViewingRestrictionsValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgaViewingRestrictionsValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>(GetCgaViewingRestrictionsValidDocument, options);
      }
export function useGetCgaViewingRestrictionsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>(GetCgaViewingRestrictionsValidDocument, options);
        }
export type GetCgaViewingRestrictionsValidQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionsValidQuery>;
export type GetCgaViewingRestrictionsValidLazyQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionsValidLazyQuery>;
export type GetCgaViewingRestrictionsValidQueryResult = Apollo.QueryResult<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>;
export const GetSampleDocument = gql`
    query GetSample($id: ID!) {
  sample(id: $id) {
    created_at
    id
    text
  }
}
    `;

/**
 * __useGetSampleQuery__
 *
 * To run a query within a React component, call `useGetSampleQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSampleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSampleQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetSampleQuery(baseOptions: Apollo.QueryHookOptions<GetSampleQuery, GetSampleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSampleQuery, GetSampleQueryVariables>(GetSampleDocument, options);
      }
export function useGetSampleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSampleQuery, GetSampleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSampleQuery, GetSampleQueryVariables>(GetSampleDocument, options);
        }
export type GetSampleQueryHookResult = ReturnType<typeof useGetSampleQuery>;
export type GetSampleLazyQueryHookResult = ReturnType<typeof useGetSampleLazyQuery>;
export type GetSampleQueryResult = Apollo.QueryResult<GetSampleQuery, GetSampleQueryVariables>;
export const GetUserRoleCgAssetStoreDocument = gql`
    query GetUserRoleCGAssetStore($id: ID!) {
  UserRoleCGAssetStore(id: $id) {
    id
    role
    desc
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetUserRoleCgAssetStoreQuery__
 *
 * To run a query within a React component, call `useGetUserRoleCgAssetStoreQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserRoleCgAssetStoreQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserRoleCgAssetStoreQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetUserRoleCgAssetStoreQuery(baseOptions: Apollo.QueryHookOptions<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>(GetUserRoleCgAssetStoreDocument, options);
      }
export function useGetUserRoleCgAssetStoreLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>(GetUserRoleCgAssetStoreDocument, options);
        }
export type GetUserRoleCgAssetStoreQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoreQuery>;
export type GetUserRoleCgAssetStoreLazyQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoreLazyQuery>;
export type GetUserRoleCgAssetStoreQueryResult = Apollo.QueryResult<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>;
export const GetUserRoleCgAssetStoresDocument = gql`
    query GetUserRoleCGAssetStores($first: Int!, $page: Int!) {
  UserRoleCGAssetStores(first: $first, page: $page) {
    data {
      id
      role
      desc
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetUserRoleCgAssetStoresQuery__
 *
 * To run a query within a React component, call `useGetUserRoleCgAssetStoresQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserRoleCgAssetStoresQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserRoleCgAssetStoresQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetUserRoleCgAssetStoresQuery(baseOptions: Apollo.QueryHookOptions<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>(GetUserRoleCgAssetStoresDocument, options);
      }
export function useGetUserRoleCgAssetStoresLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>(GetUserRoleCgAssetStoresDocument, options);
        }
export type GetUserRoleCgAssetStoresQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoresQuery>;
export type GetUserRoleCgAssetStoresLazyQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoresLazyQuery>;
export type GetUserRoleCgAssetStoresQueryResult = Apollo.QueryResult<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>;
export const SamplesAllDocument = gql`
    query SamplesAll {
  samplesAll {
    id
    text
  }
}
    `;

/**
 * __useSamplesAllQuery__
 *
 * To run a query within a React component, call `useSamplesAllQuery` and pass it any options that fit your needs.
 * When your component renders, `useSamplesAllQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSamplesAllQuery({
 *   variables: {
 *   },
 * });
 */
export function useSamplesAllQuery(baseOptions?: Apollo.QueryHookOptions<SamplesAllQuery, SamplesAllQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SamplesAllQuery, SamplesAllQueryVariables>(SamplesAllDocument, options);
      }
export function useSamplesAllLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SamplesAllQuery, SamplesAllQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SamplesAllQuery, SamplesAllQueryVariables>(SamplesAllDocument, options);
        }
export type SamplesAllQueryHookResult = ReturnType<typeof useSamplesAllQuery>;
export type SamplesAllLazyQueryHookResult = ReturnType<typeof useSamplesAllLazyQuery>;
export type SamplesAllQueryResult = Apollo.QueryResult<SamplesAllQuery, SamplesAllQueryVariables>;