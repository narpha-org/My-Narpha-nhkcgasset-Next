// Code generated by graphql-codegen. DO NOT EDIT.
/* eslint-disable */
// @ts-nocheck
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: any; output: any; }
  /** A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`. */
  DateTime: { input: any; output: any; }
  /**
   * Loose type that allows any value. Be careful when passing in large `Int` or `Float` literals,
   * as they may not be parsed correctly on the server side. Use `String` literals if you are
   * dealing with really large numbers to be on the safe side.
   */
  Mixed: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

export type ApiCgAssetsSearchFormValues = {
  assetAppProds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assetCateDescs?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assetGenres?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  keyword?: InputMaybe<Scalars['String']['input']>;
};

/**
 * ApplyDownload.
 * ダウンロード申請
 */
export type ApplyDownload = {
  __typename?: 'ApplyDownload';
  /** コメント */
  applyDownloadComments?: Maybe<Array<Maybe<ApplyDownloadComment>>>;
  /** S3Glacierファイル */
  applyDownloadGlaciers?: Maybe<Array<Maybe<ApplyDownloadGlacier>>>;
  /** 申請ユーザ */
  applyUser?: Maybe<User>;
  /** 申請日 */
  apply_date?: Maybe<Scalars['DateTime']['output']>;
  /** 申請メール送信済 */
  apply_mail_sent?: Maybe<Scalars['Boolean']['output']>;
  /** 承認ユーザ */
  approvalUser?: Maybe<User>;
  /** 承認日 */
  approval_date?: Maybe<Scalars['DateTime']['output']>;
  /** 承認メール送信済 */
  approval_mail_sent?: Maybe<Scalars['Boolean']['output']>;
  /** DL済み通知ユーザ */
  boxDeliverUser?: Maybe<User>;
  /** DL済み通知日 */
  box_deliver_date?: Maybe<Scalars['DateTime']['output']>;
  /** DL済み通知メール送信済 */
  box_deliver_mail_sent?: Maybe<Scalars['Boolean']['output']>;
  /** Boxリンク */
  box_link?: Maybe<Scalars['String']['output']>;
  /** CGアセット */
  cgAsset: CgAsset;
  /** When the ApplyDownload was created. */
  created_at: Scalars['DateTime']['output'];
  /** データ削除日 */
  date_removal?: Maybe<Scalars['DateTime']['output']>;
  /** 利用期間・終了日 */
  date_usage_end?: Maybe<Scalars['DateTime']['output']>;
  /** 利用期間・開始日 */
  date_usage_start?: Maybe<Scalars['DateTime']['output']>;
  /** データ削除完了ユーザ */
  doneUser?: Maybe<User>;
  /** データ削除完了日 */
  done_date?: Maybe<Scalars['DateTime']['output']>;
  /** データ削除完了メール送信済 */
  done_mail_sent?: Maybe<Scalars['Boolean']['output']>;
  /** ダウンロード日 */
  download_date?: Maybe<Scalars['DateTime']['output']>;
  /** その他 */
  etc_txt?: Maybe<Scalars['String']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 番組責任者ユーザ */
  manageUser: User;
  /** 番組ID */
  program_id?: Maybe<Scalars['String']['output']>;
  /** 番組名 */
  program_name?: Maybe<Scalars['String']['output']>;
  /** 利用目的 */
  purpose_of_use_txt?: Maybe<Scalars['String']['output']>;
  /** データ削除通知ユーザ */
  removalUser?: Maybe<User>;
  /** データ削除通知日 */
  removal_date?: Maybe<Scalars['DateTime']['output']>;
  /** データ削除期限日 */
  removal_limit_date?: Maybe<Scalars['DateTime']['output']>;
  /** データ削除通知メール送信済 */
  removal_mail_sent?: Maybe<Scalars['Boolean']['output']>;
  /** ステータス */
  status: StatusApplyDownload;
  /** When the ApplyDownload was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/**
 * ApplyDownloadComment.
 * ダウンロード申請コメント
 */
export type ApplyDownloadComment = {
  __typename?: 'ApplyDownloadComment';
  /** ダウンロード申請 */
  applyDownload: ApplyDownload;
  /** コメント */
  comment: Scalars['String']['output'];
  /** When the ApplyDownloadComment was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** ステータス */
  status: StatusApplyDownload;
  /** When the ApplyDownloadComment was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** コメントユーザ */
  user?: Maybe<User>;
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of ApplyDownloadComment items. */
export type ApplyDownloadCommentPaginator = {
  __typename?: 'ApplyDownloadCommentPaginator';
  /** A list of ApplyDownloadComment items. */
  data: Array<ApplyDownloadComment>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * ApplyDownloadGlacier.
 * ダウンロード申請S3Glacierファイル
 */
export type ApplyDownloadGlacier = {
  __typename?: 'ApplyDownloadGlacier';
  /** ダウンロード申請 */
  applyDownload: ApplyDownload;
  /** When the ApplyDownloadGlacier was created. */
  created_at: Scalars['DateTime']['output'];
  /** 復元有効期限 */
  expiry_date?: Maybe<Scalars['DateTime']['output']>;
  /** リソースファイル名 */
  file_name: Scalars['String']['output'];
  /** リソースファイルパス */
  file_path: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 復元ステータス */
  ongoing_request: Scalars['Boolean']['output'];
  /** 期限付きURL */
  presigned_url?: Maybe<Scalars['String']['output']>;
  /** When the ApplyDownloadGlacier was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** DL許可ユーザ */
  user?: Maybe<User>;
};

/** A paginated list of ApplyDownload items. */
export type ApplyDownloadPaginator = {
  __typename?: 'ApplyDownloadPaginator';
  /** A list of ApplyDownload items. */
  data: Array<ApplyDownload>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** CGアセットデータExcel */
export type AssetBulkExcelInput = {
  /** リソースファイル名 */
  file_name: Scalars['String']['input'];
  /** リソースファイルパス */
  file_path: Scalars['String']['input'];
  thumb_file_name?: InputMaybe<Scalars['String']['input']>;
  thumb_file_path?: InputMaybe<Scalars['String']['input']>;
  thumb_url?: InputMaybe<Scalars['String']['input']>;
  /** URL */
  url: Scalars['String']['input'];
};

/**
 * CGABroadcastingRight.
 * 放送権利
 */
export type CgaBroadcastingRight = {
  __typename?: 'CGABroadcastingRight';
  /** CGアセット */
  cgAssets?: Maybe<Array<Maybe<CgAsset>>>;
  /** When the CGABroadcastingRight was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** When the CGABroadcastingRight was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGABroadcastingRight items. */
export type CgaBroadcastingRightPaginator = {
  __typename?: 'CGABroadcastingRightPaginator';
  /** A list of CGABroadcastingRight items. */
  data: Array<CgaBroadcastingRight>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGARegistrantAffiliation.
 * 登録者所属
 */
export type CgaRegistrantAffiliation = {
  __typename?: 'CGARegistrantAffiliation';
  /** CGアセット */
  cgAssets?: Maybe<Array<Maybe<CgAsset>>>;
  /** When the CGARegistrantAffiliation was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** When the CGARegistrantAffiliation was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGARegistrantAffiliation items. */
export type CgaRegistrantAffiliationPaginator = {
  __typename?: 'CGARegistrantAffiliationPaginator';
  /** A list of CGARegistrantAffiliation items. */
  data: Array<CgaRegistrantAffiliation>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGARevisionHistory.
 * 修正履歴
 */
export type CgaRevisionHistory = {
  __typename?: 'CGARevisionHistory';
  /** CGアセット */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGARevisionHistory was created. */
  created_at: Scalars['DateTime']['output'];
  /** 修正内容 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 修正ユーザID */
  revisedUser?: Maybe<User>;
  /** When the CGARevisionHistory was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGARevisionHistory items. */
export type CgaRevisionHistoryPaginator = {
  __typename?: 'CGARevisionHistoryPaginator';
  /** A list of CGARevisionHistory items. */
  data: Array<CgaRevisionHistory>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGASharedArea.
 * 公開エリア
 */
export type CgaSharedArea = {
  __typename?: 'CGASharedArea';
  /** CGアセット */
  cgAssets?: Maybe<Array<Maybe<CgAsset>>>;
  /** When the CGASharedArea was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** When the CGASharedArea was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGASharedArea items. */
export type CgaSharedAreaPaginator = {
  __typename?: 'CGASharedAreaPaginator';
  /** A list of CGASharedArea items. */
  data: Array<CgaSharedArea>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAViewingRestriction.
 * 閲覧制限
 */
export type CgaViewingRestriction = {
  __typename?: 'CGAViewingRestriction';
  /** CGアセット */
  cgAssets?: Maybe<Array<Maybe<CgAsset>>>;
  /** When the CGAViewingRestriction was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** When the CGAViewingRestriction was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGAViewingRestriction items. */
export type CgaViewingRestrictionPaginator = {
  __typename?: 'CGAViewingRestrictionPaginator';
  /** A list of CGAViewingRestriction items. */
  data: Array<CgaViewingRestriction>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAsset.
 * CGアセット
 */
export type CgAsset = {
  __typename?: 'CGAsset';
  /** ダウンロード申請 */
  applyDownloads?: Maybe<Array<Maybe<ApplyDownload>>>;
  /** アセット3DCG */
  asset3DCGs?: Maybe<Array<Maybe<CgAsset3Dcg>>>;
  /** アセット種別 */
  assetCate?: Maybe<CgAssetCate>;
  /** アセット画像 */
  assetImages?: Maybe<Array<Maybe<CgAssetImage>>>;
  /** アセットタグ */
  assetTags?: Maybe<Array<Maybe<CgAssetTag>>>;
  /** アセットサムネイル */
  assetThumbs?: Maybe<Array<Maybe<CgAssetThumb>>>;
  /** アセットアップロード */
  assetUploads?: Maybe<Array<Maybe<CgAssetUpload>>>;
  /** アセット動画 */
  assetVideos?: Maybe<Array<Maybe<CgAssetVideo>>>;
  /** 制作ソフトウェア */
  asset_app_prod?: Maybe<Scalars['String']['output']>;
  /** アセット詳細説明 */
  asset_detail: Scalars['String']['output'];
  /** 形式 */
  asset_format?: Maybe<Scalars['String']['output']>;
  /** ジャンル */
  asset_genre?: Maybe<Scalars['String']['output']>;
  /** アセットID */
  asset_id: Scalars['String']['output'];
  /** アップロード場所 */
  asset_media_base: Scalars['String']['output'];
  /** アセット名 */
  asset_name: Scalars['String']['output'];
  /** レンダラ */
  asset_renderer?: Maybe<Scalars['String']['output']>;
  /** ファイルサイズ */
  asset_size?: Maybe<Scalars['String']['output']>;
  /** 放送権利 */
  broadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** When the CGAsset was created. */
  created_at: Scalars['DateTime']['output'];
  /** DLカウント */
  download_count?: Maybe<Scalars['Int']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 番組ID */
  program_id?: Maybe<Scalars['String']['output']>;
  /** 番組名 */
  program_name?: Maybe<Scalars['String']['output']>;
  /** 登録者所属 */
  registrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** コメント・レビュー */
  reviews?: Maybe<Array<Maybe<CgAssetReview>>>;
  /** 修正履歴 */
  revisionHistories?: Maybe<Array<Maybe<CgaRevisionHistory>>>;
  /** 権利使用条件 */
  rights_supplement?: Maybe<Scalars['String']['output']>;
  /** 公開エリア */
  sharedArea?: Maybe<CgaSharedArea>;
  /** When the CGAsset was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** アップロード場所 */
  uploadDir?: Maybe<CgAssetUploadDir>;
  /** 登録ユーザ */
  userCreate: User;
  /** 更新ユーザ */
  userUpdate?: Maybe<User>;
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
  /** 閲覧制限 */
  viewingRestriction?: Maybe<CgaViewingRestriction>;
};

/**
 * CGAsset3DCG.
 * アセット3DCG
 */
export type CgAsset3Dcg = {
  __typename?: 'CGAsset3DCG';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAsset3DCG was created. */
  created_at: Scalars['DateTime']['output'];
  /** リソースファイル名 */
  file_name: Scalars['String']['output'];
  /** リソースファイルパス */
  file_path: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** サムネイルファイル名 */
  thumb_file_name?: Maybe<Scalars['String']['output']>;
  /** サムネイルファイルパス */
  thumb_file_path?: Maybe<Scalars['String']['output']>;
  /** サムネイルURL */
  thumb_url?: Maybe<Scalars['String']['output']>;
  /** When the CGAsset3DCG was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** URL */
  url: Scalars['String']['output'];
};

/** アセット3DCG */
export type CgAsset3DcgInput = {
  /** リソースファイル名 */
  file_name: Scalars['String']['input'];
  /** リソースファイルパス */
  file_path: Scalars['String']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  /** URL */
  url: Scalars['String']['input'];
};

/** A paginated list of CGAsset3DCG items. */
export type CgAsset3DcgPaginator = {
  __typename?: 'CGAsset3DCGPaginator';
  /** A list of CGAsset3DCG items. */
  data: Array<CgAsset3Dcg>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetCate.
 * アセット種別
 */
export type CgAssetCate = {
  __typename?: 'CGAssetCate';
  /** CGアセット */
  cgAssets?: Maybe<Array<Maybe<CgAsset>>>;
  /** アセット種別 区分 */
  code: CodeCgAssetCate;
  /** When the CGAssetCate was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** When the CGAssetCate was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGAssetCate items. */
export type CgAssetCatePaginator = {
  __typename?: 'CGAssetCatePaginator';
  /** A list of CGAssetCate items. */
  data: Array<CgAssetCate>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetImage.
 * アセット画像
 */
export type CgAssetImage = {
  __typename?: 'CGAssetImage';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetImage was created. */
  created_at: Scalars['DateTime']['output'];
  /** リソースファイル名 */
  file_name: Scalars['String']['output'];
  /** リソースファイルパス */
  file_path: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** サムネイルファイル名 */
  thumb_file_name?: Maybe<Scalars['String']['output']>;
  /** サムネイルファイルパス */
  thumb_file_path?: Maybe<Scalars['String']['output']>;
  /** サムネイルURL */
  thumb_url?: Maybe<Scalars['String']['output']>;
  /** When the CGAssetImage was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** URL */
  url: Scalars['String']['output'];
};

/** アセット画像 */
export type CgAssetImageInput = {
  /** リソースファイル名 */
  file_name: Scalars['String']['input'];
  /** リソースファイルパス */
  file_path: Scalars['String']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  /** URL */
  url: Scalars['String']['input'];
};

/** A paginated list of CGAssetImage items. */
export type CgAssetImagePaginator = {
  __typename?: 'CGAssetImagePaginator';
  /** A list of CGAssetImage items. */
  data: Array<CgAssetImage>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** A paginated list of CGAsset items. */
export type CgAssetPaginator = {
  __typename?: 'CGAssetPaginator';
  /** A list of CGAsset items. */
  data: Array<CgAsset>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetReview.
 * コメント・レビュー
 */
export type CgAssetReview = {
  __typename?: 'CGAssetReview';
  /** CGアセット */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetReview was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** コメント・レビュー内容 */
  review: Scalars['String']['output'];
  /** コメント・レビューユーザID */
  reviewedUser?: Maybe<User>;
  /** When the CGAssetReview was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** コメント・レビュー */
export type CgAssetReviewInput = {
  id: Scalars['ID']['input'];
  review?: InputMaybe<Scalars['String']['input']>;
  valid_flg: Scalars['Boolean']['input'];
};

/** A paginated list of CGAssetReview items. */
export type CgAssetReviewPaginator = {
  __typename?: 'CGAssetReviewPaginator';
  /** A list of CGAssetReview items. */
  data: Array<CgAssetReview>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetSearchAppProd.
 * アセット検索項目・制作ソフトウェア
 */
export type CgAssetSearchAppProd = {
  __typename?: 'CGAssetSearchAppProd';
  /** コード */
  code: Scalars['String']['output'];
  /** When the CGAssetSearchAppProd was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** When the CGAssetSearchAppProd was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGAssetSearchAppProd items. */
export type CgAssetSearchAppProdPaginator = {
  __typename?: 'CGAssetSearchAppProdPaginator';
  /** A list of CGAssetSearchAppProd items. */
  data: Array<CgAssetSearchAppProd>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

export type CgAssetSearchFormValues = {
  assetAppProds?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assetCates?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  assetGenres?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  keyword?: InputMaybe<Scalars['String']['input']>;
};

/**
 * CGAssetSearchGenre.
 * アセット検索項目・ジャンル
 */
export type CgAssetSearchGenre = {
  __typename?: 'CGAssetSearchGenre';
  /** コード */
  code: Scalars['String']['output'];
  /** When the CGAssetSearchGenre was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** When the CGAssetSearchGenre was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGAssetSearchGenre items. */
export type CgAssetSearchGenrePaginator = {
  __typename?: 'CGAssetSearchGenrePaginator';
  /** A list of CGAssetSearchGenre items. */
  data: Array<CgAssetSearchGenre>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetTag.
 * アセットタグ
 */
export type CgAssetTag = {
  __typename?: 'CGAssetTag';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetTag was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** タグ表記 */
  tag: Scalars['String']['output'];
  /** データ登録（編集）画面で付けたタグか？ */
  tag_add_edit_flg: Scalars['Boolean']['output'];
  /** タグ付けユーザID */
  taggedUser?: Maybe<User>;
  /** When the CGAssetTag was last updated. */
  updated_at: Scalars['DateTime']['output'];
};

/** アセットタグ */
export type CgAssetTagInput = {
  tag: Scalars['String']['input'];
  tag_add_edit_flg: Scalars['Boolean']['input'];
};

/** A paginated list of CGAssetTag items. */
export type CgAssetTagPaginator = {
  __typename?: 'CGAssetTagPaginator';
  /** A list of CGAssetTag items. */
  data: Array<CgAssetTag>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetThumb.
 * アセットサムネイル
 */
export type CgAssetThumb = {
  __typename?: 'CGAssetThumb';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetThumb was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** サムネイルファイル名 */
  thumb_file_name: Scalars['String']['output'];
  /** サムネイルファイルパス */
  thumb_file_path: Scalars['String']['output'];
  /** サムネイルURL */
  thumb_url?: Maybe<Scalars['String']['output']>;
  /** When the CGAssetThumb was last updated. */
  updated_at: Scalars['DateTime']['output'];
};

/** アセットサムネイル */
export type CgAssetThumbInput = {
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url?: InputMaybe<Scalars['String']['input']>;
};

/** A paginated list of CGAssetThumb items. */
export type CgAssetThumbPaginator = {
  __typename?: 'CGAssetThumbPaginator';
  /** A list of CGAssetThumb items. */
  data: Array<CgAssetThumb>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetUpload.
 * アセットアップロード
 */
export type CgAssetUpload = {
  __typename?: 'CGAssetUpload';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetUpload was created. */
  created_at: Scalars['DateTime']['output'];
  /** リソースファイル名 */
  file_name: Scalars['String']['output'];
  /** リソースファイルパス */
  file_path: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** When the CGAssetUpload was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** URL */
  url?: Maybe<Scalars['String']['output']>;
};

/**
 * CGAssetUploadDir.
 * アップロード場所
 */
export type CgAssetUploadDir = {
  __typename?: 'CGAssetUploadDir';
  /** パス */
  base_path: Scalars['String']['output'];
  /** When the CGAssetUploadDir was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** When the CGAssetUploadDir was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of CGAssetUploadDir items. */
export type CgAssetUploadDirPaginator = {
  __typename?: 'CGAssetUploadDirPaginator';
  /** A list of CGAssetUploadDir items. */
  data: Array<CgAssetUploadDir>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** アセットアップロード */
export type CgAssetUploadInput = {
  /** リソースファイル名 */
  file_name: Scalars['String']['input'];
  /** リソースファイルパス */
  file_path: Scalars['String']['input'];
  /** URL */
  url?: InputMaybe<Scalars['String']['input']>;
};

/** A paginated list of CGAssetUpload items. */
export type CgAssetUploadPaginator = {
  __typename?: 'CGAssetUploadPaginator';
  /** A list of CGAssetUpload items. */
  data: Array<CgAssetUpload>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * CGAssetVideo.
 * アセット動画
 */
export type CgAssetVideo = {
  __typename?: 'CGAssetVideo';
  /** CGアセットID */
  cgAsset?: Maybe<CgAsset>;
  /** When the CGAssetVideo was created. */
  created_at: Scalars['DateTime']['output'];
  /** リソースファイル名 */
  file_name: Scalars['String']['output'];
  /** リソースファイルパス */
  file_path: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** サムネイルファイル名 */
  thumb_file_name?: Maybe<Scalars['String']['output']>;
  /** サムネイルファイルパス */
  thumb_file_path?: Maybe<Scalars['String']['output']>;
  /** サムネイルURL */
  thumb_url?: Maybe<Scalars['String']['output']>;
  /** When the CGAssetVideo was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** URL */
  url: Scalars['String']['output'];
};

/** アセット動画 */
export type CgAssetVideoInput = {
  /** リソースファイル名 */
  file_name: Scalars['String']['input'];
  /** リソースファイルパス */
  file_path: Scalars['String']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  /** URL */
  url: Scalars['String']['input'];
};

/** A paginated list of CGAssetVideo items. */
export type CgAssetVideoPaginator = {
  __typename?: 'CGAssetVideoPaginator';
  /** A list of CGAssetVideo items. */
  data: Array<CgAssetVideo>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

export enum CgAssetsSearchSection {
  CgassetsCreatedByUser = 'CGASSETS_CREATED_BY_USER',
  CgassetsSearchedByAdmin = 'CGASSETS_SEARCHED_BY_ADMIN'
}

export enum CodeCgAssetCate {
  C2D = 'C2D',
  C3D = 'C3D',
  Img = 'IMG'
}

export enum CodeMailTemplate {
  AdminComment = 'ADMIN_COMMENT',
  ApplyDownloadApply = 'APPLY_DOWNLOAD_APPLY',
  ApplyDownloadApproval = 'APPLY_DOWNLOAD_APPROVAL',
  ApplyDownloadBoxDeliver = 'APPLY_DOWNLOAD_BOX_DELIVER',
  ApplyDownloadBoxReady = 'APPLY_DOWNLOAD_BOX_READY',
  ApplyDownloadDlNotice = 'APPLY_DOWNLOAD_DL_NOTICE',
  ApplyDownloadDone = 'APPLY_DOWNLOAD_DONE',
  ApplyDownloadRemoval = 'APPLY_DOWNLOAD_REMOVAL',
  AssetComment = 'ASSET_COMMENT',
  AssetDeleteConfirm = 'ASSET_DELETE_CONFIRM',
  PendingList = 'PENDING_LIST',
  RemovalAlert = 'REMOVAL_ALERT'
}

export type CreateApplyDownloadArgs = {
  asset_db_id: Scalars['ID']['input'];
  /** 利用期間・終了日 */
  date_usage_end?: InputMaybe<Scalars['DateTime']['input']>;
  /** 利用期間・開始日 */
  date_usage_start?: InputMaybe<Scalars['DateTime']['input']>;
  /** その他 */
  etc_txt?: InputMaybe<Scalars['String']['input']>;
  manage_user_id: Scalars['ID']['input'];
  /** 番組ID */
  program_id?: InputMaybe<Scalars['String']['input']>;
  /** 番組名 */
  program_name?: InputMaybe<Scalars['String']['input']>;
  /** 利用目的 */
  purpose_of_use_txt?: InputMaybe<Scalars['String']['input']>;
  user_id: Scalars['ID']['input'];
};

export type CreateCgAssetInput = {
  /** アセット3DCG */
  asset3DCGs?: InputMaybe<Array<InputMaybe<CgAsset3DcgInput>>>;
  /** アセット種別ID */
  assetCateId?: InputMaybe<Scalars['ID']['input']>;
  /** アセット画像 */
  assetImages?: InputMaybe<Array<InputMaybe<CgAssetImageInput>>>;
  /** アセットタグ */
  assetTags?: InputMaybe<Array<InputMaybe<CgAssetTagInput>>>;
  /** アセットタグ文字列 */
  assetTagsStr?: InputMaybe<Scalars['String']['input']>;
  /** アセットサムネイル */
  assetThumbs?: InputMaybe<Array<InputMaybe<CgAssetThumbInput>>>;
  /** アセットアップロード */
  assetUploads?: InputMaybe<Array<InputMaybe<CgAssetUploadInput>>>;
  /** アセット動画 */
  assetVideos?: InputMaybe<Array<InputMaybe<CgAssetVideoInput>>>;
  /** 制作ソフトウェア */
  asset_app_prod?: InputMaybe<Scalars['String']['input']>;
  /** アセット詳細説明 */
  asset_detail?: InputMaybe<Scalars['String']['input']>;
  /** 形式 */
  asset_format?: InputMaybe<Scalars['String']['input']>;
  /** ジャンル */
  asset_genre?: InputMaybe<Scalars['String']['input']>;
  /** アセットID */
  asset_id?: InputMaybe<Scalars['String']['input']>;
  /** アップロード場所 */
  asset_media_base?: InputMaybe<Scalars['String']['input']>;
  /** アセット名 */
  asset_name?: InputMaybe<Scalars['String']['input']>;
  /** レンダラ */
  asset_renderer?: InputMaybe<Scalars['String']['input']>;
  /** ファイルサイズ */
  asset_size?: InputMaybe<Scalars['String']['input']>;
  /** 放送権利ID */
  broadcastingRightId?: InputMaybe<Scalars['ID']['input']>;
  /** 登録ユーザID */
  create_user_id: Scalars['ID']['input'];
  /** 番組ID */
  program_id?: InputMaybe<Scalars['String']['input']>;
  /** 番組名 */
  program_name?: InputMaybe<Scalars['String']['input']>;
  /** 登録者所属ID */
  registrantAffiliationId?: InputMaybe<Scalars['ID']['input']>;
  /** コメント・レビュー */
  reviews?: InputMaybe<Array<InputMaybe<CgAssetReviewInput>>>;
  /** 修正履歴 */
  revision_history?: InputMaybe<Scalars['String']['input']>;
  /** 権利使用条件 */
  rights_supplement?: InputMaybe<Scalars['String']['input']>;
  /** 公開エリアID */
  sharedAreaId?: InputMaybe<Scalars['ID']['input']>;
  /** フォーム送信区分 */
  submitFormInput?: InputMaybe<Scalars['Int']['input']>;
  /** アップロード場所ID */
  uploadDirId?: InputMaybe<Scalars['ID']['input']>;
  /** 有効フラグ */
  valid_flg?: InputMaybe<Scalars['Boolean']['input']>;
  /** 閲覧制限ID */
  viewingRestrictionId?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateSessionInput = {
  expires?: InputMaybe<Scalars['DateTime']['input']>;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateUserInput = {
  /** Unique email address. */
  email: Scalars['String']['input'];
  /** When the email was verified. */
  emailVerified?: InputMaybe<Scalars['DateTime']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  /** Non-unique name. */
  name: Scalars['String']['input'];
  /** 主所属コード */
  regist_affili_code?: InputMaybe<Scalars['String']['input']>;
  /** 主所属名 */
  regist_affili_id?: InputMaybe<Scalars['ID']['input']>;
  /** CGアセットストア ロール */
  user_role_cgas_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateVerificationTokenInput = {
  expires?: InputMaybe<Scalars['DateTime']['input']>;
  identifier?: InputMaybe<Scalars['String']['input']>;
  token?: InputMaybe<Scalars['String']['input']>;
};

export type ExportCgAssets = {
  __typename?: 'ExportCGAssets';
  file_url?: Maybe<Scalars['String']['output']>;
};

export type GetUserByAccountInput = {
  provider: Scalars['String']['input'];
  providerAccountId: Scalars['String']['input'];
};

export type ImportCgAssets = {
  __typename?: 'ImportCGAssets';
  total?: Maybe<Scalars['Int']['output']>;
};

export type ImportCgAssetsInput = {
  /** CGアセットデータExcel */
  assetBulkExcel?: InputMaybe<AssetBulkExcelInput>;
  /** 登録ユーザID */
  create_user_id: Scalars['ID']['input'];
};

export type LinkAccountInput = {
  access_token?: InputMaybe<Scalars['String']['input']>;
  expires_at?: InputMaybe<Scalars['Int']['input']>;
  id_token?: InputMaybe<Scalars['String']['input']>;
  oauth_token?: InputMaybe<Scalars['String']['input']>;
  oauth_token_secret?: InputMaybe<Scalars['String']['input']>;
  provider: Scalars['String']['input'];
  providerAccountId: Scalars['String']['input'];
  refresh_token?: InputMaybe<Scalars['String']['input']>;
  refresh_token_expires_in?: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<Scalars['String']['input']>;
  session_state?: InputMaybe<Scalars['String']['input']>;
  token_type?: InputMaybe<Scalars['String']['input']>;
  type: Scalars['String']['input'];
  userId: Scalars['ID']['input'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** ダウンロード申請 */
  createApplyDownload?: Maybe<ApplyDownload>;
  /** Create a ApplyDownloadComment. */
  createApplyDownloadComment?: Maybe<ApplyDownloadComment>;
  /** Create a ApplyDownloadGlacier. */
  createApplyDownloadGlacier?: Maybe<ApplyDownloadGlacier>;
  /** Create a CGABroadcastingRight. */
  createCGABroadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** Create a CGARegistrantAffiliation. */
  createCGARegistrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** Create a CGARevisionHistory. */
  createCGARevisionHistory?: Maybe<CgaRevisionHistory>;
  /** Create a CGASharedArea. */
  createCGASharedArea?: Maybe<CgaSharedArea>;
  /** Create a CGAViewingRestriction. */
  createCGAViewingRestriction?: Maybe<CgaViewingRestriction>;
  /** Create a CGAsset. */
  createCGAsset?: Maybe<CgAsset>;
  /** Create a CGAsset3DCG. */
  createCGAsset3DCG?: Maybe<CgAsset3Dcg>;
  /** Create a CGAssetCate. */
  createCGAssetCate?: Maybe<CgAssetCate>;
  /** Create a CGAssetImage. */
  createCGAssetImage?: Maybe<CgAssetImage>;
  /** Create a CGAssetReview. */
  createCGAssetReview?: Maybe<CgAssetReview>;
  /** Create a CGAssetSearchAppProd. */
  createCGAssetSearchAppProd?: Maybe<CgAssetSearchAppProd>;
  /** Create a CGAssetSearchGenre. */
  createCGAssetSearchGenre?: Maybe<CgAssetSearchGenre>;
  /** Create a CGAssetTag. */
  createCGAssetTag?: Maybe<CgAssetTag>;
  /** Create a CGAssetThumb. */
  createCGAssetThumb?: Maybe<CgAssetThumb>;
  /** Create a CGAssetUpload. */
  createCGAssetUpload?: Maybe<CgAssetUpload>;
  /** Create a CGAssetUploadDir. */
  createCGAssetUploadDir?: Maybe<CgAssetUploadDir>;
  /** Create a CGAssetVideo. */
  createCGAssetVideo?: Maybe<CgAssetVideo>;
  /** Create a OktaSession. */
  createSession?: Maybe<OktaSession>;
  /** Create a SystemMailTemplate. */
  createSystemMailTemplate?: Maybe<SystemMailTemplate>;
  /** Create a SystemNotice. */
  createSystemNotice?: Maybe<SystemNotice>;
  /** Create a OktaSession. */
  createUser?: Maybe<User>;
  /** Create a UserRoleCGAssetStore. */
  createUserRoleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
  /** Create a OktaVerificationToken. */
  createVerificationToken?: Maybe<OktaVerificationToken>;
  /** Delete a ApplyDownload. */
  deleteApplyDownload?: Maybe<ApplyDownload>;
  /** Delete a ApplyDownloadComment. */
  deleteApplyDownloadComment?: Maybe<ApplyDownloadComment>;
  /** Delete a ApplyDownloadGlacier. */
  deleteApplyDownloadGlacier?: Maybe<ApplyDownloadGlacier>;
  /** Delete a CGABroadcastingRight. */
  deleteCGABroadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** Delete a CGARegistrantAffiliation. */
  deleteCGARegistrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** Delete a CGARevisionHistory. */
  deleteCGARevisionHistory?: Maybe<CgaRevisionHistory>;
  /** Delete a CGASharedArea. */
  deleteCGASharedArea?: Maybe<CgaSharedArea>;
  /** Delete a CGAViewingRestriction. */
  deleteCGAViewingRestriction?: Maybe<CgaViewingRestriction>;
  /** Delete a CGAsset. */
  deleteCGAsset?: Maybe<CgAsset>;
  /** Delete a CGAsset3DCG. */
  deleteCGAsset3DCG?: Maybe<CgAsset3Dcg>;
  /** Delete a CGAssetCate. */
  deleteCGAssetCate?: Maybe<CgAssetCate>;
  /** Delete a CGAssetImage. */
  deleteCGAssetImage?: Maybe<CgAssetImage>;
  /** Delete a CGAssetReview. */
  deleteCGAssetReview?: Maybe<CgAssetReview>;
  /** Delete a CGAssetSearchAppProd. */
  deleteCGAssetSearchAppProd?: Maybe<CgAssetSearchAppProd>;
  /** Delete a CGAssetSearchGenre. */
  deleteCGAssetSearchGenre?: Maybe<CgAssetSearchGenre>;
  /** Delete a CGAssetTag. */
  deleteCGAssetTag?: Maybe<CgAssetTag>;
  /** Delete a CGAssetThumb. */
  deleteCGAssetThumb?: Maybe<CgAssetThumb>;
  /** Delete a CGAssetUpload. */
  deleteCGAssetUpload?: Maybe<CgAssetUpload>;
  /** Delete a CGAssetUploadDir. */
  deleteCGAssetUploadDir?: Maybe<CgAssetUploadDir>;
  /** Delete a CGAssetVideo. */
  deleteCGAssetVideo?: Maybe<CgAssetVideo>;
  /** Delete a OktaSession. */
  deleteSession?: Maybe<OktaSession>;
  /** Delete a SystemMailTemplate. */
  deleteSystemMailTemplate?: Maybe<SystemMailTemplate>;
  /** Delete a SystemNotice. */
  deleteSystemNotice?: Maybe<SystemNotice>;
  /** Delete a OktaSession. */
  deleteUser?: Maybe<User>;
  /** Delete a UserRoleCGAssetStore. */
  deleteUserRoleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
  /** Import CGAssets. */
  importCGAssets?: Maybe<ImportCgAssets>;
  /** Link a OktaAccount. */
  linkAccount?: Maybe<OktaAccount>;
  /** Unlink a OktaAccount. */
  unlinkAccount?: Maybe<OktaAccount>;
  /** ダウンロード承認 */
  updateApplyDownloadApproval?: Maybe<ApplyDownload>;
  /** データ送付 */
  updateApplyDownloadBoxDeliver?: Maybe<ApplyDownload>;
  /** Update a ApplyDownloadComment. */
  updateApplyDownloadComment?: Maybe<ApplyDownloadComment>;
  /** DL済み通知 */
  updateApplyDownloadDLNotice?: Maybe<ApplyDownload>;
  /** データ削除 */
  updateApplyDownloadDone?: Maybe<ApplyDownload>;
  /** Update a ApplyDownloadGlacier. */
  updateApplyDownloadGlacier?: Maybe<ApplyDownloadGlacier>;
  /** データ削除期限 */
  updateApplyDownloadRemoval?: Maybe<ApplyDownload>;
  /** Update a CGABroadcastingRight. */
  updateCGABroadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** Update a CGARegistrantAffiliation. */
  updateCGARegistrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** Update a CGARevisionHistory. */
  updateCGARevisionHistory?: Maybe<CgaRevisionHistory>;
  /** Update a CGASharedArea. */
  updateCGASharedArea?: Maybe<CgaSharedArea>;
  /** Update a CGAViewingRestriction. */
  updateCGAViewingRestriction?: Maybe<CgaViewingRestriction>;
  /** Update a CGAsset. */
  updateCGAsset?: Maybe<CgAsset>;
  /** Update a CGAsset3DCG. */
  updateCGAsset3DCG?: Maybe<CgAsset3Dcg>;
  /** Update a CGAssetCate. */
  updateCGAssetCate?: Maybe<CgAssetCate>;
  /** Update a CGAssetImage. */
  updateCGAssetImage?: Maybe<CgAssetImage>;
  /** Update a CGAssetReview. */
  updateCGAssetReview?: Maybe<CgAssetReview>;
  /** Update a CGAssetSearchAppProd. */
  updateCGAssetSearchAppProd?: Maybe<CgAssetSearchAppProd>;
  /** Update a CGAssetSearchGenre. */
  updateCGAssetSearchGenre?: Maybe<CgAssetSearchGenre>;
  /** Update a CGAssetTag. */
  updateCGAssetTag?: Maybe<CgAssetTag>;
  /** Update a CGAssetThumb. */
  updateCGAssetThumb?: Maybe<CgAssetThumb>;
  /** Update a CGAssetUpload. */
  updateCGAssetUpload?: Maybe<CgAssetUpload>;
  /** Update a CGAssetUploadDir. */
  updateCGAssetUploadDir?: Maybe<CgAssetUploadDir>;
  /** Update a CGAssetVideo. */
  updateCGAssetVideo?: Maybe<CgAssetVideo>;
  /** Update a OktaSession. */
  updateSession?: Maybe<OktaSession>;
  /** Update a SystemMailTemplate. */
  updateSystemMailTemplate?: Maybe<SystemMailTemplate>;
  /** Update a SystemNotice. */
  updateSystemNotice?: Maybe<SystemNotice>;
  /** Update a OktaSession. */
  updateUser?: Maybe<User>;
  /** Update a User info after init auth. */
  updateUserAuthCustom?: Maybe<User>;
  /** Update a UserRoleCGAssetStore. */
  updateUserRoleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
};


export type MutationCreateApplyDownloadArgs = {
  input: CreateApplyDownloadArgs;
};


export type MutationCreateApplyDownloadCommentArgs = {
  apply_download_id: Scalars['ID']['input'];
  comment: Scalars['String']['input'];
  status: StatusApplyDownload;
  user_id: Scalars['ID']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateApplyDownloadGlacierArgs = {
  apply_download_id: Scalars['ID']['input'];
  file_path: Scalars['String']['input'];
  ongoing_request: Scalars['Boolean']['input'];
  user_id: Scalars['ID']['input'];
};


export type MutationCreateCgaBroadcastingRightArgs = {
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgaRegistrantAffiliationArgs = {
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgaRevisionHistoryArgs = {
  asset_db_id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
};


export type MutationCreateCgaSharedAreaArgs = {
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgaViewingRestrictionArgs = {
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgAssetArgs = {
  input: CreateCgAssetInput;
};


export type MutationCreateCgAsset3DcgArgs = {
  asset_db_id: Scalars['ID']['input'];
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationCreateCgAssetCateArgs = {
  code: CodeCgAssetCate;
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgAssetImageArgs = {
  asset_db_id: Scalars['ID']['input'];
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationCreateCgAssetReviewArgs = {
  asset_db_id: Scalars['ID']['input'];
  review: Scalars['String']['input'];
  reviewed_user_id: Scalars['ID']['input'];
};


export type MutationCreateCgAssetSearchAppProdArgs = {
  code: Scalars['String']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgAssetSearchGenreArgs = {
  code: Scalars['String']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgAssetTagArgs = {
  asset_db_id: Scalars['ID']['input'];
  tag: Scalars['String']['input'];
  tag_add_edit_flg: Scalars['Boolean']['input'];
  tagged_user_id: Scalars['ID']['input'];
};


export type MutationCreateCgAssetThumbArgs = {
  asset_db_id: Scalars['ID']['input'];
  revised_user_id: Scalars['ID']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
};


export type MutationCreateCgAssetUploadArgs = {
  asset_db_id: Scalars['ID']['input'];
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
  url: Scalars['String']['input'];
};


export type MutationCreateCgAssetUploadDirArgs = {
  base_path: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateCgAssetVideoArgs = {
  asset_db_id: Scalars['ID']['input'];
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  revised_user_id: Scalars['ID']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationCreateSessionArgs = {
  input: CreateSessionInput;
};


export type MutationCreateSystemMailTemplateArgs = {
  bcc_mail?: InputMaybe<Scalars['String']['input']>;
  body_tpl: Scalars['String']['input'];
  code: CodeMailTemplate;
  from_mail?: InputMaybe<Scalars['String']['input']>;
  subject_tpl: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateSystemNoticeArgs = {
  create_user_id: Scalars['ID']['input'];
  message: Scalars['String']['input'];
  notice_date: Scalars['DateTime']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateUserArgs = {
  user: CreateUserInput;
};


export type MutationCreateUserRoleCgAssetStoreArgs = {
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  role: RoleCgAssetStore;
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationCreateVerificationTokenArgs = {
  input: CreateVerificationTokenInput;
};


export type MutationDeleteApplyDownloadArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteApplyDownloadCommentArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteApplyDownloadGlacierArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaBroadcastingRightArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaRegistrantAffiliationArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaRevisionHistoryArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaSharedAreaArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgaViewingRestrictionArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAsset3DcgArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetCateArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetImageArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetReviewArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetSearchAppProdArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetSearchGenreArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetTagArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetThumbArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetUploadArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetUploadDirArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCgAssetVideoArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteSessionArgs = {
  sessionToken: Scalars['String']['input'];
};


export type MutationDeleteSystemMailTemplateArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteSystemNoticeArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteUserRoleCgAssetStoreArgs = {
  id: Scalars['ID']['input'];
};


export type MutationImportCgAssetsArgs = {
  input: ImportCgAssetsInput;
};


export type MutationLinkAccountArgs = {
  account: LinkAccountInput;
};


export type MutationUnlinkAccountArgs = {
  input: UnlinkAccountInput;
};


export type MutationUpdateApplyDownloadApprovalArgs = {
  input: UpdateApplyDownloadApprovalArgs;
};


export type MutationUpdateApplyDownloadBoxDeliverArgs = {
  input: UpdateApplyDownloadBoxDeliverArgs;
};


export type MutationUpdateApplyDownloadCommentArgs = {
  comment: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateApplyDownloadDlNoticeArgs = {
  input: UpdateApplyDownloadDlNoticeArgs;
};


export type MutationUpdateApplyDownloadDoneArgs = {
  input: UpdateApplyDownloadDoneArgs;
};


export type MutationUpdateApplyDownloadGlacierArgs = {
  expiry_date?: InputMaybe<Scalars['DateTime']['input']>;
  id: Scalars['ID']['input'];
  ongoing_request: Scalars['Boolean']['input'];
  presigned_url?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateApplyDownloadRemovalArgs = {
  input: UpdateApplyDownloadRemovalArgs;
};


export type MutationUpdateCgaBroadcastingRightArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgaRegistrantAffiliationArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgaRevisionHistoryArgs = {
  desc: Scalars['String']['input'];
};


export type MutationUpdateCgaSharedAreaArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgaViewingRestrictionArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgAssetArgs = {
  input: UpdateCgAssetInput;
};


export type MutationUpdateCgAsset3DcgArgs = {
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationUpdateCgAssetCateArgs = {
  code: CodeCgAssetCate;
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgAssetImageArgs = {
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationUpdateCgAssetReviewArgs = {
  id: Scalars['ID']['input'];
  review: Scalars['String']['input'];
};


export type MutationUpdateCgAssetSearchAppProdArgs = {
  code: Scalars['String']['input'];
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgAssetSearchGenreArgs = {
  code: Scalars['String']['input'];
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgAssetTagArgs = {
  tag: Scalars['String']['input'];
};


export type MutationUpdateCgAssetThumbArgs = {
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
};


export type MutationUpdateCgAssetUploadArgs = {
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationUpdateCgAssetUploadDirArgs = {
  base_path: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateCgAssetVideoArgs = {
  file_name: Scalars['String']['input'];
  file_path: Scalars['String']['input'];
  thumb_file_name: Scalars['String']['input'];
  thumb_file_path: Scalars['String']['input'];
  thumb_url: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationUpdateSessionArgs = {
  input: UpdateSessionInput;
};


export type MutationUpdateSystemMailTemplateArgs = {
  bcc_mail?: InputMaybe<Scalars['String']['input']>;
  body_tpl: Scalars['String']['input'];
  code: CodeMailTemplate;
  from_mail?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  subject_tpl: Scalars['String']['input'];
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateSystemNoticeArgs = {
  id: Scalars['ID']['input'];
  message: Scalars['String']['input'];
  notice_date: Scalars['DateTime']['input'];
  update_user_id?: InputMaybe<Scalars['ID']['input']>;
  valid_flg: Scalars['Boolean']['input'];
};


export type MutationUpdateUserArgs = {
  user: UpdateUserInput;
};


export type MutationUpdateUserAuthCustomArgs = {
  user: UpdateUserAuthCustomInput;
};


export type MutationUpdateUserRoleCgAssetStoreArgs = {
  desc: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  order: Scalars['Int']['input'];
  role: RoleCgAssetStore;
  valid_flg: Scalars['Boolean']['input'];
};

/**
 * OktaAccount.
 * ユーザーアカウント（Next.js）
 *
 * unique([provider, providerAccountId])
 */
export type OktaAccount = {
  __typename?: 'OktaAccount';
  access_token?: Maybe<Scalars['String']['output']>;
  /** When the account was created. */
  created_at: Scalars['DateTime']['output'];
  expires_at?: Maybe<Scalars['Int']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  id_token?: Maybe<Scalars['String']['output']>;
  oauth_token?: Maybe<Scalars['String']['output']>;
  oauth_token_secret?: Maybe<Scalars['String']['output']>;
  provider: Scalars['String']['output'];
  providerAccountId: Scalars['String']['output'];
  refresh_token?: Maybe<Scalars['String']['output']>;
  refresh_token_expires_in?: Maybe<Scalars['Int']['output']>;
  scope?: Maybe<Scalars['String']['output']>;
  session_state?: Maybe<Scalars['String']['output']>;
  token_type?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  /** When the account was last updated. */
  updated_at: Scalars['DateTime']['output'];
  user: User;
};

/**
 * OktaSession.
 * ユーザーセッション（Next.js）
 */
export type OktaSession = {
  __typename?: 'OktaSession';
  /** When the OktaSession was created. */
  created_at: Scalars['DateTime']['output'];
  expires?: Maybe<Scalars['DateTime']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  sessionToken?: Maybe<Scalars['String']['output']>;
  /** When the OktaSession was last updated. */
  updated_at: Scalars['DateTime']['output'];
  user?: Maybe<User>;
};

/**
 * OktaVerificationToken.
 * 認証トークン（Next.js）
 */
export type OktaVerificationToken = {
  __typename?: 'OktaVerificationToken';
  /** When the OktaVerificationToken was created. */
  created_at: Scalars['DateTime']['output'];
  expires?: Maybe<Scalars['DateTime']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  identifier?: Maybe<Scalars['String']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  /** When the OktaVerificationToken was last updated. */
  updated_at: Scalars['DateTime']['output'];
  user?: Maybe<User>;
};

/** Allows ordering a list of records. */
export type OrderByClause = {
  /** The column that is used for ordering. */
  column: Scalars['String']['input'];
  /** The direction that is used for ordering. */
  order: SortOrder;
};

/** Aggregate functions when ordering by a relation without specifying a column. */
export enum OrderByRelationAggregateFunction {
  /** Amount of items. */
  Count = 'COUNT'
}

/** Aggregate functions when ordering by a relation that may specify a column. */
export enum OrderByRelationWithColumnAggregateFunction {
  /** Average. */
  Avg = 'AVG',
  /** Amount of items. */
  Count = 'COUNT',
  /** Maximum. */
  Max = 'MAX',
  /** Minimum. */
  Min = 'MIN',
  /** Sum. */
  Sum = 'SUM'
}

/** Information about pagination using a fully featured paginator. */
export type PaginatorInfo = {
  __typename?: 'PaginatorInfo';
  /** Number of items in the current page. */
  count: Scalars['Int']['output'];
  /** Index of the current page. */
  currentPage: Scalars['Int']['output'];
  /** Index of the first item in the current page. */
  firstItem?: Maybe<Scalars['Int']['output']>;
  /** Are there more pages after this one? */
  hasMorePages: Scalars['Boolean']['output'];
  /** Index of the last item in the current page. */
  lastItem?: Maybe<Scalars['Int']['output']>;
  /** Index of the last available page. */
  lastPage: Scalars['Int']['output'];
  /** Number of items per page. */
  perPage: Scalars['Int']['output'];
  /** Number of total available items. */
  total: Scalars['Int']['output'];
};

export type Query = {
  __typename?: 'Query';
  /** List all valid CGAssets. */
  ApiCGAssetsValid: CgAssetPaginator;
  /** Find a single ApplyDownload by an identifying attribute. */
  ApplyDownload?: Maybe<ApplyDownload>;
  /** Find a single ApplyDownloadComment by an identifying attribute. */
  ApplyDownloadComment?: Maybe<ApplyDownloadComment>;
  /** List multiple ApplyDownloadComment. */
  ApplyDownloadComments: ApplyDownloadCommentPaginator;
  /** List all available ApplyDownloadComment. */
  ApplyDownloadCommentsValid: Array<ApplyDownloadComment>;
  /** Find a single ApplyDownloadGlacier by an identifying attribute. */
  ApplyDownloadGlacier?: Maybe<ApplyDownloadGlacier>;
  /** Find a single ApplyDownload by an identifying attribute. */
  ApplyDownloadWithPresignedUrl?: Maybe<ApplyDownload>;
  /** 承認待ち or 承認済み */
  ApplyDownloadsApplyOrApproval: ApplyDownloadPaginator;
  /** 承認待ち or ダウンロード or データ削除報告 */
  ApplyDownloadsApplyOrApprovalOrBoxDeliver: ApplyDownloadPaginator;
  /** DLが有効となったBoxリンク通知 */
  ApplyDownloadsBoxDeliverGlacierAll?: Maybe<Array<Maybe<ApplyDownload>>>;
  /** 申請中 or 承認許可 or DL済み通知 or データ消去 */
  ApplyDownloadsNotDone: ApplyDownloadPaginator;
  /** 承認待ち */
  ApplyDownloadsOnlyApply: ApplyDownloadPaginator;
  /** 申請中 or 承認許可 or DL済み通知 or データ消去 or データ消去完了 */
  ApplyDownloadsWithDone: ApplyDownloadPaginator;
  /** Find a single CGABroadcastingRight by an identifying attribute. */
  CGABroadcastingRight?: Maybe<CgaBroadcastingRight>;
  /** List multiple CGABroadcastingRight. */
  CGABroadcastingRights: CgaBroadcastingRightPaginator;
  /** List all available CGABroadcastingRight. */
  CGABroadcastingRightsValid: Array<CgaBroadcastingRight>;
  /** Find a single CGARegistrantAffiliation by an identifying attribute. */
  CGARegistrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** List multiple CGARegistrantAffiliation. */
  CGARegistrantAffiliations: CgaRegistrantAffiliationPaginator;
  /** List all available CGARegistrantAffiliation. */
  CGARegistrantAffiliationsValid: Array<CgaRegistrantAffiliation>;
  /** List multiple CGARevisionHistory. */
  CGARevisionHistories: CgaRevisionHistoryPaginator;
  /** List all available CGARevisionHistory. */
  CGARevisionHistoriesValid: Array<CgaRevisionHistory>;
  /** Find a single CGARevisionHistory by an identifying attribute. */
  CGARevisionHistory?: Maybe<CgaRevisionHistory>;
  /** Find a single CGASharedArea by an identifying attribute. */
  CGASharedArea?: Maybe<CgaSharedArea>;
  /** List multiple CGASharedArea. */
  CGASharedAreas: CgaSharedAreaPaginator;
  /** List all available CGASharedArea. */
  CGASharedAreasValid: Array<CgaSharedArea>;
  /** Find a single CGAViewingRestriction by an identifying attribute. */
  CGAViewingRestriction?: Maybe<CgaViewingRestriction>;
  /** List multiple CGAViewingRestriction. */
  CGAViewingRestrictions: CgaViewingRestrictionPaginator;
  /** List all available CGAViewingRestriction. */
  CGAViewingRestrictionsValid: Array<CgaViewingRestriction>;
  /** Find a single CGAsset by an identifying attribute. */
  CGAsset?: Maybe<CgAsset>;
  /** Find a single CGAsset3DCG by an identifying attribute. */
  CGAsset3DCG?: Maybe<CgAsset3Dcg>;
  /** List multiple CGAsset3DCG. */
  CGAsset3DCGs: CgAsset3DcgPaginator;
  /** Find a single CGAssetCate by an identifying attribute. */
  CGAssetCate?: Maybe<CgAssetCate>;
  /** List multiple CGAssetCate. */
  CGAssetCates: CgAssetCatePaginator;
  /** List all available CGAssetCate. */
  CGAssetCatesValid: Array<CgAssetCate>;
  /** Find a single CGAssetImage by an identifying attribute. */
  CGAssetImage?: Maybe<CgAssetImage>;
  /** List multiple CGAssetImage. */
  CGAssetImages: CgAssetImagePaginator;
  /** Find a single CGAssetReview by an identifying attribute. */
  CGAssetReview?: Maybe<CgAssetReview>;
  /** List multiple CGAssetReview. */
  CGAssetReviews: CgAssetReviewPaginator;
  /** List all available CGAssetReview. */
  CGAssetReviewsValid: Array<CgAssetReview>;
  /** Find a single CGAssetSearchAppProd by an identifying attribute. */
  CGAssetSearchAppProd?: Maybe<CgAssetSearchAppProd>;
  /** List multiple CGAssetSearchAppProd. */
  CGAssetSearchAppProds: CgAssetSearchAppProdPaginator;
  /** List all available CGAssetSearchAppProd. */
  CGAssetSearchAppProdsValid: Array<CgAssetSearchAppProd>;
  /** Find a single CGAssetSearchGenre by an identifying attribute. */
  CGAssetSearchGenre?: Maybe<CgAssetSearchGenre>;
  /** List multiple CGAssetSearchGenre. */
  CGAssetSearchGenres: CgAssetSearchGenrePaginator;
  /** List all available CGAssetSearchGenre. */
  CGAssetSearchGenresValid: Array<CgAssetSearchGenre>;
  /** Find a single CGAssetTag by an identifying attribute. */
  CGAssetTag?: Maybe<CgAssetTag>;
  /** List multiple CGAssetTag. */
  CGAssetTags: CgAssetTagPaginator;
  /** List all available CGAssetTag. */
  CGAssetTagsValid: Array<CgAssetTag>;
  /** Find a single CGAssetThumb by an identifying attribute. */
  CGAssetThumb?: Maybe<CgAssetThumb>;
  /** List multiple CGAssetThumb. */
  CGAssetThumbs: CgAssetThumbPaginator;
  /** Find a single CGAssetUpload by an identifying attribute. */
  CGAssetUpload?: Maybe<CgAssetUpload>;
  /** Find a single CGAssetUploadDir by an identifying attribute. */
  CGAssetUploadDir?: Maybe<CgAssetUploadDir>;
  /** List multiple CGAssetUploadDir. */
  CGAssetUploadDirs: CgAssetUploadDirPaginator;
  /** List all available CGAssetUploadDir. */
  CGAssetUploadDirsValid: Array<CgAssetUploadDir>;
  /** List multiple CGAssetUpload. */
  CGAssetUploads: CgAssetUploadPaginator;
  /** Find a single CGAssetVideo by an identifying attribute. */
  CGAssetVideo?: Maybe<CgAssetVideo>;
  /** List multiple CGAssetVideo. */
  CGAssetVideos: CgAssetVideoPaginator;
  /** List all available CGAssets. */
  CGAssetsAll: CgAssetPaginator;
  /** List all available own created CGAssets. */
  CGAssetsCreatedAll: CgAssetPaginator;
  /** List initial CGAssets. */
  CGAssetsInit: CgAssetPaginator;
  /** List all valid CGAssets. */
  CGAssetsValid: CgAssetPaginator;
  /** Find a single SystemMailTemplate by an identifying attribute. */
  SystemMailTemplate?: Maybe<SystemMailTemplate>;
  /** List multiple SystemMailTemplate. */
  SystemMailTemplates: SystemMailTemplatePaginator;
  /** List all available SystemMailTemplate. */
  SystemMailTemplatesValid: Array<SystemMailTemplate>;
  /** Find a single SystemNotice by an identifying attribute. */
  SystemNotice?: Maybe<SystemNotice>;
  /** List multiple SystemNotice. */
  SystemNotices: SystemNoticePaginator;
  /** List all available SystemNotice. */
  SystemNoticesValid: Array<SystemNotice>;
  /** Find a single User by an identifying attribute. */
  User?: Maybe<User>;
  /** Find a single UserRoleCGAssetStore by an identifying attribute. */
  UserRoleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
  /** List multiple UserRoleCGAssetStore. */
  UserRoleCGAssetStores: UserRoleCgAssetStorePaginator;
  /** List all available UserRoleCGAssetStore. */
  UserRoleCGAssetStoresValid: Array<UserRoleCgAssetStore>;
  /** List multiple Users. */
  Users: UserPaginator;
  /** List all available MANAGER User. */
  UsersManagerValid: Array<User>;
  /** Export all CGAsset. */
  exportCGAssets?: Maybe<ExportCgAssets>;
  /** Find a single OktaSession by an identifying attribute. */
  getSessionAndUser?: Maybe<OktaSession>;
  /** Find a single user by an identifying attribute. */
  getUser?: Maybe<User>;
  /** Find a single user by an identifying attribute. */
  getUserByAccount?: Maybe<User>;
  /** Find a single user by an identifying attribute. */
  getUserByEmail?: Maybe<User>;
  /** Find a single OktaVerificationToken by an identifying attribute. */
  useVerificationToken?: Maybe<OktaVerificationToken>;
};


export type QueryApiCgAssetsValidArgs = {
  first?: Scalars['Int']['input'];
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<ApiCgAssetsSearchFormValues>;
};


export type QueryApplyDownloadArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryApplyDownloadCommentArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryApplyDownloadCommentsArgs = {
  comment?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryApplyDownloadGlacierArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryApplyDownloadWithPresignedUrlArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryApplyDownloadsApplyOrApprovalArgs = {
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  first?: Scalars['Int']['input'];
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
};


export type QueryApplyDownloadsApplyOrApprovalOrBoxDeliverArgs = {
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  first?: Scalars['Int']['input'];
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
};


export type QueryApplyDownloadsBoxDeliverGlacierAllArgs = {
  apply_user_id: Scalars['ID']['input'];
  asset_db_id: Scalars['ID']['input'];
};


export type QueryApplyDownloadsNotDoneArgs = {
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  first?: Scalars['Int']['input'];
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
};


export type QueryApplyDownloadsOnlyApplyArgs = {
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  first?: Scalars['Int']['input'];
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
};


export type QueryApplyDownloadsWithDoneArgs = {
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  first?: Scalars['Int']['input'];
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCgaBroadcastingRightArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaBroadcastingRightsArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgaRegistrantAffiliationArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaRegistrantAffiliationsArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgaRevisionHistoriesArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgaRevisionHistoryArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaSharedAreaArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaSharedAreasArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgaViewingRestrictionArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgaViewingRestrictionsArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAsset3DcgArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAsset3DcGsArgs = {
  file_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetCateArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetCatesArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetImageArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetImagesArgs = {
  file_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetReviewArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetReviewsArgs = {
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  review?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCgAssetSearchAppProdArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetSearchAppProdsArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetSearchGenreArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetSearchGenresArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetTagArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetTagsArgs = {
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  tag?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCgAssetThumbArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetThumbsArgs = {
  file_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetUploadArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetUploadDirArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetUploadDirsArgs = {
  base_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetUploadsArgs = {
  file_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetVideoArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryCgAssetVideosArgs = {
  file_path?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCgAssetsAllArgs = {
  first?: Scalars['Int']['input'];
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<CgAssetSearchFormValues>;
};


export type QueryCgAssetsCreatedAllArgs = {
  create_user_id: Scalars['ID']['input'];
  first?: Scalars['Int']['input'];
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
  section?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCgAssetsInitArgs = {
  first?: Scalars['Int']['input'];
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  valid?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryCgAssetsValidArgs = {
  first?: Scalars['Int']['input'];
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<CgAssetSearchFormValues>;
};


export type QuerySystemMailTemplateArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QuerySystemMailTemplatesArgs = {
  body_tpl?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QuerySystemNoticeArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QuerySystemNoticesArgs = {
  first?: Scalars['Int']['input'];
  message?: InputMaybe<Scalars['String']['input']>;
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QuerySystemNoticesValidArgs = {
  orderBy?: InputMaybe<Array<OrderByClause>>;
};


export type QueryUserArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryUserRoleCgAssetStoreArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryUserRoleCgAssetStoresArgs = {
  desc?: InputMaybe<Scalars['String']['input']>;
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryUsersArgs = {
  first?: Scalars['Int']['input'];
  orderBy?: InputMaybe<Array<OrderByClause>>;
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryGetSessionAndUserArgs = {
  sessionToken: Scalars['String']['input'];
};


export type QueryGetUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGetUserByAccountArgs = {
  input: GetUserByAccountInput;
};


export type QueryGetUserByEmailArgs = {
  email: Scalars['String']['input'];
};


export type QueryUseVerificationTokenArgs = {
  input: UseVerificationTokenInput;
};

export enum RoleCgAssetStore {
  Admin = 'ADMIN',
  Editor = 'EDITOR',
  Manager = 'MANAGER',
  Other = 'OTHER',
  User = 'USER'
}

/** The available SQL operators that are used to filter query results. */
export enum SqlOperator {
  /** Whether a value is within a range of values (`BETWEEN`) */
  Between = 'BETWEEN',
  /** Equal operator (`=`) */
  Eq = 'EQ',
  /** Greater than operator (`>`) */
  Gt = 'GT',
  /** Greater than or equal operator (`>=`) */
  Gte = 'GTE',
  /** Whether a value is within a set of values (`IN`) */
  In = 'IN',
  /** Whether a value is not null (`IS NOT NULL`) */
  IsNotNull = 'IS_NOT_NULL',
  /** Whether a value is null (`IS NULL`) */
  IsNull = 'IS_NULL',
  /** Simple pattern matching (`LIKE`) */
  Like = 'LIKE',
  /** Less than operator (`<`) */
  Lt = 'LT',
  /** Less than or equal operator (`<=`) */
  Lte = 'LTE',
  /** Not equal operator (`!=`) */
  Neq = 'NEQ',
  /** Whether a value is not within a range of values (`NOT BETWEEN`) */
  NotBetween = 'NOT_BETWEEN',
  /** Whether a value is not within a set of values (`NOT IN`) */
  NotIn = 'NOT_IN',
  /** Negation of simple pattern matching (`NOT LIKE`) */
  NotLike = 'NOT_LIKE'
}

export enum SectionApplyDownload {
  AdlAdmin = 'ADL_ADMIN',
  AdlEditor = 'ADL_EDITOR',
  AdlManager = 'ADL_MANAGER',
  AdlOther = 'ADL_OTHER',
  AdlUser = 'ADL_USER',
  ApplyEditor = 'APPLY_EDITOR',
  ApplyManager = 'APPLY_MANAGER',
  ApplyOther = 'APPLY_OTHER',
  ApplyUser = 'APPLY_USER',
  ApprovalEditor = 'APPROVAL_EDITOR',
  ApprovalManager = 'APPROVAL_MANAGER',
  ApprovalOther = 'APPROVAL_OTHER',
  ApprovalUser = 'APPROVAL_USER'
}

/** Directions for ordering a list of records. */
export enum SortOrder {
  /** Sort records in ascending order. */
  Asc = 'ASC',
  /** Sort records in descending order. */
  Desc = 'DESC'
}

export enum StatusApplyDownload {
  Apply = 'APPLY',
  Approval = 'APPROVAL',
  BoxDeliver = 'BOX_DELIVER',
  BoxReady = 'BOX_READY',
  DlNotice = 'DL_NOTICE',
  Done = 'DONE',
  Removal = 'REMOVAL'
}

/**
 * SystemMailTemplate.
 * 管理メールテンプレート
 */
export type SystemMailTemplate = {
  __typename?: 'SystemMailTemplate';
  /** BCCメールアドレス */
  bcc_mail?: Maybe<Scalars['String']['output']>;
  /** メール本文 */
  body_tpl: Scalars['String']['output'];
  /** メール区分 */
  code: CodeMailTemplate;
  /** When the SystemMailTemplate was created. */
  created_at: Scalars['DateTime']['output'];
  /** 送信元メールアドレス */
  from_mail?: Maybe<Scalars['String']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** メール題名 */
  subject_tpl: Scalars['String']['output'];
  /** When the SystemMailTemplate was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of SystemMailTemplate items. */
export type SystemMailTemplatePaginator = {
  __typename?: 'SystemMailTemplatePaginator';
  /** A list of SystemMailTemplate items. */
  data: Array<SystemMailTemplate>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * SystemNotice.
 * お知らせ
 */
export type SystemNotice = {
  __typename?: 'SystemNotice';
  /** When the SystemNotice was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** お知らせ */
  message: Scalars['String']['output'];
  /** お知らせ日時 */
  notice_date: Scalars['DateTime']['output'];
  /** When the SystemNotice was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 登録ユーザ */
  userCreate: User;
  /** 更新ユーザ */
  userUpdate?: Maybe<User>;
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of SystemNotice items. */
export type SystemNoticePaginator = {
  __typename?: 'SystemNoticePaginator';
  /** A list of SystemNotice items. */
  data: Array<SystemNotice>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** Specify if you want to include or exclude trashed results from a query. */
export enum Trashed {
  /** Only return trashed results. */
  Only = 'ONLY',
  /** Return both trashed and non-trashed results. */
  With = 'WITH',
  /** Only return non-trashed results. */
  Without = 'WITHOUT'
}

export type UnlinkAccountInput = {
  provider?: InputMaybe<Scalars['String']['input']>;
  providerAccountId?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateApplyDownloadApprovalArgs = {
  id: Scalars['ID']['input'];
  user_id: Scalars['ID']['input'];
};

export type UpdateApplyDownloadBoxDeliverArgs = {
  id: Scalars['ID']['input'];
  /** データ削除期限日 */
  removal_limit_date?: InputMaybe<Scalars['DateTime']['input']>;
  user_id: Scalars['ID']['input'];
};

export type UpdateApplyDownloadDlNoticeArgs = {
  id: Scalars['ID']['input'];
  user_id: Scalars['ID']['input'];
};

export type UpdateApplyDownloadDoneArgs = {
  id: Scalars['ID']['input'];
  user_id: Scalars['ID']['input'];
};

export type UpdateApplyDownloadRemovalArgs = {
  id: Scalars['ID']['input'];
  user_id: Scalars['ID']['input'];
};

export type UpdateCgAssetInput = {
  /** アセット3DCG */
  asset3DCGs?: InputMaybe<Array<InputMaybe<CgAsset3DcgInput>>>;
  /** アセット種別ID */
  assetCateId?: InputMaybe<Scalars['ID']['input']>;
  /** アセット画像 */
  assetImages?: InputMaybe<Array<InputMaybe<CgAssetImageInput>>>;
  /** アセットタグ */
  assetTags?: InputMaybe<Array<InputMaybe<CgAssetTagInput>>>;
  /** アセットタグ文字列 */
  assetTagsStr?: InputMaybe<Scalars['String']['input']>;
  /** アセットサムネイル */
  assetThumbs?: InputMaybe<Array<InputMaybe<CgAssetThumbInput>>>;
  /** アセットアップロード */
  assetUploads?: InputMaybe<Array<InputMaybe<CgAssetUploadInput>>>;
  /** アセット動画 */
  assetVideos?: InputMaybe<Array<InputMaybe<CgAssetVideoInput>>>;
  /** 制作ソフトウェア */
  asset_app_prod?: InputMaybe<Scalars['String']['input']>;
  /** アセット詳細説明 */
  asset_detail?: InputMaybe<Scalars['String']['input']>;
  /** 形式 */
  asset_format?: InputMaybe<Scalars['String']['input']>;
  /** ジャンル */
  asset_genre?: InputMaybe<Scalars['String']['input']>;
  /** アセットID */
  asset_id?: InputMaybe<Scalars['String']['input']>;
  /** アップロード場所 */
  asset_media_base?: InputMaybe<Scalars['String']['input']>;
  /** アセット名 */
  asset_name?: InputMaybe<Scalars['String']['input']>;
  /** レンダラ */
  asset_renderer?: InputMaybe<Scalars['String']['input']>;
  /** ファイルサイズ */
  asset_size?: InputMaybe<Scalars['String']['input']>;
  /** 放送権利ID */
  broadcastingRightId?: InputMaybe<Scalars['ID']['input']>;
  id: Scalars['ID']['input'];
  /** 番組ID */
  program_id?: InputMaybe<Scalars['String']['input']>;
  /** 番組名 */
  program_name?: InputMaybe<Scalars['String']['input']>;
  /** 登録者所属ID */
  registrantAffiliationId?: InputMaybe<Scalars['ID']['input']>;
  /** コメント・レビュー */
  reviews?: InputMaybe<Array<InputMaybe<CgAssetReviewInput>>>;
  /** 修正履歴 */
  revision_history?: InputMaybe<Scalars['String']['input']>;
  /** 権利使用条件 */
  rights_supplement?: InputMaybe<Scalars['String']['input']>;
  /** 公開エリアID */
  sharedAreaId?: InputMaybe<Scalars['ID']['input']>;
  /** フォーム送信区分 */
  submitFormInput?: InputMaybe<Scalars['Int']['input']>;
  /** 更新ユーザID */
  update_user_id: Scalars['ID']['input'];
  /** アップロード場所ID */
  uploadDirId?: InputMaybe<Scalars['ID']['input']>;
  /** 有効フラグ */
  valid_flg?: InputMaybe<Scalars['Boolean']['input']>;
  /** 閲覧制限ID */
  viewingRestrictionId?: InputMaybe<Scalars['ID']['input']>;
};

export type UpdateSessionInput = {
  sessionToken?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateUserAuthCustomInput = {
  cg_asset_store_rgst_affi_code?: InputMaybe<Scalars['String']['input']>;
  cg_asset_store_rgst_affi_desc?: InputMaybe<Scalars['String']['input']>;
  cg_asset_store_role_desc?: InputMaybe<Scalars['String']['input']>;
  /** Unique primary key. */
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateUserInput = {
  /** Unique email address. */
  email: Scalars['String']['input'];
  /** When the email was verified. */
  emailVerified?: InputMaybe<Scalars['DateTime']['input']>;
  /** Unique primary key. */
  id: Scalars['ID']['input'];
  image?: InputMaybe<Scalars['String']['input']>;
  /** Non-unique name. */
  name: Scalars['String']['input'];
  /** 主所属コード */
  regist_affili_code?: InputMaybe<Scalars['String']['input']>;
  /** 主所属名 */
  regist_affili_id?: InputMaybe<Scalars['ID']['input']>;
  /** CGアセットストア ロール */
  user_role_cgas_id?: InputMaybe<Scalars['ID']['input']>;
};

export type UseVerificationTokenInput = {
  identifier?: InputMaybe<Scalars['String']['input']>;
  token?: InputMaybe<Scalars['String']['input']>;
};

/**
 * Account of a person who utilizes this application.
 * ユーザ
 */
export type User = {
  __typename?: 'User';
  /** ユーザーアカウント（Next.js） */
  accounts?: Maybe<Array<Maybe<OktaAccount>>>;
  /** ダウンロード申請 */
  applyDownloadApplies?: Maybe<Array<Maybe<ApplyDownload>>>;
  /** ダウンロード承認 */
  applyDownloadApprovals?: Maybe<Array<Maybe<ApplyDownload>>>;
  /** ダウンロード送付 */
  applyDownloadBoxDelivers?: Maybe<Array<Maybe<ApplyDownload>>>;
  /** コメント */
  applyDownloadComments?: Maybe<Array<Maybe<ApplyDownloadComment>>>;
  /** S3Glacierファイル */
  applyDownloadGlaciers?: Maybe<Array<Maybe<ApplyDownloadGlacier>>>;
  /** ダウンロード消去 */
  applyDownloadRemovals?: Maybe<Array<Maybe<ApplyDownload>>>;
  /** アセットタグ */
  assetTags?: Maybe<Array<Maybe<CgAssetTag>>>;
  /** CGアセット登録 */
  cgAssetCreates?: Maybe<Array<Maybe<CgAsset>>>;
  /** CGアセット更新 */
  cgAssetUpdates?: Maybe<Array<Maybe<CgAsset>>>;
  /** When the account was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique email address. */
  email: Scalars['String']['output'];
  /** When the email was verified. */
  emailVerified?: Maybe<Scalars['DateTime']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** Image. */
  image?: Maybe<Scalars['String']['output']>;
  /** Non-unique name. */
  name: Scalars['String']['output'];
  /** 主所属コード */
  regist_affili_code?: Maybe<Scalars['String']['output']>;
  /** 主所属名 */
  registrantAffiliation?: Maybe<CgaRegistrantAffiliation>;
  /** コメント・レビュー */
  reviews?: Maybe<Array<Maybe<CgAssetReview>>>;
  /** 修正履歴 */
  revisionHistories?: Maybe<Array<Maybe<CgaRevisionHistory>>>;
  /** CGアセットストア ロール */
  roleCGAssetStore?: Maybe<UserRoleCgAssetStore>;
  /** ユーザーセッション（Next.js） */
  sessions?: Maybe<Array<Maybe<OktaSession>>>;
  /** お知らせ登録 */
  systemNoticeCreates?: Maybe<Array<Maybe<SystemNotice>>>;
  /** お知らせ更新 */
  systemNoticeUpdates?: Maybe<Array<Maybe<SystemNotice>>>;
  /** When the account was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 認証トークン（Next.js） */
  verificationTokens?: Maybe<Array<Maybe<OktaVerificationToken>>>;
};

/** A paginated list of User items. */
export type UserPaginator = {
  __typename?: 'UserPaginator';
  /** A list of User items. */
  data: Array<User>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/**
 * UserRoleCGAssetStore.
 * CGアセットストアロール
 */
export type UserRoleCgAssetStore = {
  __typename?: 'UserRoleCGAssetStore';
  /** When the UserRoleCGAssetStore was created. */
  created_at: Scalars['DateTime']['output'];
  /** 表記 */
  desc: Scalars['String']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** 表示順 */
  order?: Maybe<Scalars['Int']['output']>;
  /** CGアセットストア ロール */
  role: RoleCgAssetStore;
  /** When the UserRoleCGAssetStore was last updated. */
  updated_at: Scalars['DateTime']['output'];
  /** 有効フラグ */
  valid_flg: Scalars['Boolean']['output'];
};

/** A paginated list of UserRoleCGAssetStore items. */
export type UserRoleCgAssetStorePaginator = {
  __typename?: 'UserRoleCGAssetStorePaginator';
  /** A list of UserRoleCGAssetStore items. */
  data: Array<UserRoleCgAssetStore>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** Dynamic WHERE conditions for queries. */
export type WhereConditions = {
  /** A set of conditions that requires all conditions to match. */
  AND?: InputMaybe<Array<WhereConditions>>;
  /** Check whether a relation exists. Extra conditions or a minimum amount can be applied. */
  HAS?: InputMaybe<WhereConditionsRelation>;
  /** A set of conditions that requires at least one condition to match. */
  OR?: InputMaybe<Array<WhereConditions>>;
  /** The column that is used for the condition. */
  column?: InputMaybe<Scalars['String']['input']>;
  /** The operator that is used for the condition. */
  operator?: InputMaybe<SqlOperator>;
  /** The value that is used for the condition. */
  value?: InputMaybe<Scalars['Mixed']['input']>;
};

/** Dynamic HAS conditions for WHERE condition queries. */
export type WhereConditionsRelation = {
  /** The amount to test. */
  amount?: InputMaybe<Scalars['Int']['input']>;
  /** Additional condition logic. */
  condition?: InputMaybe<WhereConditions>;
  /** The comparison operator to test against the amount. */
  operator?: InputMaybe<SqlOperator>;
  /** The relation that is checked. */
  relation: Scalars['String']['input'];
};

export type CreateApplyDownloadMutationVariables = Exact<{
  input: CreateApplyDownloadArgs;
}>;


export type CreateApplyDownloadMutation = { __typename?: 'Mutation', createApplyDownload?: { __typename: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string } } | null };

export type UpdateApplyDownloadApprovalMutationVariables = Exact<{
  input: UpdateApplyDownloadApprovalArgs;
}>;


export type UpdateApplyDownloadApprovalMutation = { __typename?: 'Mutation', updateApplyDownloadApproval?: { __typename: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string } } | null };

export type UpdateApplyDownloadBoxDeliverMutationVariables = Exact<{
  input: UpdateApplyDownloadBoxDeliverArgs;
}>;


export type UpdateApplyDownloadBoxDeliverMutation = { __typename?: 'Mutation', updateApplyDownloadBoxDeliver?: { __typename: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string } } | null };

export type UpdateApplyDownloadDlNoticeMutationVariables = Exact<{
  input: UpdateApplyDownloadDlNoticeArgs;
}>;


export type UpdateApplyDownloadDlNoticeMutation = { __typename?: 'Mutation', updateApplyDownloadDLNotice?: { __typename: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string } } | null };

export type UpdateApplyDownloadDoneMutationVariables = Exact<{
  input: UpdateApplyDownloadDoneArgs;
}>;


export type UpdateApplyDownloadDoneMutation = { __typename?: 'Mutation', updateApplyDownloadDone?: { __typename: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string } } | null };

export type UpdateApplyDownloadRemovalMutationVariables = Exact<{
  input: UpdateApplyDownloadRemovalArgs;
}>;


export type UpdateApplyDownloadRemovalMutation = { __typename?: 'Mutation', updateApplyDownloadRemoval?: { __typename: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string } } | null };

export type CreateSessionMutationVariables = Exact<{
  input: CreateSessionInput;
}>;


export type CreateSessionMutation = { __typename?: 'Mutation', createSession?: { __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null } | null };

export type CreateVerificationTokenMutationVariables = Exact<{
  input: CreateVerificationTokenInput;
}>;


export type CreateVerificationTokenMutation = { __typename?: 'Mutation', createVerificationToken?: { __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null } | null } | null };

export type DeleteSessionMutationVariables = Exact<{
  sessionToken: Scalars['String']['input'];
}>;


export type DeleteSessionMutation = { __typename?: 'Mutation', deleteSession?: { __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null } | null };

export type LinkAccountMutationVariables = Exact<{
  account: LinkAccountInput;
}>;


export type LinkAccountMutation = { __typename?: 'Mutation', linkAccount?: { __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string, user: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } } | null };

export type UnlinkAccountMutationVariables = Exact<{
  input: UnlinkAccountInput;
}>;


export type UnlinkAccountMutation = { __typename?: 'Mutation', unlinkAccount?: { __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string, user: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } } | null };

export type UpdateSessionMutationVariables = Exact<{
  input: UpdateSessionInput;
}>;


export type UpdateSessionMutation = { __typename?: 'Mutation', updateSession?: { __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null } | null };

export type UpdateUserAuthCustomMutationVariables = Exact<{
  user: UpdateUserAuthCustomInput;
}>;


export type UpdateUserAuthCustomMutation = { __typename?: 'Mutation', updateUserAuthCustom?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null };

export type CreateUserMutationVariables = Exact<{
  user: CreateUserInput;
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', deleteUser?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null };

export type UpdateUserMutationVariables = Exact<{
  user: UpdateUserInput;
}>;


export type UpdateUserMutation = { __typename?: 'Mutation', updateUser?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null };

export type CreateCgAssetUploadDirMutationVariables = Exact<{
  base_path: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgAssetUploadDirMutation = { __typename?: 'Mutation', createCGAssetUploadDir?: { __typename: 'CGAssetUploadDir', id: string, base_path: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteCgAssetUploadDirMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgAssetUploadDirMutation = { __typename?: 'Mutation', deleteCGAssetUploadDir?: { __typename: 'CGAssetUploadDir', id: string, base_path: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateCgAssetUploadDirMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  base_path: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgAssetUploadDirMutation = { __typename?: 'Mutation', updateCGAssetUploadDir?: { __typename: 'CGAssetUploadDir', id: string, base_path: string, order?: number | null, valid_flg: boolean } | null };

export type CreateCgaBroadcastingRightMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgaBroadcastingRightMutation = { __typename?: 'Mutation', createCGABroadcastingRight?: { __typename: 'CGABroadcastingRight', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteCgaBroadcastingRightMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgaBroadcastingRightMutation = { __typename?: 'Mutation', deleteCGABroadcastingRight?: { __typename: 'CGABroadcastingRight', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateCgaBroadcastingRightMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgaBroadcastingRightMutation = { __typename?: 'Mutation', updateCGABroadcastingRight?: { __typename: 'CGABroadcastingRight', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type CreateCgAssetMutationVariables = Exact<{
  input: CreateCgAssetInput;
}>;


export type CreateCgAssetMutation = { __typename?: 'Mutation', createCGAsset?: { __typename: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null } | null };

export type DeleteCgAssetMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgAssetMutation = { __typename?: 'Mutation', deleteCGAsset?: { __typename: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null } | null };

export type ImportCgAssetsMutationVariables = Exact<{
  input: ImportCgAssetsInput;
}>;


export type ImportCgAssetsMutation = { __typename?: 'Mutation', importCGAssets?: { __typename: 'ImportCGAssets', total?: number | null } | null };

export type UpdateCgAssetMutationVariables = Exact<{
  input: UpdateCgAssetInput;
}>;


export type UpdateCgAssetMutation = { __typename?: 'Mutation', updateCGAsset?: { __typename: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type CreateCgAssetCateMutationVariables = Exact<{
  code: CodeCgAssetCate;
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgAssetCateMutation = { __typename?: 'Mutation', createCGAssetCate?: { __typename: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteCgAssetCateMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgAssetCateMutation = { __typename?: 'Mutation', deleteCGAssetCate?: { __typename: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateCgAssetCateMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  code: CodeCgAssetCate;
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgAssetCateMutation = { __typename?: 'Mutation', updateCGAssetCate?: { __typename: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string, order?: number | null, valid_flg: boolean } | null };

export type CreateCgAssetReviewMutationVariables = Exact<{
  asset_db_id: Scalars['ID']['input'];
  review: Scalars['String']['input'];
  reviewed_user_id: Scalars['ID']['input'];
}>;


export type CreateCgAssetReviewMutation = { __typename?: 'Mutation', createCGAssetReview?: { __typename: 'CGAssetReview', id: string, review: string, created_at: any, cgAsset?: { __typename?: 'CGAsset', id: string, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, review: string, valid_flg: boolean, created_at: any, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null } | null, reviewedUser?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type DeleteCgAssetReviewMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgAssetReviewMutation = { __typename?: 'Mutation', deleteCGAssetReview?: { __typename: 'CGAssetReview', id: string, review: string, created_at: any, cgAsset?: { __typename?: 'CGAsset', id: string, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, review: string, valid_flg: boolean, created_at: any, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null } | null, reviewedUser?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type UpdateCgAssetReviewMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  review: Scalars['String']['input'];
}>;


export type UpdateCgAssetReviewMutation = { __typename?: 'Mutation', updateCGAssetReview?: { __typename: 'CGAssetReview', id: string, review: string, created_at: any, cgAsset?: { __typename?: 'CGAsset', id: string, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, review: string, valid_flg: boolean, created_at: any, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null } | null, reviewedUser?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type CreateCgAssetSearchAppProdMutationVariables = Exact<{
  code: Scalars['String']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgAssetSearchAppProdMutation = { __typename?: 'Mutation', createCGAssetSearchAppProd?: { __typename: 'CGAssetSearchAppProd', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteCgAssetSearchAppProdMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgAssetSearchAppProdMutation = { __typename?: 'Mutation', deleteCGAssetSearchAppProd?: { __typename: 'CGAssetSearchAppProd', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateCgAssetSearchAppProdMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  code: Scalars['String']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgAssetSearchAppProdMutation = { __typename?: 'Mutation', updateCGAssetSearchAppProd?: { __typename: 'CGAssetSearchAppProd', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type CreateCgAssetSearchGenreMutationVariables = Exact<{
  code: Scalars['String']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgAssetSearchGenreMutation = { __typename?: 'Mutation', createCGAssetSearchGenre?: { __typename: 'CGAssetSearchGenre', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteCgAssetSearchGenreMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgAssetSearchGenreMutation = { __typename?: 'Mutation', deleteCGAssetSearchGenre?: { __typename: 'CGAssetSearchGenre', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateCgAssetSearchGenreMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  code: Scalars['String']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgAssetSearchGenreMutation = { __typename?: 'Mutation', updateCGAssetSearchGenre?: { __typename: 'CGAssetSearchGenre', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type CreateCgAssetTagMutationVariables = Exact<{
  asset_db_id: Scalars['ID']['input'];
  tag: Scalars['String']['input'];
  tagged_user_id: Scalars['ID']['input'];
  tag_add_edit_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgAssetTagMutation = { __typename?: 'Mutation', createCGAssetTag?: { __typename: 'CGAssetTag', id: string, tag: string, created_at: any, cgAsset?: { __typename?: 'CGAsset', id: string, assetTags?: Array<{ __typename?: 'CGAssetTag', id: string, tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null } | null, taggedUser?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type CreateCgaRegistrantAffiliationMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgaRegistrantAffiliationMutation = { __typename?: 'Mutation', createCGARegistrantAffiliation?: { __typename: 'CGARegistrantAffiliation', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteCgaRegistrantAffiliationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgaRegistrantAffiliationMutation = { __typename?: 'Mutation', deleteCGARegistrantAffiliation?: { __typename: 'CGARegistrantAffiliation', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateCgaRegistrantAffiliationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgaRegistrantAffiliationMutation = { __typename?: 'Mutation', updateCGARegistrantAffiliation?: { __typename: 'CGARegistrantAffiliation', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type CreateCgaSharedAreaMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgaSharedAreaMutation = { __typename?: 'Mutation', createCGASharedArea?: { __typename: 'CGASharedArea', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteCgaSharedAreaMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgaSharedAreaMutation = { __typename?: 'Mutation', deleteCGASharedArea?: { __typename: 'CGASharedArea', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateCgaSharedAreaMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgaSharedAreaMutation = { __typename?: 'Mutation', updateCGASharedArea?: { __typename: 'CGASharedArea', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type CreateCgaViewingRestrictionMutationVariables = Exact<{
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateCgaViewingRestrictionMutation = { __typename?: 'Mutation', createCGAViewingRestriction?: { __typename: 'CGAViewingRestriction', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteCgaViewingRestrictionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCgaViewingRestrictionMutation = { __typename?: 'Mutation', deleteCGAViewingRestriction?: { __typename: 'CGAViewingRestriction', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateCgaViewingRestrictionMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateCgaViewingRestrictionMutation = { __typename?: 'Mutation', updateCGAViewingRestriction?: { __typename: 'CGAViewingRestriction', id: string, desc: string, order?: number | null, valid_flg: boolean } | null };

export type CreateSystemMailTemplateMutationVariables = Exact<{
  code: CodeMailTemplate;
  subject_tpl: Scalars['String']['input'];
  body_tpl: Scalars['String']['input'];
  from_mail?: InputMaybe<Scalars['String']['input']>;
  bcc_mail?: InputMaybe<Scalars['String']['input']>;
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateSystemMailTemplateMutation = { __typename?: 'Mutation', createSystemMailTemplate?: { __typename: 'SystemMailTemplate', id: string, code: CodeMailTemplate, subject_tpl: string, body_tpl: string, from_mail?: string | null, bcc_mail?: string | null, valid_flg: boolean, created_at: any, updated_at: any } | null };

export type DeleteSystemMailTemplateMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteSystemMailTemplateMutation = { __typename?: 'Mutation', deleteSystemMailTemplate?: { __typename: 'SystemMailTemplate', id: string, code: CodeMailTemplate, subject_tpl: string, body_tpl: string, from_mail?: string | null, bcc_mail?: string | null, valid_flg: boolean, created_at: any, updated_at: any } | null };

export type UpdateSystemMailTemplateMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  code: CodeMailTemplate;
  subject_tpl: Scalars['String']['input'];
  body_tpl: Scalars['String']['input'];
  from_mail?: InputMaybe<Scalars['String']['input']>;
  bcc_mail?: InputMaybe<Scalars['String']['input']>;
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateSystemMailTemplateMutation = { __typename?: 'Mutation', updateSystemMailTemplate?: { __typename: 'SystemMailTemplate', id: string, code: CodeMailTemplate, subject_tpl: string, body_tpl: string, from_mail?: string | null, bcc_mail?: string | null, valid_flg: boolean, created_at: any, updated_at: any } | null };

export type CreateSystemNoticeMutationVariables = Exact<{
  create_user_id: Scalars['ID']['input'];
  message: Scalars['String']['input'];
  notice_date: Scalars['DateTime']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateSystemNoticeMutation = { __typename?: 'Mutation', createSystemNotice?: { __typename: 'SystemNotice', id: string, message: string, notice_date: any, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type DeleteSystemNoticeMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteSystemNoticeMutation = { __typename?: 'Mutation', deleteSystemNotice?: { __typename: 'SystemNotice', id: string, message: string, notice_date: any, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type UpdateSystemNoticeMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  update_user_id: Scalars['ID']['input'];
  message: Scalars['String']['input'];
  notice_date: Scalars['DateTime']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateSystemNoticeMutation = { __typename?: 'Mutation', updateSystemNotice?: { __typename: 'SystemNotice', id: string, message: string, notice_date: any, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type CreateUserRoleCgAssetStoreMutationVariables = Exact<{
  role: RoleCgAssetStore;
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type CreateUserRoleCgAssetStoreMutation = { __typename?: 'Mutation', createUserRoleCGAssetStore?: { __typename: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, order?: number | null, valid_flg: boolean } | null };

export type DeleteUserRoleCgAssetStoreMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteUserRoleCgAssetStoreMutation = { __typename?: 'Mutation', deleteUserRoleCGAssetStore?: { __typename: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, order?: number | null, valid_flg: boolean } | null };

export type UpdateUserRoleCgAssetStoreMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  role: RoleCgAssetStore;
  desc: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  valid_flg: Scalars['Boolean']['input'];
}>;


export type UpdateUserRoleCgAssetStoreMutation = { __typename?: 'Mutation', updateUserRoleCGAssetStore?: { __typename: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, order?: number | null, valid_flg: boolean } | null };

export type GetApplyDownloadQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetApplyDownloadQuery = { __typename?: 'Query', ApplyDownloadWithPresignedUrl?: { __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, program_id?: string | null, program_name?: string | null, date_usage_start?: any | null, date_usage_end?: any | null, purpose_of_use_txt?: string | null, etc_txt?: string | null, removal_limit_date?: any | null, download_date?: any | null, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', desc: string } | null } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null } | null };

export type GetApplyDownloadsApplyOrApprovalQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetApplyDownloadsApplyOrApprovalQuery = { __typename?: 'Query', ApplyDownloadsApplyOrApproval: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetApplyDownloadsApplyOrApprovalOrBoxDeliverQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery = { __typename?: 'Query', ApplyDownloadsApplyOrApprovalOrBoxDeliver: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetApplyDownloadsOnlyApplyQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetApplyDownloadsOnlyApplyQuery = { __typename?: 'Query', ApplyDownloadsOnlyApply: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetApplyDownloadsWithDoneQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  section_adl?: InputMaybe<Scalars['String']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetApplyDownloadsWithDoneQuery = { __typename?: 'Query', ApplyDownloadsWithDone: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetSessionAndUserQueryVariables = Exact<{
  sessionToken: Scalars['String']['input'];
}>;


export type GetSessionAndUserQuery = { __typename?: 'Query', getSessionAndUser?: { __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null } | null };

export type GetUserByAccountQueryVariables = Exact<{
  input: GetUserByAccountInput;
}>;


export type GetUserByAccountQuery = { __typename?: 'Query', getUserByAccount?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null };

export type GetUserByEmailQueryVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type GetUserByEmailQuery = { __typename?: 'Query', getUserByEmail?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null };

export type UseVerificationTokenQueryVariables = Exact<{
  input: UseVerificationTokenInput;
}>;


export type UseVerificationTokenQuery = { __typename?: 'Query', useVerificationToken?: { __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null } | null } | null };

export type GetUserQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetUserQuery = { __typename?: 'Query', getUser?: { __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null } | null };

export type GetUsersQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetUsersQuery = { __typename?: 'Query', Users: { __typename?: 'UserPaginator', data: Array<{ __typename?: 'User', id: string, name: string, email: string, emailVerified?: any | null, regist_affili_code?: string | null, created_at: any, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null, accounts?: Array<{ __typename?: 'OktaAccount', access_token?: string | null, expires_at?: number | null, id_token?: string | null, oauth_token?: string | null, oauth_token_secret?: string | null, provider: string, providerAccountId: string, refresh_token?: string | null, refresh_token_expires_in?: number | null, scope?: string | null, session_state?: string | null, token_type?: string | null, type: string } | null> | null, sessions?: Array<{ __typename?: 'OktaSession', expires?: any | null, sessionToken?: string | null } | null> | null, verificationTokens?: Array<{ __typename?: 'OktaVerificationToken', identifier?: string | null, expires?: any | null, token?: string | null } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type UsersManagerValidQueryVariables = Exact<{ [key: string]: never; }>;


export type UsersManagerValidQuery = { __typename?: 'Query', UsersManagerValid: Array<{ __typename?: 'User', id: string, name: string, email: string }> };

export type GetCgAssetUploadDirQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgAssetUploadDirQuery = { __typename?: 'Query', CGAssetUploadDir?: { __typename?: 'CGAssetUploadDir', id: string, base_path: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetCgAssetUploadDirsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgAssetUploadDirsQuery = { __typename?: 'Query', CGAssetUploadDirs: { __typename?: 'CGAssetUploadDirPaginator', data: Array<{ __typename?: 'CGAssetUploadDir', id: string, base_path: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetUploadDirsValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgAssetUploadDirsValidQuery = { __typename?: 'Query', CGAssetUploadDirsValid: Array<{ __typename?: 'CGAssetUploadDir', base_path: string, id: string }> };

export type GetCgaBroadcastingRightQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgaBroadcastingRightQuery = { __typename?: 'Query', CGABroadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetCgaBroadcastingRightsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgaBroadcastingRightsQuery = { __typename?: 'Query', CGABroadcastingRights: { __typename?: 'CGABroadcastingRightPaginator', data: Array<{ __typename?: 'CGABroadcastingRight', id: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgaBroadcastingRightsValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgaBroadcastingRightsValidQuery = { __typename?: 'Query', CGABroadcastingRightsValid: Array<{ __typename?: 'CGABroadcastingRight', desc: string, id: string }> };

export type GetCgaViewingRestrictionQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgaViewingRestrictionQuery = { __typename?: 'Query', CGAViewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetCgaViewingRestrictionsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgaViewingRestrictionsQuery = { __typename?: 'Query', CGAViewingRestrictions: { __typename?: 'CGAViewingRestrictionPaginator', data: Array<{ __typename?: 'CGAViewingRestriction', id: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgaViewingRestrictionsValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgaViewingRestrictionsValidQuery = { __typename?: 'Query', CGAViewingRestrictionsValid: Array<{ __typename?: 'CGAViewingRestriction', desc: string, id: string }> };

export type ExportCgAssetsQueryVariables = Exact<{ [key: string]: never; }>;


export type ExportCgAssetsQuery = { __typename?: 'Query', exportCGAssets?: { __typename?: 'ExportCGAssets', file_url?: string | null } | null };

export type GetCgAssetQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgAssetQuery = { __typename?: 'Query', CGAsset?: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', id: string, tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', id: string, created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null, applyDownloads?: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null } | null> | null, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type GetCgAssetsAllQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  search?: InputMaybe<CgAssetSearchFormValues>;
}>;


export type GetCgAssetsAllQuery = { __typename?: 'Query', CGAssetsAll: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', id: string, tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', id: string, created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetsCreatedAllQueryVariables = Exact<{
  create_user_id: Scalars['ID']['input'];
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  section?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  orderAsc?: InputMaybe<Scalars['String']['input']>;
  searchTxt?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetCgAssetsCreatedAllQuery = { __typename?: 'Query', CGAssetsCreatedAll: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', name: string } }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetsValidQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  search?: InputMaybe<CgAssetSearchFormValues>;
}>;


export type GetCgAssetsValidQuery = { __typename?: 'Query', CGAssetsValid: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', id: string, tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', id: string, created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetCateQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgAssetCateQuery = { __typename?: 'Query', CGAssetCate?: { __typename?: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetCgAssetCatesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgAssetCatesQuery = { __typename?: 'Query', CGAssetCates: { __typename?: 'CGAssetCatePaginator', data: Array<{ __typename?: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetCatesValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgAssetCatesValidQuery = { __typename?: 'Query', CGAssetCatesValid: Array<{ __typename?: 'CGAssetCate', code: CodeCgAssetCate, desc: string, id: string }> };

export type GetCgAssetReviewQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgAssetReviewQuery = { __typename?: 'Query', CGAssetReview?: { __typename: 'CGAssetReview', id: string, review: string, created_at: any, cgAsset?: { __typename?: 'CGAsset', id: string, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, review: string, valid_flg: boolean, created_at: any, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null } | null, reviewedUser?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type GetCgAssetSearchAppProdQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgAssetSearchAppProdQuery = { __typename?: 'Query', CGAssetSearchAppProd?: { __typename?: 'CGAssetSearchAppProd', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetCgAssetSearchAppProdsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgAssetSearchAppProdsQuery = { __typename?: 'Query', CGAssetSearchAppProds: { __typename?: 'CGAssetSearchAppProdPaginator', data: Array<{ __typename?: 'CGAssetSearchAppProd', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetSearchAppProdsValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgAssetSearchAppProdsValidQuery = { __typename?: 'Query', CGAssetSearchAppProdsValid: Array<{ __typename?: 'CGAssetSearchAppProd', code: string, desc: string, id: string }> };

export type GetCgAssetSearchGenreQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgAssetSearchGenreQuery = { __typename?: 'Query', CGAssetSearchGenre?: { __typename?: 'CGAssetSearchGenre', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetCgAssetSearchGenresQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgAssetSearchGenresQuery = { __typename?: 'Query', CGAssetSearchGenres: { __typename?: 'CGAssetSearchGenrePaginator', data: Array<{ __typename?: 'CGAssetSearchGenre', id: string, code: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgAssetSearchGenresValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgAssetSearchGenresValidQuery = { __typename?: 'Query', CGAssetSearchGenresValid: Array<{ __typename?: 'CGAssetSearchGenre', code: string, desc: string, id: string }> };

export type GetCgaRegistrantAffiliationQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgaRegistrantAffiliationQuery = { __typename?: 'Query', CGARegistrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetCgaRegistrantAffiliationsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgaRegistrantAffiliationsQuery = { __typename?: 'Query', CGARegistrantAffiliations: { __typename?: 'CGARegistrantAffiliationPaginator', data: Array<{ __typename?: 'CGARegistrantAffiliation', id: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgaRegistrantAffilliationsValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgaRegistrantAffilliationsValidQuery = { __typename?: 'Query', CGARegistrantAffiliationsValid: Array<{ __typename?: 'CGARegistrantAffiliation', desc: string, id: string }> };

export type GetCgaSharedAreaQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCgaSharedAreaQuery = { __typename?: 'Query', CGASharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetCgaSharedAreasQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetCgaSharedAreasQuery = { __typename?: 'Query', CGASharedAreas: { __typename?: 'CGASharedAreaPaginator', data: Array<{ __typename?: 'CGASharedArea', id: string, desc: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetCgaSharedAreasValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCgaSharedAreasValidQuery = { __typename?: 'Query', CGASharedAreasValid: Array<{ __typename?: 'CGASharedArea', desc: string, id: string }> };

export type ApiGetCgAssetsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  search?: InputMaybe<ApiCgAssetsSearchFormValues>;
}>;


export type ApiGetCgAssetsQuery = { __typename?: 'Query', ApiCGAssetsValid: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', code: CodeCgAssetCate, desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null, userCreate: { __typename?: 'User', name: string }, userUpdate?: { __typename?: 'User', name: string } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type CgAssetDetailClientQueryVariables = Exact<{
  id: Scalars['ID']['input'];
  apply_user_id: Scalars['ID']['input'];
}>;


export type CgAssetDetailClientQuery = { __typename?: 'Query', CGAsset?: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', id: string, tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', id: string, created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null, CGAViewingRestrictionsValid: Array<{ __typename?: 'CGAViewingRestriction', desc: string, id: string }>, ApplyDownloadsBoxDeliverGlacierAll?: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null } | null> | null };

export type CgAssetEditClientQueryVariables = Exact<{ [key: string]: never; }>;


export type CgAssetEditClientQuery = { __typename?: 'Query', CGAssetCatesValid: Array<{ __typename?: 'CGAssetCate', code: CodeCgAssetCate, desc: string, id: string }>, CGARegistrantAffiliationsValid: Array<{ __typename?: 'CGARegistrantAffiliation', desc: string, id: string }>, CGAViewingRestrictionsValid: Array<{ __typename?: 'CGAViewingRestriction', desc: string, id: string }>, CGABroadcastingRightsValid: Array<{ __typename?: 'CGABroadcastingRight', desc: string, id: string }>, CGASharedAreasValid: Array<{ __typename?: 'CGASharedArea', desc: string, id: string }>, CGAssetUploadDirsValid: Array<{ __typename?: 'CGAssetUploadDir', base_path: string, id: string }> };

export type CgAssetSearchClientQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  valid: Scalars['Boolean']['input'];
}>;


export type CgAssetSearchClientQuery = { __typename?: 'Query', CGAssetCatesValid: Array<{ __typename?: 'CGAssetCate', code: CodeCgAssetCate, desc: string, id: string }>, CGAssetSearchGenresValid: Array<{ __typename?: 'CGAssetSearchGenre', code: string, desc: string, id: string }>, CGAssetSearchAppProdsValid: Array<{ __typename?: 'CGAssetSearchAppProd', code: string, desc: string, id: string }>, CGAssetsInit: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, asset_genre?: string | null, asset_app_prod?: string | null, asset_format?: string | null, asset_size?: string | null, asset_renderer?: string | null, program_id?: string | null, program_name?: string | null, rights_supplement?: string | null, asset_detail: string, download_count?: number | null, valid_flg: boolean, created_at: any, updated_at: any, assetCate?: { __typename?: 'CGAssetCate', id: string, code: CodeCgAssetCate, desc: string } | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, viewingRestriction?: { __typename?: 'CGAViewingRestriction', id: string, desc: string } | null, broadcastingRight?: { __typename?: 'CGABroadcastingRight', id: string, desc: string } | null, sharedArea?: { __typename?: 'CGASharedArea', id: string, desc: string } | null, assetUploads?: Array<{ __typename?: 'CGAssetUpload', file_name: string, url?: string | null, file_path: string } | null> | null, assetThumbs?: Array<{ __typename?: 'CGAssetThumb', thumb_file_name: string, thumb_url?: string | null, thumb_file_path: string } | null> | null, assetTags?: Array<{ __typename?: 'CGAssetTag', id: string, tag: string, tag_add_edit_flg: boolean, created_at: any, taggedUser?: { __typename?: 'User', name: string } | null } | null> | null, revisionHistories?: Array<{ __typename?: 'CGARevisionHistory', id: string, created_at: any, desc: string, revisedUser?: { __typename?: 'User', name: string } | null } | null> | null, reviews?: Array<{ __typename?: 'CGAssetReview', id: string, created_at: any, review: string, valid_flg: boolean, reviewedUser?: { __typename?: 'User', id: string, name: string } | null } | null> | null, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type HomeDashboardServerAdminQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  create_user_id: Scalars['ID']['input'];
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  section?: InputMaybe<Scalars['String']['input']>;
}>;


export type HomeDashboardServerAdminQuery = { __typename?: 'Query', ApplyDownloadsWithDone: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, ApplyDownloadsOnlyApply: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, ApplyDownloadsApplyOrApprovalOrBoxDeliver: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, CGAssetsCreatedAll: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', name: string } }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, SystemNoticesValid: Array<{ __typename?: 'SystemNotice', message: string, notice_date: any, created_at: any, id: string, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }> };

export type HomeDashboardServerEditorQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  create_user_id: Scalars['ID']['input'];
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  section?: InputMaybe<Scalars['String']['input']>;
}>;


export type HomeDashboardServerEditorQuery = { __typename?: 'Query', ApplyDownloadsWithDone: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, ApplyDownloadsOnlyApply: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, ApplyDownloadsApplyOrApproval: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, CGAssetsCreatedAll: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', name: string } }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, SystemNoticesValid: Array<{ __typename?: 'SystemNotice', message: string, notice_date: any, created_at: any, id: string, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }> };

export type HomeDashboardServerManagerQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  create_user_id: Scalars['ID']['input'];
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  section?: InputMaybe<Scalars['String']['input']>;
}>;


export type HomeDashboardServerManagerQuery = { __typename?: 'Query', ApplyDownloadsWithDone: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, ApplyDownloadsOnlyApply: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, ApplyDownloadsApplyOrApproval: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, CGAssetsCreatedAll: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', name: string } }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, SystemNoticesValid: Array<{ __typename?: 'SystemNotice', message: string, notice_date: any, created_at: any, id: string, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }> };

export type HomeDashboardServerOtherQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  create_user_id: Scalars['ID']['input'];
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  section?: InputMaybe<Scalars['String']['input']>;
}>;


export type HomeDashboardServerOtherQuery = { __typename?: 'Query', ApplyDownloadsWithDone: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, ApplyDownloadsOnlyApply: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, CGAssetsCreatedAll: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', name: string } }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, SystemNoticesValid: Array<{ __typename?: 'SystemNotice', message: string, notice_date: any, created_at: any, id: string, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }> };

export type HomeDashboardServerUserQueryVariables = Exact<{
  apply_user_id?: InputMaybe<Scalars['ID']['input']>;
  manage_user_id?: InputMaybe<Scalars['ID']['input']>;
  create_user_id: Scalars['ID']['input'];
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
  section?: InputMaybe<Scalars['String']['input']>;
}>;


export type HomeDashboardServerUserQuery = { __typename?: 'Query', ApplyDownloadsWithDone: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, ApplyDownloadsOnlyApply: { __typename?: 'ApplyDownloadPaginator', data: Array<{ __typename?: 'ApplyDownload', id: string, status: StatusApplyDownload, created_at: any, cgAsset: { __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string }, manageUser: { __typename?: 'User', id: string, name: string }, applyUser?: { __typename?: 'User', id: string, name: string } | null, applyDownloadGlaciers?: Array<{ __typename?: 'ApplyDownloadGlacier', id: string, ongoing_request: boolean, expiry_date?: any | null, presigned_url?: string | null, file_name: string } | null> | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, CGAssetsCreatedAll: { __typename?: 'CGAssetPaginator', data: Array<{ __typename?: 'CGAsset', id: string, asset_id: string, asset_name: string, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', name: string } }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } }, SystemNoticesValid: Array<{ __typename?: 'SystemNotice', message: string, notice_date: any, created_at: any, id: string, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }> };

export type GetSystemMailTemplateQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetSystemMailTemplateQuery = { __typename?: 'Query', SystemMailTemplate?: { __typename?: 'SystemMailTemplate', id: string, code: CodeMailTemplate, subject_tpl: string, body_tpl: string, from_mail?: string | null, bcc_mail?: string | null, valid_flg: boolean, created_at: any, updated_at: any } | null };

export type GetSystemMailTemplatesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetSystemMailTemplatesQuery = { __typename?: 'Query', SystemMailTemplates: { __typename?: 'SystemMailTemplatePaginator', data: Array<{ __typename?: 'SystemMailTemplate', id: string, code: CodeMailTemplate, subject_tpl: string, body_tpl: string, from_mail?: string | null, bcc_mail?: string | null, valid_flg: boolean, created_at: any, updated_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetSystemMailTemplatesValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSystemMailTemplatesValidQuery = { __typename?: 'Query', SystemMailTemplatesValid: Array<{ __typename?: 'SystemMailTemplate', code: CodeMailTemplate, subject_tpl: string, body_tpl: string, from_mail?: string | null, bcc_mail?: string | null, created_at: any, id: string }> };

export type GetSystemNoticeQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetSystemNoticeQuery = { __typename?: 'Query', SystemNotice?: { __typename?: 'SystemNotice', id: string, message: string, notice_date: any, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null } | null };

export type GetSystemNoticesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetSystemNoticesQuery = { __typename?: 'Query', SystemNotices: { __typename?: 'SystemNoticePaginator', data: Array<{ __typename?: 'SystemNotice', id: string, message: string, notice_date: any, valid_flg: boolean, created_at: any, updated_at: any, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetSystemNoticesValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSystemNoticesValidQuery = { __typename?: 'Query', SystemNoticesValid: Array<{ __typename?: 'SystemNotice', message: string, notice_date: any, created_at: any, id: string, userCreate: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null }, userUpdate?: { __typename?: 'User', id: string, name: string, email: string, regist_affili_code?: string | null, registrantAffiliation?: { __typename?: 'CGARegistrantAffiliation', id: string, desc: string } | null, roleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, desc: string, role: RoleCgAssetStore, valid_flg: boolean } | null } | null }> };

export type GetUserRoleCgAssetStoreQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetUserRoleCgAssetStoreQuery = { __typename?: 'Query', UserRoleCGAssetStore?: { __typename?: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, order?: number | null, valid_flg: boolean, created_at: any } | null };

export type GetUserRoleCgAssetStoresQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  page: Scalars['Int']['input'];
}>;


export type GetUserRoleCgAssetStoresQuery = { __typename?: 'Query', UserRoleCGAssetStores: { __typename?: 'UserRoleCGAssetStorePaginator', data: Array<{ __typename?: 'UserRoleCGAssetStore', id: string, role: RoleCgAssetStore, desc: string, order?: number | null, valid_flg: boolean, created_at: any }>, paginatorInfo: { __typename?: 'PaginatorInfo', count: number, currentPage: number, hasMorePages: boolean, total: number } } };

export type GetUserRoleCgAssetStoresValidQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUserRoleCgAssetStoresValidQuery = { __typename?: 'Query', UserRoleCGAssetStoresValid: Array<{ __typename?: 'UserRoleCGAssetStore', desc: string, id: string }> };


export const CreateApplyDownloadDocument = gql`
    mutation CreateApplyDownload($input: CreateApplyDownloadArgs!) {
  createApplyDownload(input: $input) {
    __typename
    id
    cgAsset {
      id
      asset_id
      asset_name
    }
    status
    created_at
  }
}
    `;
export type CreateApplyDownloadMutationFn = Apollo.MutationFunction<CreateApplyDownloadMutation, CreateApplyDownloadMutationVariables>;

/**
 * __useCreateApplyDownloadMutation__
 *
 * To run a mutation, you first call `useCreateApplyDownloadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateApplyDownloadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createApplyDownloadMutation, { data, loading, error }] = useCreateApplyDownloadMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateApplyDownloadMutation(baseOptions?: Apollo.MutationHookOptions<CreateApplyDownloadMutation, CreateApplyDownloadMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateApplyDownloadMutation, CreateApplyDownloadMutationVariables>(CreateApplyDownloadDocument, options);
      }
export type CreateApplyDownloadMutationHookResult = ReturnType<typeof useCreateApplyDownloadMutation>;
export type CreateApplyDownloadMutationResult = Apollo.MutationResult<CreateApplyDownloadMutation>;
export type CreateApplyDownloadMutationOptions = Apollo.BaseMutationOptions<CreateApplyDownloadMutation, CreateApplyDownloadMutationVariables>;
export const UpdateApplyDownloadApprovalDocument = gql`
    mutation UpdateApplyDownloadApproval($input: UpdateApplyDownloadApprovalArgs!) {
  updateApplyDownloadApproval(input: $input) {
    __typename
    id
    cgAsset {
      id
      asset_id
      asset_name
    }
    status
    created_at
  }
}
    `;
export type UpdateApplyDownloadApprovalMutationFn = Apollo.MutationFunction<UpdateApplyDownloadApprovalMutation, UpdateApplyDownloadApprovalMutationVariables>;

/**
 * __useUpdateApplyDownloadApprovalMutation__
 *
 * To run a mutation, you first call `useUpdateApplyDownloadApprovalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateApplyDownloadApprovalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateApplyDownloadApprovalMutation, { data, loading, error }] = useUpdateApplyDownloadApprovalMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateApplyDownloadApprovalMutation(baseOptions?: Apollo.MutationHookOptions<UpdateApplyDownloadApprovalMutation, UpdateApplyDownloadApprovalMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateApplyDownloadApprovalMutation, UpdateApplyDownloadApprovalMutationVariables>(UpdateApplyDownloadApprovalDocument, options);
      }
export type UpdateApplyDownloadApprovalMutationHookResult = ReturnType<typeof useUpdateApplyDownloadApprovalMutation>;
export type UpdateApplyDownloadApprovalMutationResult = Apollo.MutationResult<UpdateApplyDownloadApprovalMutation>;
export type UpdateApplyDownloadApprovalMutationOptions = Apollo.BaseMutationOptions<UpdateApplyDownloadApprovalMutation, UpdateApplyDownloadApprovalMutationVariables>;
export const UpdateApplyDownloadBoxDeliverDocument = gql`
    mutation UpdateApplyDownloadBoxDeliver($input: UpdateApplyDownloadBoxDeliverArgs!) {
  updateApplyDownloadBoxDeliver(input: $input) {
    __typename
    id
    cgAsset {
      id
      asset_id
      asset_name
    }
    status
    created_at
  }
}
    `;
export type UpdateApplyDownloadBoxDeliverMutationFn = Apollo.MutationFunction<UpdateApplyDownloadBoxDeliverMutation, UpdateApplyDownloadBoxDeliverMutationVariables>;

/**
 * __useUpdateApplyDownloadBoxDeliverMutation__
 *
 * To run a mutation, you first call `useUpdateApplyDownloadBoxDeliverMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateApplyDownloadBoxDeliverMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateApplyDownloadBoxDeliverMutation, { data, loading, error }] = useUpdateApplyDownloadBoxDeliverMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateApplyDownloadBoxDeliverMutation(baseOptions?: Apollo.MutationHookOptions<UpdateApplyDownloadBoxDeliverMutation, UpdateApplyDownloadBoxDeliverMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateApplyDownloadBoxDeliverMutation, UpdateApplyDownloadBoxDeliverMutationVariables>(UpdateApplyDownloadBoxDeliverDocument, options);
      }
export type UpdateApplyDownloadBoxDeliverMutationHookResult = ReturnType<typeof useUpdateApplyDownloadBoxDeliverMutation>;
export type UpdateApplyDownloadBoxDeliverMutationResult = Apollo.MutationResult<UpdateApplyDownloadBoxDeliverMutation>;
export type UpdateApplyDownloadBoxDeliverMutationOptions = Apollo.BaseMutationOptions<UpdateApplyDownloadBoxDeliverMutation, UpdateApplyDownloadBoxDeliverMutationVariables>;
export const UpdateApplyDownloadDlNoticeDocument = gql`
    mutation UpdateApplyDownloadDLNotice($input: UpdateApplyDownloadDLNoticeArgs!) {
  updateApplyDownloadDLNotice(input: $input) {
    __typename
    id
    cgAsset {
      id
      asset_id
      asset_name
    }
    status
    created_at
  }
}
    `;
export type UpdateApplyDownloadDlNoticeMutationFn = Apollo.MutationFunction<UpdateApplyDownloadDlNoticeMutation, UpdateApplyDownloadDlNoticeMutationVariables>;

/**
 * __useUpdateApplyDownloadDlNoticeMutation__
 *
 * To run a mutation, you first call `useUpdateApplyDownloadDlNoticeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateApplyDownloadDlNoticeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateApplyDownloadDlNoticeMutation, { data, loading, error }] = useUpdateApplyDownloadDlNoticeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateApplyDownloadDlNoticeMutation(baseOptions?: Apollo.MutationHookOptions<UpdateApplyDownloadDlNoticeMutation, UpdateApplyDownloadDlNoticeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateApplyDownloadDlNoticeMutation, UpdateApplyDownloadDlNoticeMutationVariables>(UpdateApplyDownloadDlNoticeDocument, options);
      }
export type UpdateApplyDownloadDlNoticeMutationHookResult = ReturnType<typeof useUpdateApplyDownloadDlNoticeMutation>;
export type UpdateApplyDownloadDlNoticeMutationResult = Apollo.MutationResult<UpdateApplyDownloadDlNoticeMutation>;
export type UpdateApplyDownloadDlNoticeMutationOptions = Apollo.BaseMutationOptions<UpdateApplyDownloadDlNoticeMutation, UpdateApplyDownloadDlNoticeMutationVariables>;
export const UpdateApplyDownloadDoneDocument = gql`
    mutation UpdateApplyDownloadDone($input: UpdateApplyDownloadDoneArgs!) {
  updateApplyDownloadDone(input: $input) {
    __typename
    id
    cgAsset {
      id
      asset_id
      asset_name
    }
    status
    created_at
  }
}
    `;
export type UpdateApplyDownloadDoneMutationFn = Apollo.MutationFunction<UpdateApplyDownloadDoneMutation, UpdateApplyDownloadDoneMutationVariables>;

/**
 * __useUpdateApplyDownloadDoneMutation__
 *
 * To run a mutation, you first call `useUpdateApplyDownloadDoneMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateApplyDownloadDoneMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateApplyDownloadDoneMutation, { data, loading, error }] = useUpdateApplyDownloadDoneMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateApplyDownloadDoneMutation(baseOptions?: Apollo.MutationHookOptions<UpdateApplyDownloadDoneMutation, UpdateApplyDownloadDoneMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateApplyDownloadDoneMutation, UpdateApplyDownloadDoneMutationVariables>(UpdateApplyDownloadDoneDocument, options);
      }
export type UpdateApplyDownloadDoneMutationHookResult = ReturnType<typeof useUpdateApplyDownloadDoneMutation>;
export type UpdateApplyDownloadDoneMutationResult = Apollo.MutationResult<UpdateApplyDownloadDoneMutation>;
export type UpdateApplyDownloadDoneMutationOptions = Apollo.BaseMutationOptions<UpdateApplyDownloadDoneMutation, UpdateApplyDownloadDoneMutationVariables>;
export const UpdateApplyDownloadRemovalDocument = gql`
    mutation UpdateApplyDownloadRemoval($input: UpdateApplyDownloadRemovalArgs!) {
  updateApplyDownloadRemoval(input: $input) {
    __typename
    id
    cgAsset {
      id
      asset_id
      asset_name
    }
    status
    created_at
  }
}
    `;
export type UpdateApplyDownloadRemovalMutationFn = Apollo.MutationFunction<UpdateApplyDownloadRemovalMutation, UpdateApplyDownloadRemovalMutationVariables>;

/**
 * __useUpdateApplyDownloadRemovalMutation__
 *
 * To run a mutation, you first call `useUpdateApplyDownloadRemovalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateApplyDownloadRemovalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateApplyDownloadRemovalMutation, { data, loading, error }] = useUpdateApplyDownloadRemovalMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateApplyDownloadRemovalMutation(baseOptions?: Apollo.MutationHookOptions<UpdateApplyDownloadRemovalMutation, UpdateApplyDownloadRemovalMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateApplyDownloadRemovalMutation, UpdateApplyDownloadRemovalMutationVariables>(UpdateApplyDownloadRemovalDocument, options);
      }
export type UpdateApplyDownloadRemovalMutationHookResult = ReturnType<typeof useUpdateApplyDownloadRemovalMutation>;
export type UpdateApplyDownloadRemovalMutationResult = Apollo.MutationResult<UpdateApplyDownloadRemovalMutation>;
export type UpdateApplyDownloadRemovalMutationOptions = Apollo.BaseMutationOptions<UpdateApplyDownloadRemovalMutation, UpdateApplyDownloadRemovalMutationVariables>;
export const CreateSessionDocument = gql`
    mutation CreateSession($input: CreateSessionInput!) {
  createSession(input: $input) {
    expires
    sessionToken
    user {
      id
      name
      email
      emailVerified
      roleCGAssetStore {
        desc
        role
        valid_flg
      }
      accounts {
        access_token
        expires_at
        id_token
        oauth_token
        oauth_token_secret
        provider
        providerAccountId
        refresh_token
        refresh_token_expires_in
        scope
        session_state
        token_type
        type
      }
      verificationTokens {
        identifier
        expires
        token
      }
    }
  }
}
    `;
export type CreateSessionMutationFn = Apollo.MutationFunction<CreateSessionMutation, CreateSessionMutationVariables>;

/**
 * __useCreateSessionMutation__
 *
 * To run a mutation, you first call `useCreateSessionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSessionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSessionMutation, { data, loading, error }] = useCreateSessionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateSessionMutation(baseOptions?: Apollo.MutationHookOptions<CreateSessionMutation, CreateSessionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSessionMutation, CreateSessionMutationVariables>(CreateSessionDocument, options);
      }
export type CreateSessionMutationHookResult = ReturnType<typeof useCreateSessionMutation>;
export type CreateSessionMutationResult = Apollo.MutationResult<CreateSessionMutation>;
export type CreateSessionMutationOptions = Apollo.BaseMutationOptions<CreateSessionMutation, CreateSessionMutationVariables>;
export const CreateVerificationTokenDocument = gql`
    mutation CreateVerificationToken($input: CreateVerificationTokenInput!) {
  createVerificationToken(input: $input) {
    identifier
    expires
    token
    user {
      id
      name
      email
      emailVerified
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
      accounts {
        access_token
        expires_at
        id_token
        oauth_token
        oauth_token_secret
        provider
        providerAccountId
        refresh_token
        refresh_token_expires_in
        scope
        session_state
        token_type
        type
      }
      sessions {
        expires
        sessionToken
      }
    }
  }
}
    `;
export type CreateVerificationTokenMutationFn = Apollo.MutationFunction<CreateVerificationTokenMutation, CreateVerificationTokenMutationVariables>;

/**
 * __useCreateVerificationTokenMutation__
 *
 * To run a mutation, you first call `useCreateVerificationTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateVerificationTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createVerificationTokenMutation, { data, loading, error }] = useCreateVerificationTokenMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateVerificationTokenMutation(baseOptions?: Apollo.MutationHookOptions<CreateVerificationTokenMutation, CreateVerificationTokenMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateVerificationTokenMutation, CreateVerificationTokenMutationVariables>(CreateVerificationTokenDocument, options);
      }
export type CreateVerificationTokenMutationHookResult = ReturnType<typeof useCreateVerificationTokenMutation>;
export type CreateVerificationTokenMutationResult = Apollo.MutationResult<CreateVerificationTokenMutation>;
export type CreateVerificationTokenMutationOptions = Apollo.BaseMutationOptions<CreateVerificationTokenMutation, CreateVerificationTokenMutationVariables>;
export const DeleteSessionDocument = gql`
    mutation DeleteSession($sessionToken: String!) {
  deleteSession(sessionToken: $sessionToken) {
    expires
    sessionToken
    user {
      id
      name
      email
      emailVerified
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
      accounts {
        access_token
        expires_at
        id_token
        oauth_token
        oauth_token_secret
        provider
        providerAccountId
        refresh_token
        refresh_token_expires_in
        scope
        session_state
        token_type
        type
      }
      verificationTokens {
        identifier
        expires
        token
      }
    }
  }
}
    `;
export type DeleteSessionMutationFn = Apollo.MutationFunction<DeleteSessionMutation, DeleteSessionMutationVariables>;

/**
 * __useDeleteSessionMutation__
 *
 * To run a mutation, you first call `useDeleteSessionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSessionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSessionMutation, { data, loading, error }] = useDeleteSessionMutation({
 *   variables: {
 *      sessionToken: // value for 'sessionToken'
 *   },
 * });
 */
export function useDeleteSessionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSessionMutation, DeleteSessionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteSessionMutation, DeleteSessionMutationVariables>(DeleteSessionDocument, options);
      }
export type DeleteSessionMutationHookResult = ReturnType<typeof useDeleteSessionMutation>;
export type DeleteSessionMutationResult = Apollo.MutationResult<DeleteSessionMutation>;
export type DeleteSessionMutationOptions = Apollo.BaseMutationOptions<DeleteSessionMutation, DeleteSessionMutationVariables>;
export const LinkAccountDocument = gql`
    mutation LinkAccount($account: LinkAccountInput!) {
  linkAccount(account: $account) {
    access_token
    expires_at
    id_token
    oauth_token
    oauth_token_secret
    provider
    providerAccountId
    refresh_token
    refresh_token_expires_in
    scope
    session_state
    token_type
    type
    user {
      id
      name
      email
      emailVerified
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
      sessions {
        expires
        sessionToken
      }
      verificationTokens {
        identifier
        expires
        token
      }
    }
  }
}
    `;
export type LinkAccountMutationFn = Apollo.MutationFunction<LinkAccountMutation, LinkAccountMutationVariables>;

/**
 * __useLinkAccountMutation__
 *
 * To run a mutation, you first call `useLinkAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLinkAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [linkAccountMutation, { data, loading, error }] = useLinkAccountMutation({
 *   variables: {
 *      account: // value for 'account'
 *   },
 * });
 */
export function useLinkAccountMutation(baseOptions?: Apollo.MutationHookOptions<LinkAccountMutation, LinkAccountMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LinkAccountMutation, LinkAccountMutationVariables>(LinkAccountDocument, options);
      }
export type LinkAccountMutationHookResult = ReturnType<typeof useLinkAccountMutation>;
export type LinkAccountMutationResult = Apollo.MutationResult<LinkAccountMutation>;
export type LinkAccountMutationOptions = Apollo.BaseMutationOptions<LinkAccountMutation, LinkAccountMutationVariables>;
export const UnlinkAccountDocument = gql`
    mutation UnlinkAccount($input: UnlinkAccountInput!) {
  unlinkAccount(input: $input) {
    access_token
    expires_at
    id_token
    oauth_token
    oauth_token_secret
    provider
    providerAccountId
    refresh_token
    refresh_token_expires_in
    scope
    session_state
    token_type
    type
    user {
      id
      name
      email
      emailVerified
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
      sessions {
        expires
        sessionToken
      }
      verificationTokens {
        identifier
        expires
        token
      }
    }
  }
}
    `;
export type UnlinkAccountMutationFn = Apollo.MutationFunction<UnlinkAccountMutation, UnlinkAccountMutationVariables>;

/**
 * __useUnlinkAccountMutation__
 *
 * To run a mutation, you first call `useUnlinkAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnlinkAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unlinkAccountMutation, { data, loading, error }] = useUnlinkAccountMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUnlinkAccountMutation(baseOptions?: Apollo.MutationHookOptions<UnlinkAccountMutation, UnlinkAccountMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UnlinkAccountMutation, UnlinkAccountMutationVariables>(UnlinkAccountDocument, options);
      }
export type UnlinkAccountMutationHookResult = ReturnType<typeof useUnlinkAccountMutation>;
export type UnlinkAccountMutationResult = Apollo.MutationResult<UnlinkAccountMutation>;
export type UnlinkAccountMutationOptions = Apollo.BaseMutationOptions<UnlinkAccountMutation, UnlinkAccountMutationVariables>;
export const UpdateSessionDocument = gql`
    mutation UpdateSession($input: UpdateSessionInput!) {
  updateSession(input: $input) {
    expires
    sessionToken
    user {
      id
      name
      email
      emailVerified
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
      accounts {
        access_token
        expires_at
        id_token
        oauth_token
        oauth_token_secret
        provider
        providerAccountId
        refresh_token
        refresh_token_expires_in
        scope
        session_state
        token_type
        type
      }
      verificationTokens {
        identifier
        expires
        token
      }
    }
  }
}
    `;
export type UpdateSessionMutationFn = Apollo.MutationFunction<UpdateSessionMutation, UpdateSessionMutationVariables>;

/**
 * __useUpdateSessionMutation__
 *
 * To run a mutation, you first call `useUpdateSessionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSessionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSessionMutation, { data, loading, error }] = useUpdateSessionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateSessionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSessionMutation, UpdateSessionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSessionMutation, UpdateSessionMutationVariables>(UpdateSessionDocument, options);
      }
export type UpdateSessionMutationHookResult = ReturnType<typeof useUpdateSessionMutation>;
export type UpdateSessionMutationResult = Apollo.MutationResult<UpdateSessionMutation>;
export type UpdateSessionMutationOptions = Apollo.BaseMutationOptions<UpdateSessionMutation, UpdateSessionMutationVariables>;
export const UpdateUserAuthCustomDocument = gql`
    mutation UpdateUserAuthCustom($user: UpdateUserAuthCustomInput!) {
  updateUserAuthCustom(user: $user) {
    id
    name
    email
    emailVerified
    registrantAffiliation {
      id
      desc
    }
    regist_affili_code
    roleCGAssetStore {
      id
      desc
      role
      valid_flg
    }
    accounts {
      access_token
      expires_at
      id_token
      oauth_token
      oauth_token_secret
      provider
      providerAccountId
      refresh_token
      refresh_token_expires_in
      scope
      session_state
      token_type
      type
    }
    sessions {
      expires
      sessionToken
    }
    verificationTokens {
      identifier
      expires
      token
    }
  }
}
    `;
export type UpdateUserAuthCustomMutationFn = Apollo.MutationFunction<UpdateUserAuthCustomMutation, UpdateUserAuthCustomMutationVariables>;

/**
 * __useUpdateUserAuthCustomMutation__
 *
 * To run a mutation, you first call `useUpdateUserAuthCustomMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserAuthCustomMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserAuthCustomMutation, { data, loading, error }] = useUpdateUserAuthCustomMutation({
 *   variables: {
 *      user: // value for 'user'
 *   },
 * });
 */
export function useUpdateUserAuthCustomMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserAuthCustomMutation, UpdateUserAuthCustomMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserAuthCustomMutation, UpdateUserAuthCustomMutationVariables>(UpdateUserAuthCustomDocument, options);
      }
export type UpdateUserAuthCustomMutationHookResult = ReturnType<typeof useUpdateUserAuthCustomMutation>;
export type UpdateUserAuthCustomMutationResult = Apollo.MutationResult<UpdateUserAuthCustomMutation>;
export type UpdateUserAuthCustomMutationOptions = Apollo.BaseMutationOptions<UpdateUserAuthCustomMutation, UpdateUserAuthCustomMutationVariables>;
export const CreateUserDocument = gql`
    mutation CreateUser($user: CreateUserInput!) {
  createUser(user: $user) {
    id
    name
    email
    emailVerified
    registrantAffiliation {
      id
      desc
    }
    regist_affili_code
    roleCGAssetStore {
      id
      desc
      role
      valid_flg
    }
    accounts {
      access_token
      expires_at
      id_token
      oauth_token
      oauth_token_secret
      provider
      providerAccountId
      refresh_token
      refresh_token_expires_in
      scope
      session_state
      token_type
      type
    }
    sessions {
      expires
      sessionToken
    }
    verificationTokens {
      identifier
      expires
      token
    }
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      user: // value for 'user'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const DeleteUserDocument = gql`
    mutation DeleteUser($id: ID!) {
  deleteUser(id: $id) {
    id
    name
    email
    emailVerified
    registrantAffiliation {
      id
      desc
    }
    regist_affili_code
    roleCGAssetStore {
      id
      desc
      role
      valid_flg
    }
    accounts {
      access_token
      expires_at
      id_token
      oauth_token
      oauth_token_secret
      provider
      providerAccountId
      refresh_token
      refresh_token_expires_in
      scope
      session_state
      token_type
      type
    }
    sessions {
      expires
      sessionToken
    }
    verificationTokens {
      identifier
      expires
      token
    }
  }
}
    `;
export type DeleteUserMutationFn = Apollo.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;

/**
 * __useDeleteUserMutation__
 *
 * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, options);
      }
export type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;
export type DeleteUserMutationResult = Apollo.MutationResult<DeleteUserMutation>;
export type DeleteUserMutationOptions = Apollo.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;
export const UpdateUserDocument = gql`
    mutation UpdateUser($user: UpdateUserInput!) {
  updateUser(user: $user) {
    id
    name
    email
    emailVerified
    registrantAffiliation {
      id
      desc
    }
    regist_affili_code
    roleCGAssetStore {
      id
      desc
      role
      valid_flg
    }
    accounts {
      access_token
      expires_at
      id_token
      oauth_token
      oauth_token_secret
      provider
      providerAccountId
      refresh_token
      refresh_token_expires_in
      scope
      session_state
      token_type
      type
    }
    sessions {
      expires
      sessionToken
    }
    verificationTokens {
      identifier
      expires
      token
    }
  }
}
    `;
export type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({
 *   variables: {
 *      user: // value for 'user'
 *   },
 * });
 */
export function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options);
      }
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;
export const CreateCgAssetUploadDirDocument = gql`
    mutation CreateCGAssetUploadDir($base_path: String!, $order: Int!, $valid_flg: Boolean!) {
  createCGAssetUploadDir(
    base_path: $base_path
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    base_path
    order
    valid_flg
  }
}
    `;
export type CreateCgAssetUploadDirMutationFn = Apollo.MutationFunction<CreateCgAssetUploadDirMutation, CreateCgAssetUploadDirMutationVariables>;

/**
 * __useCreateCgAssetUploadDirMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetUploadDirMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetUploadDirMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetUploadDirMutation, { data, loading, error }] = useCreateCgAssetUploadDirMutation({
 *   variables: {
 *      base_path: // value for 'base_path'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgAssetUploadDirMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetUploadDirMutation, CreateCgAssetUploadDirMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetUploadDirMutation, CreateCgAssetUploadDirMutationVariables>(CreateCgAssetUploadDirDocument, options);
      }
export type CreateCgAssetUploadDirMutationHookResult = ReturnType<typeof useCreateCgAssetUploadDirMutation>;
export type CreateCgAssetUploadDirMutationResult = Apollo.MutationResult<CreateCgAssetUploadDirMutation>;
export type CreateCgAssetUploadDirMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetUploadDirMutation, CreateCgAssetUploadDirMutationVariables>;
export const DeleteCgAssetUploadDirDocument = gql`
    mutation DeleteCGAssetUploadDir($id: ID!) {
  deleteCGAssetUploadDir(id: $id) {
    __typename
    id
    base_path
    order
    valid_flg
  }
}
    `;
export type DeleteCgAssetUploadDirMutationFn = Apollo.MutationFunction<DeleteCgAssetUploadDirMutation, DeleteCgAssetUploadDirMutationVariables>;

/**
 * __useDeleteCgAssetUploadDirMutation__
 *
 * To run a mutation, you first call `useDeleteCgAssetUploadDirMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgAssetUploadDirMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgAssetUploadDirMutation, { data, loading, error }] = useDeleteCgAssetUploadDirMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgAssetUploadDirMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgAssetUploadDirMutation, DeleteCgAssetUploadDirMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgAssetUploadDirMutation, DeleteCgAssetUploadDirMutationVariables>(DeleteCgAssetUploadDirDocument, options);
      }
export type DeleteCgAssetUploadDirMutationHookResult = ReturnType<typeof useDeleteCgAssetUploadDirMutation>;
export type DeleteCgAssetUploadDirMutationResult = Apollo.MutationResult<DeleteCgAssetUploadDirMutation>;
export type DeleteCgAssetUploadDirMutationOptions = Apollo.BaseMutationOptions<DeleteCgAssetUploadDirMutation, DeleteCgAssetUploadDirMutationVariables>;
export const UpdateCgAssetUploadDirDocument = gql`
    mutation UpdateCGAssetUploadDir($id: ID!, $base_path: String!, $order: Int!, $valid_flg: Boolean!) {
  updateCGAssetUploadDir(
    id: $id
    base_path: $base_path
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    base_path
    order
    valid_flg
  }
}
    `;
export type UpdateCgAssetUploadDirMutationFn = Apollo.MutationFunction<UpdateCgAssetUploadDirMutation, UpdateCgAssetUploadDirMutationVariables>;

/**
 * __useUpdateCgAssetUploadDirMutation__
 *
 * To run a mutation, you first call `useUpdateCgAssetUploadDirMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgAssetUploadDirMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgAssetUploadDirMutation, { data, loading, error }] = useUpdateCgAssetUploadDirMutation({
 *   variables: {
 *      id: // value for 'id'
 *      base_path: // value for 'base_path'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgAssetUploadDirMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgAssetUploadDirMutation, UpdateCgAssetUploadDirMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgAssetUploadDirMutation, UpdateCgAssetUploadDirMutationVariables>(UpdateCgAssetUploadDirDocument, options);
      }
export type UpdateCgAssetUploadDirMutationHookResult = ReturnType<typeof useUpdateCgAssetUploadDirMutation>;
export type UpdateCgAssetUploadDirMutationResult = Apollo.MutationResult<UpdateCgAssetUploadDirMutation>;
export type UpdateCgAssetUploadDirMutationOptions = Apollo.BaseMutationOptions<UpdateCgAssetUploadDirMutation, UpdateCgAssetUploadDirMutationVariables>;
export const CreateCgaBroadcastingRightDocument = gql`
    mutation CreateCGABroadcastingRight($desc: String!, $order: Int!, $valid_flg: Boolean!) {
  createCGABroadcastingRight(desc: $desc, order: $order, valid_flg: $valid_flg) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type CreateCgaBroadcastingRightMutationFn = Apollo.MutationFunction<CreateCgaBroadcastingRightMutation, CreateCgaBroadcastingRightMutationVariables>;

/**
 * __useCreateCgaBroadcastingRightMutation__
 *
 * To run a mutation, you first call `useCreateCgaBroadcastingRightMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgaBroadcastingRightMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgaBroadcastingRightMutation, { data, loading, error }] = useCreateCgaBroadcastingRightMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgaBroadcastingRightMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgaBroadcastingRightMutation, CreateCgaBroadcastingRightMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgaBroadcastingRightMutation, CreateCgaBroadcastingRightMutationVariables>(CreateCgaBroadcastingRightDocument, options);
      }
export type CreateCgaBroadcastingRightMutationHookResult = ReturnType<typeof useCreateCgaBroadcastingRightMutation>;
export type CreateCgaBroadcastingRightMutationResult = Apollo.MutationResult<CreateCgaBroadcastingRightMutation>;
export type CreateCgaBroadcastingRightMutationOptions = Apollo.BaseMutationOptions<CreateCgaBroadcastingRightMutation, CreateCgaBroadcastingRightMutationVariables>;
export const DeleteCgaBroadcastingRightDocument = gql`
    mutation DeleteCGABroadcastingRight($id: ID!) {
  deleteCGABroadcastingRight(id: $id) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type DeleteCgaBroadcastingRightMutationFn = Apollo.MutationFunction<DeleteCgaBroadcastingRightMutation, DeleteCgaBroadcastingRightMutationVariables>;

/**
 * __useDeleteCgaBroadcastingRightMutation__
 *
 * To run a mutation, you first call `useDeleteCgaBroadcastingRightMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgaBroadcastingRightMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgaBroadcastingRightMutation, { data, loading, error }] = useDeleteCgaBroadcastingRightMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgaBroadcastingRightMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgaBroadcastingRightMutation, DeleteCgaBroadcastingRightMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgaBroadcastingRightMutation, DeleteCgaBroadcastingRightMutationVariables>(DeleteCgaBroadcastingRightDocument, options);
      }
export type DeleteCgaBroadcastingRightMutationHookResult = ReturnType<typeof useDeleteCgaBroadcastingRightMutation>;
export type DeleteCgaBroadcastingRightMutationResult = Apollo.MutationResult<DeleteCgaBroadcastingRightMutation>;
export type DeleteCgaBroadcastingRightMutationOptions = Apollo.BaseMutationOptions<DeleteCgaBroadcastingRightMutation, DeleteCgaBroadcastingRightMutationVariables>;
export const UpdateCgaBroadcastingRightDocument = gql`
    mutation UpdateCGABroadcastingRight($id: ID!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  updateCGABroadcastingRight(
    id: $id
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type UpdateCgaBroadcastingRightMutationFn = Apollo.MutationFunction<UpdateCgaBroadcastingRightMutation, UpdateCgaBroadcastingRightMutationVariables>;

/**
 * __useUpdateCgaBroadcastingRightMutation__
 *
 * To run a mutation, you first call `useUpdateCgaBroadcastingRightMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgaBroadcastingRightMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgaBroadcastingRightMutation, { data, loading, error }] = useUpdateCgaBroadcastingRightMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgaBroadcastingRightMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgaBroadcastingRightMutation, UpdateCgaBroadcastingRightMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgaBroadcastingRightMutation, UpdateCgaBroadcastingRightMutationVariables>(UpdateCgaBroadcastingRightDocument, options);
      }
export type UpdateCgaBroadcastingRightMutationHookResult = ReturnType<typeof useUpdateCgaBroadcastingRightMutation>;
export type UpdateCgaBroadcastingRightMutationResult = Apollo.MutationResult<UpdateCgaBroadcastingRightMutation>;
export type UpdateCgaBroadcastingRightMutationOptions = Apollo.BaseMutationOptions<UpdateCgaBroadcastingRightMutation, UpdateCgaBroadcastingRightMutationVariables>;
export const CreateCgAssetDocument = gql`
    mutation CreateCgAsset($input: CreateCGAssetInput!) {
  createCGAsset(input: $input) {
    __typename
    id
    asset_id
    asset_name
    assetCate {
      desc
    }
    asset_genre
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      desc
    }
    viewingRestriction {
      desc
    }
    broadcastingRight {
      desc
    }
    sharedArea {
      desc
    }
    rights_supplement
    asset_detail
    assetUploads {
      file_name
      url
      file_path
    }
    assetThumbs {
      thumb_file_name
      thumb_url
      thumb_file_path
    }
    assetTags {
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistories {
      created_at
      desc
      revisedUser {
        name
      }
    }
    reviews {
      id
      created_at
      review
      reviewedUser {
        id
        name
      }
      valid_flg
    }
    download_count
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type CreateCgAssetMutationFn = Apollo.MutationFunction<CreateCgAssetMutation, CreateCgAssetMutationVariables>;

/**
 * __useCreateCgAssetMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetMutation, { data, loading, error }] = useCreateCgAssetMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCgAssetMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetMutation, CreateCgAssetMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetMutation, CreateCgAssetMutationVariables>(CreateCgAssetDocument, options);
      }
export type CreateCgAssetMutationHookResult = ReturnType<typeof useCreateCgAssetMutation>;
export type CreateCgAssetMutationResult = Apollo.MutationResult<CreateCgAssetMutation>;
export type CreateCgAssetMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetMutation, CreateCgAssetMutationVariables>;
export const DeleteCgAssetDocument = gql`
    mutation DeleteCgAsset($id: ID!) {
  deleteCGAsset(id: $id) {
    __typename
    id
    asset_id
    asset_name
    assetCate {
      desc
    }
    asset_genre
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      desc
    }
    viewingRestriction {
      desc
    }
    broadcastingRight {
      desc
    }
    sharedArea {
      desc
    }
    rights_supplement
    asset_detail
    assetUploads {
      file_name
      url
      file_path
    }
    assetThumbs {
      thumb_file_name
      thumb_url
      thumb_file_path
    }
    assetTags {
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistories {
      created_at
      desc
      revisedUser {
        name
      }
    }
    reviews {
      id
      created_at
      review
      reviewedUser {
        id
        name
      }
      valid_flg
    }
    download_count
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type DeleteCgAssetMutationFn = Apollo.MutationFunction<DeleteCgAssetMutation, DeleteCgAssetMutationVariables>;

/**
 * __useDeleteCgAssetMutation__
 *
 * To run a mutation, you first call `useDeleteCgAssetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgAssetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgAssetMutation, { data, loading, error }] = useDeleteCgAssetMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgAssetMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgAssetMutation, DeleteCgAssetMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgAssetMutation, DeleteCgAssetMutationVariables>(DeleteCgAssetDocument, options);
      }
export type DeleteCgAssetMutationHookResult = ReturnType<typeof useDeleteCgAssetMutation>;
export type DeleteCgAssetMutationResult = Apollo.MutationResult<DeleteCgAssetMutation>;
export type DeleteCgAssetMutationOptions = Apollo.BaseMutationOptions<DeleteCgAssetMutation, DeleteCgAssetMutationVariables>;
export const ImportCgAssetsDocument = gql`
    mutation ImportCgAssets($input: ImportCGAssetsInput!) {
  importCGAssets(input: $input) {
    __typename
    total
  }
}
    `;
export type ImportCgAssetsMutationFn = Apollo.MutationFunction<ImportCgAssetsMutation, ImportCgAssetsMutationVariables>;

/**
 * __useImportCgAssetsMutation__
 *
 * To run a mutation, you first call `useImportCgAssetsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImportCgAssetsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [importCgAssetsMutation, { data, loading, error }] = useImportCgAssetsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useImportCgAssetsMutation(baseOptions?: Apollo.MutationHookOptions<ImportCgAssetsMutation, ImportCgAssetsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ImportCgAssetsMutation, ImportCgAssetsMutationVariables>(ImportCgAssetsDocument, options);
      }
export type ImportCgAssetsMutationHookResult = ReturnType<typeof useImportCgAssetsMutation>;
export type ImportCgAssetsMutationResult = Apollo.MutationResult<ImportCgAssetsMutation>;
export type ImportCgAssetsMutationOptions = Apollo.BaseMutationOptions<ImportCgAssetsMutation, ImportCgAssetsMutationVariables>;
export const UpdateCgAssetDocument = gql`
    mutation UpdateCgAsset($input: UpdateCGAssetInput!) {
  updateCGAsset(input: $input) {
    __typename
    id
    asset_id
    asset_name
    assetCate {
      desc
    }
    asset_genre
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      desc
    }
    viewingRestriction {
      desc
    }
    broadcastingRight {
      desc
    }
    sharedArea {
      desc
    }
    rights_supplement
    asset_detail
    assetUploads {
      file_name
      url
      file_path
    }
    assetThumbs {
      thumb_file_name
      thumb_url
      thumb_file_path
    }
    assetTags {
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistories {
      created_at
      desc
      revisedUser {
        name
      }
    }
    reviews {
      id
      created_at
      review
      reviewedUser {
        id
        name
      }
      valid_flg
    }
    download_count
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type UpdateCgAssetMutationFn = Apollo.MutationFunction<UpdateCgAssetMutation, UpdateCgAssetMutationVariables>;

/**
 * __useUpdateCgAssetMutation__
 *
 * To run a mutation, you first call `useUpdateCgAssetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgAssetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgAssetMutation, { data, loading, error }] = useUpdateCgAssetMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateCgAssetMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgAssetMutation, UpdateCgAssetMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgAssetMutation, UpdateCgAssetMutationVariables>(UpdateCgAssetDocument, options);
      }
export type UpdateCgAssetMutationHookResult = ReturnType<typeof useUpdateCgAssetMutation>;
export type UpdateCgAssetMutationResult = Apollo.MutationResult<UpdateCgAssetMutation>;
export type UpdateCgAssetMutationOptions = Apollo.BaseMutationOptions<UpdateCgAssetMutation, UpdateCgAssetMutationVariables>;
export const CreateCgAssetCateDocument = gql`
    mutation CreateCgAssetCate($code: CodeCGAssetCate!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  createCGAssetCate(
    code: $code
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type CreateCgAssetCateMutationFn = Apollo.MutationFunction<CreateCgAssetCateMutation, CreateCgAssetCateMutationVariables>;

/**
 * __useCreateCgAssetCateMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetCateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetCateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetCateMutation, { data, loading, error }] = useCreateCgAssetCateMutation({
 *   variables: {
 *      code: // value for 'code'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgAssetCateMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetCateMutation, CreateCgAssetCateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetCateMutation, CreateCgAssetCateMutationVariables>(CreateCgAssetCateDocument, options);
      }
export type CreateCgAssetCateMutationHookResult = ReturnType<typeof useCreateCgAssetCateMutation>;
export type CreateCgAssetCateMutationResult = Apollo.MutationResult<CreateCgAssetCateMutation>;
export type CreateCgAssetCateMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetCateMutation, CreateCgAssetCateMutationVariables>;
export const DeleteCgAssetCateDocument = gql`
    mutation DeleteCgAssetCate($id: ID!) {
  deleteCGAssetCate(id: $id) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type DeleteCgAssetCateMutationFn = Apollo.MutationFunction<DeleteCgAssetCateMutation, DeleteCgAssetCateMutationVariables>;

/**
 * __useDeleteCgAssetCateMutation__
 *
 * To run a mutation, you first call `useDeleteCgAssetCateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgAssetCateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgAssetCateMutation, { data, loading, error }] = useDeleteCgAssetCateMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgAssetCateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgAssetCateMutation, DeleteCgAssetCateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgAssetCateMutation, DeleteCgAssetCateMutationVariables>(DeleteCgAssetCateDocument, options);
      }
export type DeleteCgAssetCateMutationHookResult = ReturnType<typeof useDeleteCgAssetCateMutation>;
export type DeleteCgAssetCateMutationResult = Apollo.MutationResult<DeleteCgAssetCateMutation>;
export type DeleteCgAssetCateMutationOptions = Apollo.BaseMutationOptions<DeleteCgAssetCateMutation, DeleteCgAssetCateMutationVariables>;
export const UpdateCgAssetCateDocument = gql`
    mutation UpdateCgAssetCate($id: ID!, $code: CodeCGAssetCate!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  updateCGAssetCate(
    id: $id
    code: $code
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type UpdateCgAssetCateMutationFn = Apollo.MutationFunction<UpdateCgAssetCateMutation, UpdateCgAssetCateMutationVariables>;

/**
 * __useUpdateCgAssetCateMutation__
 *
 * To run a mutation, you first call `useUpdateCgAssetCateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgAssetCateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgAssetCateMutation, { data, loading, error }] = useUpdateCgAssetCateMutation({
 *   variables: {
 *      id: // value for 'id'
 *      code: // value for 'code'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgAssetCateMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgAssetCateMutation, UpdateCgAssetCateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgAssetCateMutation, UpdateCgAssetCateMutationVariables>(UpdateCgAssetCateDocument, options);
      }
export type UpdateCgAssetCateMutationHookResult = ReturnType<typeof useUpdateCgAssetCateMutation>;
export type UpdateCgAssetCateMutationResult = Apollo.MutationResult<UpdateCgAssetCateMutation>;
export type UpdateCgAssetCateMutationOptions = Apollo.BaseMutationOptions<UpdateCgAssetCateMutation, UpdateCgAssetCateMutationVariables>;
export const CreateCgAssetReviewDocument = gql`
    mutation CreateCgAssetReview($asset_db_id: ID!, $review: String!, $reviewed_user_id: ID!) {
  createCGAssetReview(
    asset_db_id: $asset_db_id
    review: $review
    reviewed_user_id: $reviewed_user_id
  ) {
    __typename
    id
    review
    cgAsset {
      id
      reviews {
        id
        review
        reviewedUser {
          id
          name
        }
        valid_flg
        created_at
      }
    }
    reviewedUser {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
  }
}
    `;
export type CreateCgAssetReviewMutationFn = Apollo.MutationFunction<CreateCgAssetReviewMutation, CreateCgAssetReviewMutationVariables>;

/**
 * __useCreateCgAssetReviewMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetReviewMutation, { data, loading, error }] = useCreateCgAssetReviewMutation({
 *   variables: {
 *      asset_db_id: // value for 'asset_db_id'
 *      review: // value for 'review'
 *      reviewed_user_id: // value for 'reviewed_user_id'
 *   },
 * });
 */
export function useCreateCgAssetReviewMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetReviewMutation, CreateCgAssetReviewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetReviewMutation, CreateCgAssetReviewMutationVariables>(CreateCgAssetReviewDocument, options);
      }
export type CreateCgAssetReviewMutationHookResult = ReturnType<typeof useCreateCgAssetReviewMutation>;
export type CreateCgAssetReviewMutationResult = Apollo.MutationResult<CreateCgAssetReviewMutation>;
export type CreateCgAssetReviewMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetReviewMutation, CreateCgAssetReviewMutationVariables>;
export const DeleteCgAssetReviewDocument = gql`
    mutation DeleteCgAssetReview($id: ID!) {
  deleteCGAssetReview(id: $id) {
    __typename
    id
    review
    cgAsset {
      id
      reviews {
        id
        review
        reviewedUser {
          id
          name
        }
        valid_flg
        created_at
      }
    }
    reviewedUser {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
  }
}
    `;
export type DeleteCgAssetReviewMutationFn = Apollo.MutationFunction<DeleteCgAssetReviewMutation, DeleteCgAssetReviewMutationVariables>;

/**
 * __useDeleteCgAssetReviewMutation__
 *
 * To run a mutation, you first call `useDeleteCgAssetReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgAssetReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgAssetReviewMutation, { data, loading, error }] = useDeleteCgAssetReviewMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgAssetReviewMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgAssetReviewMutation, DeleteCgAssetReviewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgAssetReviewMutation, DeleteCgAssetReviewMutationVariables>(DeleteCgAssetReviewDocument, options);
      }
export type DeleteCgAssetReviewMutationHookResult = ReturnType<typeof useDeleteCgAssetReviewMutation>;
export type DeleteCgAssetReviewMutationResult = Apollo.MutationResult<DeleteCgAssetReviewMutation>;
export type DeleteCgAssetReviewMutationOptions = Apollo.BaseMutationOptions<DeleteCgAssetReviewMutation, DeleteCgAssetReviewMutationVariables>;
export const UpdateCgAssetReviewDocument = gql`
    mutation UpdateCgAssetReview($id: ID!, $review: String!) {
  updateCGAssetReview(id: $id, review: $review) {
    __typename
    id
    review
    cgAsset {
      id
      reviews {
        id
        review
        reviewedUser {
          id
          name
        }
        valid_flg
        created_at
      }
    }
    reviewedUser {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
  }
}
    `;
export type UpdateCgAssetReviewMutationFn = Apollo.MutationFunction<UpdateCgAssetReviewMutation, UpdateCgAssetReviewMutationVariables>;

/**
 * __useUpdateCgAssetReviewMutation__
 *
 * To run a mutation, you first call `useUpdateCgAssetReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgAssetReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgAssetReviewMutation, { data, loading, error }] = useUpdateCgAssetReviewMutation({
 *   variables: {
 *      id: // value for 'id'
 *      review: // value for 'review'
 *   },
 * });
 */
export function useUpdateCgAssetReviewMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgAssetReviewMutation, UpdateCgAssetReviewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgAssetReviewMutation, UpdateCgAssetReviewMutationVariables>(UpdateCgAssetReviewDocument, options);
      }
export type UpdateCgAssetReviewMutationHookResult = ReturnType<typeof useUpdateCgAssetReviewMutation>;
export type UpdateCgAssetReviewMutationResult = Apollo.MutationResult<UpdateCgAssetReviewMutation>;
export type UpdateCgAssetReviewMutationOptions = Apollo.BaseMutationOptions<UpdateCgAssetReviewMutation, UpdateCgAssetReviewMutationVariables>;
export const CreateCgAssetSearchAppProdDocument = gql`
    mutation CreateCgAssetSearchAppProd($code: String!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  createCGAssetSearchAppProd(
    code: $code
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type CreateCgAssetSearchAppProdMutationFn = Apollo.MutationFunction<CreateCgAssetSearchAppProdMutation, CreateCgAssetSearchAppProdMutationVariables>;

/**
 * __useCreateCgAssetSearchAppProdMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetSearchAppProdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetSearchAppProdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetSearchAppProdMutation, { data, loading, error }] = useCreateCgAssetSearchAppProdMutation({
 *   variables: {
 *      code: // value for 'code'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgAssetSearchAppProdMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetSearchAppProdMutation, CreateCgAssetSearchAppProdMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetSearchAppProdMutation, CreateCgAssetSearchAppProdMutationVariables>(CreateCgAssetSearchAppProdDocument, options);
      }
export type CreateCgAssetSearchAppProdMutationHookResult = ReturnType<typeof useCreateCgAssetSearchAppProdMutation>;
export type CreateCgAssetSearchAppProdMutationResult = Apollo.MutationResult<CreateCgAssetSearchAppProdMutation>;
export type CreateCgAssetSearchAppProdMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetSearchAppProdMutation, CreateCgAssetSearchAppProdMutationVariables>;
export const DeleteCgAssetSearchAppProdDocument = gql`
    mutation DeleteCgAssetSearchAppProd($id: ID!) {
  deleteCGAssetSearchAppProd(id: $id) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type DeleteCgAssetSearchAppProdMutationFn = Apollo.MutationFunction<DeleteCgAssetSearchAppProdMutation, DeleteCgAssetSearchAppProdMutationVariables>;

/**
 * __useDeleteCgAssetSearchAppProdMutation__
 *
 * To run a mutation, you first call `useDeleteCgAssetSearchAppProdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgAssetSearchAppProdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgAssetSearchAppProdMutation, { data, loading, error }] = useDeleteCgAssetSearchAppProdMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgAssetSearchAppProdMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgAssetSearchAppProdMutation, DeleteCgAssetSearchAppProdMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgAssetSearchAppProdMutation, DeleteCgAssetSearchAppProdMutationVariables>(DeleteCgAssetSearchAppProdDocument, options);
      }
export type DeleteCgAssetSearchAppProdMutationHookResult = ReturnType<typeof useDeleteCgAssetSearchAppProdMutation>;
export type DeleteCgAssetSearchAppProdMutationResult = Apollo.MutationResult<DeleteCgAssetSearchAppProdMutation>;
export type DeleteCgAssetSearchAppProdMutationOptions = Apollo.BaseMutationOptions<DeleteCgAssetSearchAppProdMutation, DeleteCgAssetSearchAppProdMutationVariables>;
export const UpdateCgAssetSearchAppProdDocument = gql`
    mutation UpdateCgAssetSearchAppProd($id: ID!, $code: String!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  updateCGAssetSearchAppProd(
    id: $id
    code: $code
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type UpdateCgAssetSearchAppProdMutationFn = Apollo.MutationFunction<UpdateCgAssetSearchAppProdMutation, UpdateCgAssetSearchAppProdMutationVariables>;

/**
 * __useUpdateCgAssetSearchAppProdMutation__
 *
 * To run a mutation, you first call `useUpdateCgAssetSearchAppProdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgAssetSearchAppProdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgAssetSearchAppProdMutation, { data, loading, error }] = useUpdateCgAssetSearchAppProdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      code: // value for 'code'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgAssetSearchAppProdMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgAssetSearchAppProdMutation, UpdateCgAssetSearchAppProdMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgAssetSearchAppProdMutation, UpdateCgAssetSearchAppProdMutationVariables>(UpdateCgAssetSearchAppProdDocument, options);
      }
export type UpdateCgAssetSearchAppProdMutationHookResult = ReturnType<typeof useUpdateCgAssetSearchAppProdMutation>;
export type UpdateCgAssetSearchAppProdMutationResult = Apollo.MutationResult<UpdateCgAssetSearchAppProdMutation>;
export type UpdateCgAssetSearchAppProdMutationOptions = Apollo.BaseMutationOptions<UpdateCgAssetSearchAppProdMutation, UpdateCgAssetSearchAppProdMutationVariables>;
export const CreateCgAssetSearchGenreDocument = gql`
    mutation CreateCgAssetSearchGenre($code: String!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  createCGAssetSearchGenre(
    code: $code
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type CreateCgAssetSearchGenreMutationFn = Apollo.MutationFunction<CreateCgAssetSearchGenreMutation, CreateCgAssetSearchGenreMutationVariables>;

/**
 * __useCreateCgAssetSearchGenreMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetSearchGenreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetSearchGenreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetSearchGenreMutation, { data, loading, error }] = useCreateCgAssetSearchGenreMutation({
 *   variables: {
 *      code: // value for 'code'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgAssetSearchGenreMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetSearchGenreMutation, CreateCgAssetSearchGenreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetSearchGenreMutation, CreateCgAssetSearchGenreMutationVariables>(CreateCgAssetSearchGenreDocument, options);
      }
export type CreateCgAssetSearchGenreMutationHookResult = ReturnType<typeof useCreateCgAssetSearchGenreMutation>;
export type CreateCgAssetSearchGenreMutationResult = Apollo.MutationResult<CreateCgAssetSearchGenreMutation>;
export type CreateCgAssetSearchGenreMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetSearchGenreMutation, CreateCgAssetSearchGenreMutationVariables>;
export const DeleteCgAssetSearchGenreDocument = gql`
    mutation DeleteCgAssetSearchGenre($id: ID!) {
  deleteCGAssetSearchGenre(id: $id) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type DeleteCgAssetSearchGenreMutationFn = Apollo.MutationFunction<DeleteCgAssetSearchGenreMutation, DeleteCgAssetSearchGenreMutationVariables>;

/**
 * __useDeleteCgAssetSearchGenreMutation__
 *
 * To run a mutation, you first call `useDeleteCgAssetSearchGenreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgAssetSearchGenreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgAssetSearchGenreMutation, { data, loading, error }] = useDeleteCgAssetSearchGenreMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgAssetSearchGenreMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgAssetSearchGenreMutation, DeleteCgAssetSearchGenreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgAssetSearchGenreMutation, DeleteCgAssetSearchGenreMutationVariables>(DeleteCgAssetSearchGenreDocument, options);
      }
export type DeleteCgAssetSearchGenreMutationHookResult = ReturnType<typeof useDeleteCgAssetSearchGenreMutation>;
export type DeleteCgAssetSearchGenreMutationResult = Apollo.MutationResult<DeleteCgAssetSearchGenreMutation>;
export type DeleteCgAssetSearchGenreMutationOptions = Apollo.BaseMutationOptions<DeleteCgAssetSearchGenreMutation, DeleteCgAssetSearchGenreMutationVariables>;
export const UpdateCgAssetSearchGenreDocument = gql`
    mutation UpdateCgAssetSearchGenre($id: ID!, $code: String!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  updateCGAssetSearchGenre(
    id: $id
    code: $code
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    code
    desc
    order
    valid_flg
  }
}
    `;
export type UpdateCgAssetSearchGenreMutationFn = Apollo.MutationFunction<UpdateCgAssetSearchGenreMutation, UpdateCgAssetSearchGenreMutationVariables>;

/**
 * __useUpdateCgAssetSearchGenreMutation__
 *
 * To run a mutation, you first call `useUpdateCgAssetSearchGenreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgAssetSearchGenreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgAssetSearchGenreMutation, { data, loading, error }] = useUpdateCgAssetSearchGenreMutation({
 *   variables: {
 *      id: // value for 'id'
 *      code: // value for 'code'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgAssetSearchGenreMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgAssetSearchGenreMutation, UpdateCgAssetSearchGenreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgAssetSearchGenreMutation, UpdateCgAssetSearchGenreMutationVariables>(UpdateCgAssetSearchGenreDocument, options);
      }
export type UpdateCgAssetSearchGenreMutationHookResult = ReturnType<typeof useUpdateCgAssetSearchGenreMutation>;
export type UpdateCgAssetSearchGenreMutationResult = Apollo.MutationResult<UpdateCgAssetSearchGenreMutation>;
export type UpdateCgAssetSearchGenreMutationOptions = Apollo.BaseMutationOptions<UpdateCgAssetSearchGenreMutation, UpdateCgAssetSearchGenreMutationVariables>;
export const CreateCgAssetTagDocument = gql`
    mutation CreateCgAssetTag($asset_db_id: ID!, $tag: String!, $tagged_user_id: ID!, $tag_add_edit_flg: Boolean!) {
  createCGAssetTag(
    asset_db_id: $asset_db_id
    tag: $tag
    tagged_user_id: $tagged_user_id
    tag_add_edit_flg: $tag_add_edit_flg
  ) {
    __typename
    id
    tag
    cgAsset {
      id
      assetTags {
        id
        tag
        tag_add_edit_flg
        taggedUser {
          name
        }
        created_at
      }
    }
    taggedUser {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
  }
}
    `;
export type CreateCgAssetTagMutationFn = Apollo.MutationFunction<CreateCgAssetTagMutation, CreateCgAssetTagMutationVariables>;

/**
 * __useCreateCgAssetTagMutation__
 *
 * To run a mutation, you first call `useCreateCgAssetTagMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgAssetTagMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgAssetTagMutation, { data, loading, error }] = useCreateCgAssetTagMutation({
 *   variables: {
 *      asset_db_id: // value for 'asset_db_id'
 *      tag: // value for 'tag'
 *      tagged_user_id: // value for 'tagged_user_id'
 *      tag_add_edit_flg: // value for 'tag_add_edit_flg'
 *   },
 * });
 */
export function useCreateCgAssetTagMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgAssetTagMutation, CreateCgAssetTagMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgAssetTagMutation, CreateCgAssetTagMutationVariables>(CreateCgAssetTagDocument, options);
      }
export type CreateCgAssetTagMutationHookResult = ReturnType<typeof useCreateCgAssetTagMutation>;
export type CreateCgAssetTagMutationResult = Apollo.MutationResult<CreateCgAssetTagMutation>;
export type CreateCgAssetTagMutationOptions = Apollo.BaseMutationOptions<CreateCgAssetTagMutation, CreateCgAssetTagMutationVariables>;
export const CreateCgaRegistrantAffiliationDocument = gql`
    mutation CreateCgaRegistrantAffiliation($desc: String!, $order: Int!, $valid_flg: Boolean!) {
  createCGARegistrantAffiliation(
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type CreateCgaRegistrantAffiliationMutationFn = Apollo.MutationFunction<CreateCgaRegistrantAffiliationMutation, CreateCgaRegistrantAffiliationMutationVariables>;

/**
 * __useCreateCgaRegistrantAffiliationMutation__
 *
 * To run a mutation, you first call `useCreateCgaRegistrantAffiliationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgaRegistrantAffiliationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgaRegistrantAffiliationMutation, { data, loading, error }] = useCreateCgaRegistrantAffiliationMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgaRegistrantAffiliationMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgaRegistrantAffiliationMutation, CreateCgaRegistrantAffiliationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgaRegistrantAffiliationMutation, CreateCgaRegistrantAffiliationMutationVariables>(CreateCgaRegistrantAffiliationDocument, options);
      }
export type CreateCgaRegistrantAffiliationMutationHookResult = ReturnType<typeof useCreateCgaRegistrantAffiliationMutation>;
export type CreateCgaRegistrantAffiliationMutationResult = Apollo.MutationResult<CreateCgaRegistrantAffiliationMutation>;
export type CreateCgaRegistrantAffiliationMutationOptions = Apollo.BaseMutationOptions<CreateCgaRegistrantAffiliationMutation, CreateCgaRegistrantAffiliationMutationVariables>;
export const DeleteCgaRegistrantAffiliationDocument = gql`
    mutation DeleteCgaRegistrantAffiliation($id: ID!) {
  deleteCGARegistrantAffiliation(id: $id) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type DeleteCgaRegistrantAffiliationMutationFn = Apollo.MutationFunction<DeleteCgaRegistrantAffiliationMutation, DeleteCgaRegistrantAffiliationMutationVariables>;

/**
 * __useDeleteCgaRegistrantAffiliationMutation__
 *
 * To run a mutation, you first call `useDeleteCgaRegistrantAffiliationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgaRegistrantAffiliationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgaRegistrantAffiliationMutation, { data, loading, error }] = useDeleteCgaRegistrantAffiliationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgaRegistrantAffiliationMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgaRegistrantAffiliationMutation, DeleteCgaRegistrantAffiliationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgaRegistrantAffiliationMutation, DeleteCgaRegistrantAffiliationMutationVariables>(DeleteCgaRegistrantAffiliationDocument, options);
      }
export type DeleteCgaRegistrantAffiliationMutationHookResult = ReturnType<typeof useDeleteCgaRegistrantAffiliationMutation>;
export type DeleteCgaRegistrantAffiliationMutationResult = Apollo.MutationResult<DeleteCgaRegistrantAffiliationMutation>;
export type DeleteCgaRegistrantAffiliationMutationOptions = Apollo.BaseMutationOptions<DeleteCgaRegistrantAffiliationMutation, DeleteCgaRegistrantAffiliationMutationVariables>;
export const UpdateCgaRegistrantAffiliationDocument = gql`
    mutation UpdateCGARegistrantAffiliation($id: ID!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  updateCGARegistrantAffiliation(
    id: $id
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type UpdateCgaRegistrantAffiliationMutationFn = Apollo.MutationFunction<UpdateCgaRegistrantAffiliationMutation, UpdateCgaRegistrantAffiliationMutationVariables>;

/**
 * __useUpdateCgaRegistrantAffiliationMutation__
 *
 * To run a mutation, you first call `useUpdateCgaRegistrantAffiliationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgaRegistrantAffiliationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgaRegistrantAffiliationMutation, { data, loading, error }] = useUpdateCgaRegistrantAffiliationMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgaRegistrantAffiliationMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgaRegistrantAffiliationMutation, UpdateCgaRegistrantAffiliationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgaRegistrantAffiliationMutation, UpdateCgaRegistrantAffiliationMutationVariables>(UpdateCgaRegistrantAffiliationDocument, options);
      }
export type UpdateCgaRegistrantAffiliationMutationHookResult = ReturnType<typeof useUpdateCgaRegistrantAffiliationMutation>;
export type UpdateCgaRegistrantAffiliationMutationResult = Apollo.MutationResult<UpdateCgaRegistrantAffiliationMutation>;
export type UpdateCgaRegistrantAffiliationMutationOptions = Apollo.BaseMutationOptions<UpdateCgaRegistrantAffiliationMutation, UpdateCgaRegistrantAffiliationMutationVariables>;
export const CreateCgaSharedAreaDocument = gql`
    mutation CreateCgaSharedArea($desc: String!, $order: Int!, $valid_flg: Boolean!) {
  createCGASharedArea(desc: $desc, order: $order, valid_flg: $valid_flg) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type CreateCgaSharedAreaMutationFn = Apollo.MutationFunction<CreateCgaSharedAreaMutation, CreateCgaSharedAreaMutationVariables>;

/**
 * __useCreateCgaSharedAreaMutation__
 *
 * To run a mutation, you first call `useCreateCgaSharedAreaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgaSharedAreaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgaSharedAreaMutation, { data, loading, error }] = useCreateCgaSharedAreaMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgaSharedAreaMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgaSharedAreaMutation, CreateCgaSharedAreaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgaSharedAreaMutation, CreateCgaSharedAreaMutationVariables>(CreateCgaSharedAreaDocument, options);
      }
export type CreateCgaSharedAreaMutationHookResult = ReturnType<typeof useCreateCgaSharedAreaMutation>;
export type CreateCgaSharedAreaMutationResult = Apollo.MutationResult<CreateCgaSharedAreaMutation>;
export type CreateCgaSharedAreaMutationOptions = Apollo.BaseMutationOptions<CreateCgaSharedAreaMutation, CreateCgaSharedAreaMutationVariables>;
export const DeleteCgaSharedAreaDocument = gql`
    mutation DeleteCgaSharedArea($id: ID!) {
  deleteCGASharedArea(id: $id) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type DeleteCgaSharedAreaMutationFn = Apollo.MutationFunction<DeleteCgaSharedAreaMutation, DeleteCgaSharedAreaMutationVariables>;

/**
 * __useDeleteCgaSharedAreaMutation__
 *
 * To run a mutation, you first call `useDeleteCgaSharedAreaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgaSharedAreaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgaSharedAreaMutation, { data, loading, error }] = useDeleteCgaSharedAreaMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgaSharedAreaMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgaSharedAreaMutation, DeleteCgaSharedAreaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgaSharedAreaMutation, DeleteCgaSharedAreaMutationVariables>(DeleteCgaSharedAreaDocument, options);
      }
export type DeleteCgaSharedAreaMutationHookResult = ReturnType<typeof useDeleteCgaSharedAreaMutation>;
export type DeleteCgaSharedAreaMutationResult = Apollo.MutationResult<DeleteCgaSharedAreaMutation>;
export type DeleteCgaSharedAreaMutationOptions = Apollo.BaseMutationOptions<DeleteCgaSharedAreaMutation, DeleteCgaSharedAreaMutationVariables>;
export const UpdateCgaSharedAreaDocument = gql`
    mutation UpdateCGASharedArea($id: ID!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  updateCGASharedArea(id: $id, desc: $desc, order: $order, valid_flg: $valid_flg) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type UpdateCgaSharedAreaMutationFn = Apollo.MutationFunction<UpdateCgaSharedAreaMutation, UpdateCgaSharedAreaMutationVariables>;

/**
 * __useUpdateCgaSharedAreaMutation__
 *
 * To run a mutation, you first call `useUpdateCgaSharedAreaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgaSharedAreaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgaSharedAreaMutation, { data, loading, error }] = useUpdateCgaSharedAreaMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgaSharedAreaMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgaSharedAreaMutation, UpdateCgaSharedAreaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgaSharedAreaMutation, UpdateCgaSharedAreaMutationVariables>(UpdateCgaSharedAreaDocument, options);
      }
export type UpdateCgaSharedAreaMutationHookResult = ReturnType<typeof useUpdateCgaSharedAreaMutation>;
export type UpdateCgaSharedAreaMutationResult = Apollo.MutationResult<UpdateCgaSharedAreaMutation>;
export type UpdateCgaSharedAreaMutationOptions = Apollo.BaseMutationOptions<UpdateCgaSharedAreaMutation, UpdateCgaSharedAreaMutationVariables>;
export const CreateCgaViewingRestrictionDocument = gql`
    mutation CreateCgaViewingRestriction($desc: String!, $order: Int!, $valid_flg: Boolean!) {
  createCGAViewingRestriction(desc: $desc, order: $order, valid_flg: $valid_flg) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type CreateCgaViewingRestrictionMutationFn = Apollo.MutationFunction<CreateCgaViewingRestrictionMutation, CreateCgaViewingRestrictionMutationVariables>;

/**
 * __useCreateCgaViewingRestrictionMutation__
 *
 * To run a mutation, you first call `useCreateCgaViewingRestrictionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCgaViewingRestrictionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCgaViewingRestrictionMutation, { data, loading, error }] = useCreateCgaViewingRestrictionMutation({
 *   variables: {
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateCgaViewingRestrictionMutation(baseOptions?: Apollo.MutationHookOptions<CreateCgaViewingRestrictionMutation, CreateCgaViewingRestrictionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCgaViewingRestrictionMutation, CreateCgaViewingRestrictionMutationVariables>(CreateCgaViewingRestrictionDocument, options);
      }
export type CreateCgaViewingRestrictionMutationHookResult = ReturnType<typeof useCreateCgaViewingRestrictionMutation>;
export type CreateCgaViewingRestrictionMutationResult = Apollo.MutationResult<CreateCgaViewingRestrictionMutation>;
export type CreateCgaViewingRestrictionMutationOptions = Apollo.BaseMutationOptions<CreateCgaViewingRestrictionMutation, CreateCgaViewingRestrictionMutationVariables>;
export const DeleteCgaViewingRestrictionDocument = gql`
    mutation DeleteCgaViewingRestriction($id: ID!) {
  deleteCGAViewingRestriction(id: $id) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type DeleteCgaViewingRestrictionMutationFn = Apollo.MutationFunction<DeleteCgaViewingRestrictionMutation, DeleteCgaViewingRestrictionMutationVariables>;

/**
 * __useDeleteCgaViewingRestrictionMutation__
 *
 * To run a mutation, you first call `useDeleteCgaViewingRestrictionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCgaViewingRestrictionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCgaViewingRestrictionMutation, { data, loading, error }] = useDeleteCgaViewingRestrictionMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCgaViewingRestrictionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCgaViewingRestrictionMutation, DeleteCgaViewingRestrictionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCgaViewingRestrictionMutation, DeleteCgaViewingRestrictionMutationVariables>(DeleteCgaViewingRestrictionDocument, options);
      }
export type DeleteCgaViewingRestrictionMutationHookResult = ReturnType<typeof useDeleteCgaViewingRestrictionMutation>;
export type DeleteCgaViewingRestrictionMutationResult = Apollo.MutationResult<DeleteCgaViewingRestrictionMutation>;
export type DeleteCgaViewingRestrictionMutationOptions = Apollo.BaseMutationOptions<DeleteCgaViewingRestrictionMutation, DeleteCgaViewingRestrictionMutationVariables>;
export const UpdateCgaViewingRestrictionDocument = gql`
    mutation UpdateCGAViewingRestriction($id: ID!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  updateCGAViewingRestriction(
    id: $id
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    desc
    order
    valid_flg
  }
}
    `;
export type UpdateCgaViewingRestrictionMutationFn = Apollo.MutationFunction<UpdateCgaViewingRestrictionMutation, UpdateCgaViewingRestrictionMutationVariables>;

/**
 * __useUpdateCgaViewingRestrictionMutation__
 *
 * To run a mutation, you first call `useUpdateCgaViewingRestrictionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCgaViewingRestrictionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCgaViewingRestrictionMutation, { data, loading, error }] = useUpdateCgaViewingRestrictionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateCgaViewingRestrictionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCgaViewingRestrictionMutation, UpdateCgaViewingRestrictionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCgaViewingRestrictionMutation, UpdateCgaViewingRestrictionMutationVariables>(UpdateCgaViewingRestrictionDocument, options);
      }
export type UpdateCgaViewingRestrictionMutationHookResult = ReturnType<typeof useUpdateCgaViewingRestrictionMutation>;
export type UpdateCgaViewingRestrictionMutationResult = Apollo.MutationResult<UpdateCgaViewingRestrictionMutation>;
export type UpdateCgaViewingRestrictionMutationOptions = Apollo.BaseMutationOptions<UpdateCgaViewingRestrictionMutation, UpdateCgaViewingRestrictionMutationVariables>;
export const CreateSystemMailTemplateDocument = gql`
    mutation CreateSystemMailTemplate($code: CodeMailTemplate!, $subject_tpl: String!, $body_tpl: String!, $from_mail: String, $bcc_mail: String, $valid_flg: Boolean!) {
  createSystemMailTemplate(
    code: $code
    subject_tpl: $subject_tpl
    body_tpl: $body_tpl
    from_mail: $from_mail
    bcc_mail: $bcc_mail
    valid_flg: $valid_flg
  ) {
    __typename
    id
    code
    subject_tpl
    body_tpl
    from_mail
    bcc_mail
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type CreateSystemMailTemplateMutationFn = Apollo.MutationFunction<CreateSystemMailTemplateMutation, CreateSystemMailTemplateMutationVariables>;

/**
 * __useCreateSystemMailTemplateMutation__
 *
 * To run a mutation, you first call `useCreateSystemMailTemplateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSystemMailTemplateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSystemMailTemplateMutation, { data, loading, error }] = useCreateSystemMailTemplateMutation({
 *   variables: {
 *      code: // value for 'code'
 *      subject_tpl: // value for 'subject_tpl'
 *      body_tpl: // value for 'body_tpl'
 *      from_mail: // value for 'from_mail'
 *      bcc_mail: // value for 'bcc_mail'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateSystemMailTemplateMutation(baseOptions?: Apollo.MutationHookOptions<CreateSystemMailTemplateMutation, CreateSystemMailTemplateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSystemMailTemplateMutation, CreateSystemMailTemplateMutationVariables>(CreateSystemMailTemplateDocument, options);
      }
export type CreateSystemMailTemplateMutationHookResult = ReturnType<typeof useCreateSystemMailTemplateMutation>;
export type CreateSystemMailTemplateMutationResult = Apollo.MutationResult<CreateSystemMailTemplateMutation>;
export type CreateSystemMailTemplateMutationOptions = Apollo.BaseMutationOptions<CreateSystemMailTemplateMutation, CreateSystemMailTemplateMutationVariables>;
export const DeleteSystemMailTemplateDocument = gql`
    mutation DeleteSystemMailTemplate($id: ID!) {
  deleteSystemMailTemplate(id: $id) {
    __typename
    id
    code
    subject_tpl
    body_tpl
    from_mail
    bcc_mail
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type DeleteSystemMailTemplateMutationFn = Apollo.MutationFunction<DeleteSystemMailTemplateMutation, DeleteSystemMailTemplateMutationVariables>;

/**
 * __useDeleteSystemMailTemplateMutation__
 *
 * To run a mutation, you first call `useDeleteSystemMailTemplateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSystemMailTemplateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSystemMailTemplateMutation, { data, loading, error }] = useDeleteSystemMailTemplateMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteSystemMailTemplateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSystemMailTemplateMutation, DeleteSystemMailTemplateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteSystemMailTemplateMutation, DeleteSystemMailTemplateMutationVariables>(DeleteSystemMailTemplateDocument, options);
      }
export type DeleteSystemMailTemplateMutationHookResult = ReturnType<typeof useDeleteSystemMailTemplateMutation>;
export type DeleteSystemMailTemplateMutationResult = Apollo.MutationResult<DeleteSystemMailTemplateMutation>;
export type DeleteSystemMailTemplateMutationOptions = Apollo.BaseMutationOptions<DeleteSystemMailTemplateMutation, DeleteSystemMailTemplateMutationVariables>;
export const UpdateSystemMailTemplateDocument = gql`
    mutation UpdateSystemMailTemplate($id: ID!, $code: CodeMailTemplate!, $subject_tpl: String!, $body_tpl: String!, $from_mail: String, $bcc_mail: String, $valid_flg: Boolean!) {
  updateSystemMailTemplate(
    id: $id
    code: $code
    subject_tpl: $subject_tpl
    body_tpl: $body_tpl
    from_mail: $from_mail
    bcc_mail: $bcc_mail
    valid_flg: $valid_flg
  ) {
    __typename
    id
    code
    subject_tpl
    body_tpl
    from_mail
    bcc_mail
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type UpdateSystemMailTemplateMutationFn = Apollo.MutationFunction<UpdateSystemMailTemplateMutation, UpdateSystemMailTemplateMutationVariables>;

/**
 * __useUpdateSystemMailTemplateMutation__
 *
 * To run a mutation, you first call `useUpdateSystemMailTemplateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSystemMailTemplateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSystemMailTemplateMutation, { data, loading, error }] = useUpdateSystemMailTemplateMutation({
 *   variables: {
 *      id: // value for 'id'
 *      code: // value for 'code'
 *      subject_tpl: // value for 'subject_tpl'
 *      body_tpl: // value for 'body_tpl'
 *      from_mail: // value for 'from_mail'
 *      bcc_mail: // value for 'bcc_mail'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateSystemMailTemplateMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSystemMailTemplateMutation, UpdateSystemMailTemplateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSystemMailTemplateMutation, UpdateSystemMailTemplateMutationVariables>(UpdateSystemMailTemplateDocument, options);
      }
export type UpdateSystemMailTemplateMutationHookResult = ReturnType<typeof useUpdateSystemMailTemplateMutation>;
export type UpdateSystemMailTemplateMutationResult = Apollo.MutationResult<UpdateSystemMailTemplateMutation>;
export type UpdateSystemMailTemplateMutationOptions = Apollo.BaseMutationOptions<UpdateSystemMailTemplateMutation, UpdateSystemMailTemplateMutationVariables>;
export const CreateSystemNoticeDocument = gql`
    mutation CreateSystemNotice($create_user_id: ID!, $message: String!, $notice_date: DateTime!, $valid_flg: Boolean!) {
  createSystemNotice(
    create_user_id: $create_user_id
    message: $message
    notice_date: $notice_date
    valid_flg: $valid_flg
  ) {
    __typename
    id
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type CreateSystemNoticeMutationFn = Apollo.MutationFunction<CreateSystemNoticeMutation, CreateSystemNoticeMutationVariables>;

/**
 * __useCreateSystemNoticeMutation__
 *
 * To run a mutation, you first call `useCreateSystemNoticeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSystemNoticeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSystemNoticeMutation, { data, loading, error }] = useCreateSystemNoticeMutation({
 *   variables: {
 *      create_user_id: // value for 'create_user_id'
 *      message: // value for 'message'
 *      notice_date: // value for 'notice_date'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateSystemNoticeMutation(baseOptions?: Apollo.MutationHookOptions<CreateSystemNoticeMutation, CreateSystemNoticeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSystemNoticeMutation, CreateSystemNoticeMutationVariables>(CreateSystemNoticeDocument, options);
      }
export type CreateSystemNoticeMutationHookResult = ReturnType<typeof useCreateSystemNoticeMutation>;
export type CreateSystemNoticeMutationResult = Apollo.MutationResult<CreateSystemNoticeMutation>;
export type CreateSystemNoticeMutationOptions = Apollo.BaseMutationOptions<CreateSystemNoticeMutation, CreateSystemNoticeMutationVariables>;
export const DeleteSystemNoticeDocument = gql`
    mutation DeleteSystemNotice($id: ID!) {
  deleteSystemNotice(id: $id) {
    __typename
    id
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type DeleteSystemNoticeMutationFn = Apollo.MutationFunction<DeleteSystemNoticeMutation, DeleteSystemNoticeMutationVariables>;

/**
 * __useDeleteSystemNoticeMutation__
 *
 * To run a mutation, you first call `useDeleteSystemNoticeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSystemNoticeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSystemNoticeMutation, { data, loading, error }] = useDeleteSystemNoticeMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteSystemNoticeMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSystemNoticeMutation, DeleteSystemNoticeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteSystemNoticeMutation, DeleteSystemNoticeMutationVariables>(DeleteSystemNoticeDocument, options);
      }
export type DeleteSystemNoticeMutationHookResult = ReturnType<typeof useDeleteSystemNoticeMutation>;
export type DeleteSystemNoticeMutationResult = Apollo.MutationResult<DeleteSystemNoticeMutation>;
export type DeleteSystemNoticeMutationOptions = Apollo.BaseMutationOptions<DeleteSystemNoticeMutation, DeleteSystemNoticeMutationVariables>;
export const UpdateSystemNoticeDocument = gql`
    mutation UpdateSystemNotice($id: ID!, $update_user_id: ID!, $message: String!, $notice_date: DateTime!, $valid_flg: Boolean!) {
  updateSystemNotice(
    id: $id
    update_user_id: $update_user_id
    message: $message
    notice_date: $notice_date
    valid_flg: $valid_flg
  ) {
    __typename
    id
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;
export type UpdateSystemNoticeMutationFn = Apollo.MutationFunction<UpdateSystemNoticeMutation, UpdateSystemNoticeMutationVariables>;

/**
 * __useUpdateSystemNoticeMutation__
 *
 * To run a mutation, you first call `useUpdateSystemNoticeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSystemNoticeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSystemNoticeMutation, { data, loading, error }] = useUpdateSystemNoticeMutation({
 *   variables: {
 *      id: // value for 'id'
 *      update_user_id: // value for 'update_user_id'
 *      message: // value for 'message'
 *      notice_date: // value for 'notice_date'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateSystemNoticeMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSystemNoticeMutation, UpdateSystemNoticeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSystemNoticeMutation, UpdateSystemNoticeMutationVariables>(UpdateSystemNoticeDocument, options);
      }
export type UpdateSystemNoticeMutationHookResult = ReturnType<typeof useUpdateSystemNoticeMutation>;
export type UpdateSystemNoticeMutationResult = Apollo.MutationResult<UpdateSystemNoticeMutation>;
export type UpdateSystemNoticeMutationOptions = Apollo.BaseMutationOptions<UpdateSystemNoticeMutation, UpdateSystemNoticeMutationVariables>;
export const CreateUserRoleCgAssetStoreDocument = gql`
    mutation CreateUserRoleCGAssetStore($role: RoleCGAssetStore!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  createUserRoleCGAssetStore(
    role: $role
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    role
    desc
    order
    valid_flg
  }
}
    `;
export type CreateUserRoleCgAssetStoreMutationFn = Apollo.MutationFunction<CreateUserRoleCgAssetStoreMutation, CreateUserRoleCgAssetStoreMutationVariables>;

/**
 * __useCreateUserRoleCgAssetStoreMutation__
 *
 * To run a mutation, you first call `useCreateUserRoleCgAssetStoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserRoleCgAssetStoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserRoleCgAssetStoreMutation, { data, loading, error }] = useCreateUserRoleCgAssetStoreMutation({
 *   variables: {
 *      role: // value for 'role'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useCreateUserRoleCgAssetStoreMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserRoleCgAssetStoreMutation, CreateUserRoleCgAssetStoreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserRoleCgAssetStoreMutation, CreateUserRoleCgAssetStoreMutationVariables>(CreateUserRoleCgAssetStoreDocument, options);
      }
export type CreateUserRoleCgAssetStoreMutationHookResult = ReturnType<typeof useCreateUserRoleCgAssetStoreMutation>;
export type CreateUserRoleCgAssetStoreMutationResult = Apollo.MutationResult<CreateUserRoleCgAssetStoreMutation>;
export type CreateUserRoleCgAssetStoreMutationOptions = Apollo.BaseMutationOptions<CreateUserRoleCgAssetStoreMutation, CreateUserRoleCgAssetStoreMutationVariables>;
export const DeleteUserRoleCgAssetStoreDocument = gql`
    mutation DeleteUserRoleCGAssetStore($id: ID!) {
  deleteUserRoleCGAssetStore(id: $id) {
    __typename
    id
    role
    desc
    order
    valid_flg
  }
}
    `;
export type DeleteUserRoleCgAssetStoreMutationFn = Apollo.MutationFunction<DeleteUserRoleCgAssetStoreMutation, DeleteUserRoleCgAssetStoreMutationVariables>;

/**
 * __useDeleteUserRoleCgAssetStoreMutation__
 *
 * To run a mutation, you first call `useDeleteUserRoleCgAssetStoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserRoleCgAssetStoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserRoleCgAssetStoreMutation, { data, loading, error }] = useDeleteUserRoleCgAssetStoreMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteUserRoleCgAssetStoreMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserRoleCgAssetStoreMutation, DeleteUserRoleCgAssetStoreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteUserRoleCgAssetStoreMutation, DeleteUserRoleCgAssetStoreMutationVariables>(DeleteUserRoleCgAssetStoreDocument, options);
      }
export type DeleteUserRoleCgAssetStoreMutationHookResult = ReturnType<typeof useDeleteUserRoleCgAssetStoreMutation>;
export type DeleteUserRoleCgAssetStoreMutationResult = Apollo.MutationResult<DeleteUserRoleCgAssetStoreMutation>;
export type DeleteUserRoleCgAssetStoreMutationOptions = Apollo.BaseMutationOptions<DeleteUserRoleCgAssetStoreMutation, DeleteUserRoleCgAssetStoreMutationVariables>;
export const UpdateUserRoleCgAssetStoreDocument = gql`
    mutation UpdateUserRoleCGAssetStore($id: ID!, $role: RoleCGAssetStore!, $desc: String!, $order: Int!, $valid_flg: Boolean!) {
  updateUserRoleCGAssetStore(
    id: $id
    role: $role
    desc: $desc
    order: $order
    valid_flg: $valid_flg
  ) {
    __typename
    id
    role
    desc
    order
    valid_flg
  }
}
    `;
export type UpdateUserRoleCgAssetStoreMutationFn = Apollo.MutationFunction<UpdateUserRoleCgAssetStoreMutation, UpdateUserRoleCgAssetStoreMutationVariables>;

/**
 * __useUpdateUserRoleCgAssetStoreMutation__
 *
 * To run a mutation, you first call `useUpdateUserRoleCgAssetStoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserRoleCgAssetStoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserRoleCgAssetStoreMutation, { data, loading, error }] = useUpdateUserRoleCgAssetStoreMutation({
 *   variables: {
 *      id: // value for 'id'
 *      role: // value for 'role'
 *      desc: // value for 'desc'
 *      order: // value for 'order'
 *      valid_flg: // value for 'valid_flg'
 *   },
 * });
 */
export function useUpdateUserRoleCgAssetStoreMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserRoleCgAssetStoreMutation, UpdateUserRoleCgAssetStoreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserRoleCgAssetStoreMutation, UpdateUserRoleCgAssetStoreMutationVariables>(UpdateUserRoleCgAssetStoreDocument, options);
      }
export type UpdateUserRoleCgAssetStoreMutationHookResult = ReturnType<typeof useUpdateUserRoleCgAssetStoreMutation>;
export type UpdateUserRoleCgAssetStoreMutationResult = Apollo.MutationResult<UpdateUserRoleCgAssetStoreMutation>;
export type UpdateUserRoleCgAssetStoreMutationOptions = Apollo.BaseMutationOptions<UpdateUserRoleCgAssetStoreMutation, UpdateUserRoleCgAssetStoreMutationVariables>;
export const GetApplyDownloadDocument = gql`
    query GetApplyDownload($id: ID!) {
  ApplyDownloadWithPresignedUrl(id: $id) {
    id
    cgAsset {
      id
      asset_id
      asset_name
    }
    manageUser {
      id
      name
    }
    status
    program_id
    program_name
    date_usage_start
    date_usage_end
    purpose_of_use_txt
    etc_txt
    applyUser {
      id
      name
      email
      regist_affili_code
      registrantAffiliation {
        desc
      }
      roleCGAssetStore {
        desc
      }
    }
    applyDownloadGlaciers {
      id
      ongoing_request
      expiry_date
      presigned_url
      file_name
    }
    removal_limit_date
    download_date
    created_at
  }
}
    `;

/**
 * __useGetApplyDownloadQuery__
 *
 * To run a query within a React component, call `useGetApplyDownloadQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplyDownloadQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplyDownloadQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetApplyDownloadQuery(baseOptions: Apollo.QueryHookOptions<GetApplyDownloadQuery, GetApplyDownloadQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetApplyDownloadQuery, GetApplyDownloadQueryVariables>(GetApplyDownloadDocument, options);
      }
export function useGetApplyDownloadLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplyDownloadQuery, GetApplyDownloadQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetApplyDownloadQuery, GetApplyDownloadQueryVariables>(GetApplyDownloadDocument, options);
        }
export type GetApplyDownloadQueryHookResult = ReturnType<typeof useGetApplyDownloadQuery>;
export type GetApplyDownloadLazyQueryHookResult = ReturnType<typeof useGetApplyDownloadLazyQuery>;
export type GetApplyDownloadQueryResult = Apollo.QueryResult<GetApplyDownloadQuery, GetApplyDownloadQueryVariables>;
export const GetApplyDownloadsApplyOrApprovalDocument = gql`
    query GetApplyDownloadsApplyOrApproval($apply_user_id: ID, $manage_user_id: ID, $first: Int!, $page: Int!, $order: String, $orderAsc: String, $section_adl: String, $searchTxt: String) {
  ApplyDownloadsApplyOrApproval(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: $order
    orderAsc: $orderAsc
    section_adl: $section_adl
    searchTxt: $searchTxt
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetApplyDownloadsApplyOrApprovalQuery__
 *
 * To run a query within a React component, call `useGetApplyDownloadsApplyOrApprovalQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplyDownloadsApplyOrApprovalQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplyDownloadsApplyOrApprovalQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      order: // value for 'order'
 *      orderAsc: // value for 'orderAsc'
 *      section_adl: // value for 'section_adl'
 *      searchTxt: // value for 'searchTxt'
 *   },
 * });
 */
export function useGetApplyDownloadsApplyOrApprovalQuery(baseOptions: Apollo.QueryHookOptions<GetApplyDownloadsApplyOrApprovalQuery, GetApplyDownloadsApplyOrApprovalQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetApplyDownloadsApplyOrApprovalQuery, GetApplyDownloadsApplyOrApprovalQueryVariables>(GetApplyDownloadsApplyOrApprovalDocument, options);
      }
export function useGetApplyDownloadsApplyOrApprovalLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplyDownloadsApplyOrApprovalQuery, GetApplyDownloadsApplyOrApprovalQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetApplyDownloadsApplyOrApprovalQuery, GetApplyDownloadsApplyOrApprovalQueryVariables>(GetApplyDownloadsApplyOrApprovalDocument, options);
        }
export type GetApplyDownloadsApplyOrApprovalQueryHookResult = ReturnType<typeof useGetApplyDownloadsApplyOrApprovalQuery>;
export type GetApplyDownloadsApplyOrApprovalLazyQueryHookResult = ReturnType<typeof useGetApplyDownloadsApplyOrApprovalLazyQuery>;
export type GetApplyDownloadsApplyOrApprovalQueryResult = Apollo.QueryResult<GetApplyDownloadsApplyOrApprovalQuery, GetApplyDownloadsApplyOrApprovalQueryVariables>;
export const GetApplyDownloadsApplyOrApprovalOrBoxDeliverDocument = gql`
    query GetApplyDownloadsApplyOrApprovalOrBoxDeliver($apply_user_id: ID, $manage_user_id: ID, $first: Int!, $page: Int!, $order: String, $orderAsc: String, $section_adl: String, $searchTxt: String) {
  ApplyDownloadsApplyOrApprovalOrBoxDeliver(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: $order
    orderAsc: $orderAsc
    section_adl: $section_adl
    searchTxt: $searchTxt
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery__
 *
 * To run a query within a React component, call `useGetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      order: // value for 'order'
 *      orderAsc: // value for 'orderAsc'
 *      section_adl: // value for 'section_adl'
 *      searchTxt: // value for 'searchTxt'
 *   },
 * });
 */
export function useGetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery(baseOptions: Apollo.QueryHookOptions<GetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery, GetApplyDownloadsApplyOrApprovalOrBoxDeliverQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery, GetApplyDownloadsApplyOrApprovalOrBoxDeliverQueryVariables>(GetApplyDownloadsApplyOrApprovalOrBoxDeliverDocument, options);
      }
export function useGetApplyDownloadsApplyOrApprovalOrBoxDeliverLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery, GetApplyDownloadsApplyOrApprovalOrBoxDeliverQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery, GetApplyDownloadsApplyOrApprovalOrBoxDeliverQueryVariables>(GetApplyDownloadsApplyOrApprovalOrBoxDeliverDocument, options);
        }
export type GetApplyDownloadsApplyOrApprovalOrBoxDeliverQueryHookResult = ReturnType<typeof useGetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery>;
export type GetApplyDownloadsApplyOrApprovalOrBoxDeliverLazyQueryHookResult = ReturnType<typeof useGetApplyDownloadsApplyOrApprovalOrBoxDeliverLazyQuery>;
export type GetApplyDownloadsApplyOrApprovalOrBoxDeliverQueryResult = Apollo.QueryResult<GetApplyDownloadsApplyOrApprovalOrBoxDeliverQuery, GetApplyDownloadsApplyOrApprovalOrBoxDeliverQueryVariables>;
export const GetApplyDownloadsOnlyApplyDocument = gql`
    query GetApplyDownloadsOnlyApply($apply_user_id: ID, $manage_user_id: ID, $first: Int!, $page: Int!, $order: String, $orderAsc: String, $section_adl: String, $searchTxt: String) {
  ApplyDownloadsOnlyApply(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: $order
    orderAsc: $orderAsc
    section_adl: $section_adl
    searchTxt: $searchTxt
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetApplyDownloadsOnlyApplyQuery__
 *
 * To run a query within a React component, call `useGetApplyDownloadsOnlyApplyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplyDownloadsOnlyApplyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplyDownloadsOnlyApplyQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      order: // value for 'order'
 *      orderAsc: // value for 'orderAsc'
 *      section_adl: // value for 'section_adl'
 *      searchTxt: // value for 'searchTxt'
 *   },
 * });
 */
export function useGetApplyDownloadsOnlyApplyQuery(baseOptions: Apollo.QueryHookOptions<GetApplyDownloadsOnlyApplyQuery, GetApplyDownloadsOnlyApplyQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetApplyDownloadsOnlyApplyQuery, GetApplyDownloadsOnlyApplyQueryVariables>(GetApplyDownloadsOnlyApplyDocument, options);
      }
export function useGetApplyDownloadsOnlyApplyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplyDownloadsOnlyApplyQuery, GetApplyDownloadsOnlyApplyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetApplyDownloadsOnlyApplyQuery, GetApplyDownloadsOnlyApplyQueryVariables>(GetApplyDownloadsOnlyApplyDocument, options);
        }
export type GetApplyDownloadsOnlyApplyQueryHookResult = ReturnType<typeof useGetApplyDownloadsOnlyApplyQuery>;
export type GetApplyDownloadsOnlyApplyLazyQueryHookResult = ReturnType<typeof useGetApplyDownloadsOnlyApplyLazyQuery>;
export type GetApplyDownloadsOnlyApplyQueryResult = Apollo.QueryResult<GetApplyDownloadsOnlyApplyQuery, GetApplyDownloadsOnlyApplyQueryVariables>;
export const GetApplyDownloadsWithDoneDocument = gql`
    query GetApplyDownloadsWithDone($apply_user_id: ID, $manage_user_id: ID, $first: Int!, $page: Int!, $order: String, $orderAsc: String, $section_adl: String, $searchTxt: String) {
  ApplyDownloadsWithDone(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: $order
    orderAsc: $orderAsc
    section_adl: $section_adl
    searchTxt: $searchTxt
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetApplyDownloadsWithDoneQuery__
 *
 * To run a query within a React component, call `useGetApplyDownloadsWithDoneQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplyDownloadsWithDoneQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplyDownloadsWithDoneQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      order: // value for 'order'
 *      orderAsc: // value for 'orderAsc'
 *      section_adl: // value for 'section_adl'
 *      searchTxt: // value for 'searchTxt'
 *   },
 * });
 */
export function useGetApplyDownloadsWithDoneQuery(baseOptions: Apollo.QueryHookOptions<GetApplyDownloadsWithDoneQuery, GetApplyDownloadsWithDoneQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetApplyDownloadsWithDoneQuery, GetApplyDownloadsWithDoneQueryVariables>(GetApplyDownloadsWithDoneDocument, options);
      }
export function useGetApplyDownloadsWithDoneLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplyDownloadsWithDoneQuery, GetApplyDownloadsWithDoneQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetApplyDownloadsWithDoneQuery, GetApplyDownloadsWithDoneQueryVariables>(GetApplyDownloadsWithDoneDocument, options);
        }
export type GetApplyDownloadsWithDoneQueryHookResult = ReturnType<typeof useGetApplyDownloadsWithDoneQuery>;
export type GetApplyDownloadsWithDoneLazyQueryHookResult = ReturnType<typeof useGetApplyDownloadsWithDoneLazyQuery>;
export type GetApplyDownloadsWithDoneQueryResult = Apollo.QueryResult<GetApplyDownloadsWithDoneQuery, GetApplyDownloadsWithDoneQueryVariables>;
export const GetSessionAndUserDocument = gql`
    query GetSessionAndUser($sessionToken: String!) {
  getSessionAndUser(sessionToken: $sessionToken) {
    expires
    sessionToken
    user {
      id
      name
      email
      emailVerified
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
      accounts {
        access_token
        expires_at
        id_token
        oauth_token
        oauth_token_secret
        provider
        providerAccountId
        refresh_token
        refresh_token_expires_in
        scope
        session_state
        token_type
        type
      }
      verificationTokens {
        identifier
        expires
        token
      }
    }
  }
}
    `;

/**
 * __useGetSessionAndUserQuery__
 *
 * To run a query within a React component, call `useGetSessionAndUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSessionAndUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSessionAndUserQuery({
 *   variables: {
 *      sessionToken: // value for 'sessionToken'
 *   },
 * });
 */
export function useGetSessionAndUserQuery(baseOptions: Apollo.QueryHookOptions<GetSessionAndUserQuery, GetSessionAndUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSessionAndUserQuery, GetSessionAndUserQueryVariables>(GetSessionAndUserDocument, options);
      }
export function useGetSessionAndUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSessionAndUserQuery, GetSessionAndUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSessionAndUserQuery, GetSessionAndUserQueryVariables>(GetSessionAndUserDocument, options);
        }
export type GetSessionAndUserQueryHookResult = ReturnType<typeof useGetSessionAndUserQuery>;
export type GetSessionAndUserLazyQueryHookResult = ReturnType<typeof useGetSessionAndUserLazyQuery>;
export type GetSessionAndUserQueryResult = Apollo.QueryResult<GetSessionAndUserQuery, GetSessionAndUserQueryVariables>;
export const GetUserByAccountDocument = gql`
    query GetUserByAccount($input: GetUserByAccountInput!) {
  getUserByAccount(input: $input) {
    id
    name
    email
    emailVerified
    registrantAffiliation {
      id
      desc
    }
    regist_affili_code
    roleCGAssetStore {
      id
      desc
      role
      valid_flg
    }
    accounts {
      access_token
      expires_at
      id_token
      oauth_token
      oauth_token_secret
      provider
      providerAccountId
      refresh_token
      refresh_token_expires_in
      scope
      session_state
      token_type
      type
    }
    sessions {
      expires
      sessionToken
    }
    verificationTokens {
      identifier
      expires
      token
    }
  }
}
    `;

/**
 * __useGetUserByAccountQuery__
 *
 * To run a query within a React component, call `useGetUserByAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserByAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserByAccountQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetUserByAccountQuery(baseOptions: Apollo.QueryHookOptions<GetUserByAccountQuery, GetUserByAccountQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserByAccountQuery, GetUserByAccountQueryVariables>(GetUserByAccountDocument, options);
      }
export function useGetUserByAccountLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserByAccountQuery, GetUserByAccountQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserByAccountQuery, GetUserByAccountQueryVariables>(GetUserByAccountDocument, options);
        }
export type GetUserByAccountQueryHookResult = ReturnType<typeof useGetUserByAccountQuery>;
export type GetUserByAccountLazyQueryHookResult = ReturnType<typeof useGetUserByAccountLazyQuery>;
export type GetUserByAccountQueryResult = Apollo.QueryResult<GetUserByAccountQuery, GetUserByAccountQueryVariables>;
export const GetUserByEmailDocument = gql`
    query GetUserByEmail($email: String!) {
  getUserByEmail(email: $email) {
    id
    name
    email
    emailVerified
    registrantAffiliation {
      id
      desc
    }
    regist_affili_code
    roleCGAssetStore {
      id
      desc
      role
      valid_flg
    }
    accounts {
      access_token
      expires_at
      id_token
      oauth_token
      oauth_token_secret
      provider
      providerAccountId
      refresh_token
      refresh_token_expires_in
      scope
      session_state
      token_type
      type
    }
    sessions {
      expires
      sessionToken
    }
    verificationTokens {
      identifier
      expires
      token
    }
  }
}
    `;

/**
 * __useGetUserByEmailQuery__
 *
 * To run a query within a React component, call `useGetUserByEmailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserByEmailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserByEmailQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useGetUserByEmailQuery(baseOptions: Apollo.QueryHookOptions<GetUserByEmailQuery, GetUserByEmailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserByEmailQuery, GetUserByEmailQueryVariables>(GetUserByEmailDocument, options);
      }
export function useGetUserByEmailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserByEmailQuery, GetUserByEmailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserByEmailQuery, GetUserByEmailQueryVariables>(GetUserByEmailDocument, options);
        }
export type GetUserByEmailQueryHookResult = ReturnType<typeof useGetUserByEmailQuery>;
export type GetUserByEmailLazyQueryHookResult = ReturnType<typeof useGetUserByEmailLazyQuery>;
export type GetUserByEmailQueryResult = Apollo.QueryResult<GetUserByEmailQuery, GetUserByEmailQueryVariables>;
export const UseVerificationTokenDocument = gql`
    query UseVerificationToken($input: UseVerificationTokenInput!) {
  useVerificationToken(input: $input) {
    identifier
    expires
    token
    user {
      id
      name
      email
      emailVerified
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
      accounts {
        access_token
        expires_at
        id_token
        oauth_token
        oauth_token_secret
        provider
        providerAccountId
        refresh_token
        refresh_token_expires_in
        scope
        session_state
        token_type
        type
      }
      sessions {
        expires
        sessionToken
      }
    }
  }
}
    `;

/**
 * __useUseVerificationTokenQuery__
 *
 * To run a query within a React component, call `useUseVerificationTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useUseVerificationTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUseVerificationTokenQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUseVerificationTokenQuery(baseOptions: Apollo.QueryHookOptions<UseVerificationTokenQuery, UseVerificationTokenQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UseVerificationTokenQuery, UseVerificationTokenQueryVariables>(UseVerificationTokenDocument, options);
      }
export function useUseVerificationTokenLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UseVerificationTokenQuery, UseVerificationTokenQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UseVerificationTokenQuery, UseVerificationTokenQueryVariables>(UseVerificationTokenDocument, options);
        }
export type UseVerificationTokenQueryHookResult = ReturnType<typeof useUseVerificationTokenQuery>;
export type UseVerificationTokenLazyQueryHookResult = ReturnType<typeof useUseVerificationTokenLazyQuery>;
export type UseVerificationTokenQueryResult = Apollo.QueryResult<UseVerificationTokenQuery, UseVerificationTokenQueryVariables>;
export const GetUserDocument = gql`
    query GetUser($id: ID!) {
  getUser(id: $id) {
    id
    name
    email
    emailVerified
    registrantAffiliation {
      id
      desc
    }
    regist_affili_code
    roleCGAssetStore {
      id
      desc
      role
      valid_flg
    }
    accounts {
      access_token
      expires_at
      id_token
      oauth_token
      oauth_token_secret
      provider
      providerAccountId
      refresh_token
      refresh_token_expires_in
      scope
      session_state
      token_type
      type
    }
    sessions {
      expires
      sessionToken
    }
    verificationTokens {
      identifier
      expires
      token
    }
  }
}
    `;

/**
 * __useGetUserQuery__
 *
 * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetUserQuery(baseOptions: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);
      }
export function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);
        }
export type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;
export type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;
export type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;
export const GetUsersDocument = gql`
    query GetUsers($first: Int!, $page: Int!) {
  Users(
    first: $first
    page: $page
    orderBy: [{column: "created_at", order: DESC}, {column: "name", order: ASC}]
  ) {
    data {
      id
      name
      email
      emailVerified
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
      accounts {
        access_token
        expires_at
        id_token
        oauth_token
        oauth_token_secret
        provider
        providerAccountId
        refresh_token
        refresh_token_expires_in
        scope
        session_state
        token_type
        type
      }
      sessions {
        expires
        sessionToken
      }
      verificationTokens {
        identifier
        expires
        token
      }
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetUsersQuery__
 *
 * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetUsersQuery(baseOptions: Apollo.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, options);
      }
export function useGetUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, options);
        }
export type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;
export type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;
export type GetUsersQueryResult = Apollo.QueryResult<GetUsersQuery, GetUsersQueryVariables>;
export const UsersManagerValidDocument = gql`
    query UsersManagerValid {
  UsersManagerValid {
    id
    name
    email
  }
}
    `;

/**
 * __useUsersManagerValidQuery__
 *
 * To run a query within a React component, call `useUsersManagerValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useUsersManagerValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUsersManagerValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useUsersManagerValidQuery(baseOptions?: Apollo.QueryHookOptions<UsersManagerValidQuery, UsersManagerValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UsersManagerValidQuery, UsersManagerValidQueryVariables>(UsersManagerValidDocument, options);
      }
export function useUsersManagerValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersManagerValidQuery, UsersManagerValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UsersManagerValidQuery, UsersManagerValidQueryVariables>(UsersManagerValidDocument, options);
        }
export type UsersManagerValidQueryHookResult = ReturnType<typeof useUsersManagerValidQuery>;
export type UsersManagerValidLazyQueryHookResult = ReturnType<typeof useUsersManagerValidLazyQuery>;
export type UsersManagerValidQueryResult = Apollo.QueryResult<UsersManagerValidQuery, UsersManagerValidQueryVariables>;
export const GetCgAssetUploadDirDocument = gql`
    query GetCGAssetUploadDir($id: ID!) {
  CGAssetUploadDir(id: $id) {
    id
    base_path
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgAssetUploadDirQuery__
 *
 * To run a query within a React component, call `useGetCgAssetUploadDirQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetUploadDirQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetUploadDirQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgAssetUploadDirQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetUploadDirQuery, GetCgAssetUploadDirQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetUploadDirQuery, GetCgAssetUploadDirQueryVariables>(GetCgAssetUploadDirDocument, options);
      }
export function useGetCgAssetUploadDirLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetUploadDirQuery, GetCgAssetUploadDirQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetUploadDirQuery, GetCgAssetUploadDirQueryVariables>(GetCgAssetUploadDirDocument, options);
        }
export type GetCgAssetUploadDirQueryHookResult = ReturnType<typeof useGetCgAssetUploadDirQuery>;
export type GetCgAssetUploadDirLazyQueryHookResult = ReturnType<typeof useGetCgAssetUploadDirLazyQuery>;
export type GetCgAssetUploadDirQueryResult = Apollo.QueryResult<GetCgAssetUploadDirQuery, GetCgAssetUploadDirQueryVariables>;
export const GetCgAssetUploadDirsDocument = gql`
    query GetCGAssetUploadDirs($first: Int!, $page: Int!) {
  CGAssetUploadDirs(first: $first, page: $page) {
    data {
      id
      base_path
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetUploadDirsQuery__
 *
 * To run a query within a React component, call `useGetCgAssetUploadDirsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetUploadDirsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetUploadDirsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgAssetUploadDirsQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetUploadDirsQuery, GetCgAssetUploadDirsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetUploadDirsQuery, GetCgAssetUploadDirsQueryVariables>(GetCgAssetUploadDirsDocument, options);
      }
export function useGetCgAssetUploadDirsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetUploadDirsQuery, GetCgAssetUploadDirsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetUploadDirsQuery, GetCgAssetUploadDirsQueryVariables>(GetCgAssetUploadDirsDocument, options);
        }
export type GetCgAssetUploadDirsQueryHookResult = ReturnType<typeof useGetCgAssetUploadDirsQuery>;
export type GetCgAssetUploadDirsLazyQueryHookResult = ReturnType<typeof useGetCgAssetUploadDirsLazyQuery>;
export type GetCgAssetUploadDirsQueryResult = Apollo.QueryResult<GetCgAssetUploadDirsQuery, GetCgAssetUploadDirsQueryVariables>;
export const GetCgAssetUploadDirsValidDocument = gql`
    query GetCGAssetUploadDirsValid {
  CGAssetUploadDirsValid {
    base_path
    id
  }
}
    `;

/**
 * __useGetCgAssetUploadDirsValidQuery__
 *
 * To run a query within a React component, call `useGetCgAssetUploadDirsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetUploadDirsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetUploadDirsValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgAssetUploadDirsValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgAssetUploadDirsValidQuery, GetCgAssetUploadDirsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetUploadDirsValidQuery, GetCgAssetUploadDirsValidQueryVariables>(GetCgAssetUploadDirsValidDocument, options);
      }
export function useGetCgAssetUploadDirsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetUploadDirsValidQuery, GetCgAssetUploadDirsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetUploadDirsValidQuery, GetCgAssetUploadDirsValidQueryVariables>(GetCgAssetUploadDirsValidDocument, options);
        }
export type GetCgAssetUploadDirsValidQueryHookResult = ReturnType<typeof useGetCgAssetUploadDirsValidQuery>;
export type GetCgAssetUploadDirsValidLazyQueryHookResult = ReturnType<typeof useGetCgAssetUploadDirsValidLazyQuery>;
export type GetCgAssetUploadDirsValidQueryResult = Apollo.QueryResult<GetCgAssetUploadDirsValidQuery, GetCgAssetUploadDirsValidQueryVariables>;
export const GetCgaBroadcastingRightDocument = gql`
    query GetCGABroadcastingRight($id: ID!) {
  CGABroadcastingRight(id: $id) {
    id
    desc
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgaBroadcastingRightQuery__
 *
 * To run a query within a React component, call `useGetCgaBroadcastingRightQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaBroadcastingRightQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaBroadcastingRightQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgaBroadcastingRightQuery(baseOptions: Apollo.QueryHookOptions<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>(GetCgaBroadcastingRightDocument, options);
      }
export function useGetCgaBroadcastingRightLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>(GetCgaBroadcastingRightDocument, options);
        }
export type GetCgaBroadcastingRightQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightQuery>;
export type GetCgaBroadcastingRightLazyQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightLazyQuery>;
export type GetCgaBroadcastingRightQueryResult = Apollo.QueryResult<GetCgaBroadcastingRightQuery, GetCgaBroadcastingRightQueryVariables>;
export const GetCgaBroadcastingRightsDocument = gql`
    query GetCGABroadcastingRights($first: Int!, $page: Int!) {
  CGABroadcastingRights(first: $first, page: $page) {
    data {
      id
      desc
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgaBroadcastingRightsQuery__
 *
 * To run a query within a React component, call `useGetCgaBroadcastingRightsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaBroadcastingRightsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaBroadcastingRightsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgaBroadcastingRightsQuery(baseOptions: Apollo.QueryHookOptions<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>(GetCgaBroadcastingRightsDocument, options);
      }
export function useGetCgaBroadcastingRightsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>(GetCgaBroadcastingRightsDocument, options);
        }
export type GetCgaBroadcastingRightsQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightsQuery>;
export type GetCgaBroadcastingRightsLazyQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightsLazyQuery>;
export type GetCgaBroadcastingRightsQueryResult = Apollo.QueryResult<GetCgaBroadcastingRightsQuery, GetCgaBroadcastingRightsQueryVariables>;
export const GetCgaBroadcastingRightsValidDocument = gql`
    query GetCgaBroadcastingRightsValid {
  CGABroadcastingRightsValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgaBroadcastingRightsValidQuery__
 *
 * To run a query within a React component, call `useGetCgaBroadcastingRightsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaBroadcastingRightsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaBroadcastingRightsValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgaBroadcastingRightsValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>(GetCgaBroadcastingRightsValidDocument, options);
      }
export function useGetCgaBroadcastingRightsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>(GetCgaBroadcastingRightsValidDocument, options);
        }
export type GetCgaBroadcastingRightsValidQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightsValidQuery>;
export type GetCgaBroadcastingRightsValidLazyQueryHookResult = ReturnType<typeof useGetCgaBroadcastingRightsValidLazyQuery>;
export type GetCgaBroadcastingRightsValidQueryResult = Apollo.QueryResult<GetCgaBroadcastingRightsValidQuery, GetCgaBroadcastingRightsValidQueryVariables>;
export const GetCgaViewingRestrictionDocument = gql`
    query GetCgaViewingRestriction($id: ID!) {
  CGAViewingRestriction(id: $id) {
    id
    desc
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgaViewingRestrictionQuery__
 *
 * To run a query within a React component, call `useGetCgaViewingRestrictionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaViewingRestrictionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaViewingRestrictionQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgaViewingRestrictionQuery(baseOptions: Apollo.QueryHookOptions<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>(GetCgaViewingRestrictionDocument, options);
      }
export function useGetCgaViewingRestrictionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>(GetCgaViewingRestrictionDocument, options);
        }
export type GetCgaViewingRestrictionQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionQuery>;
export type GetCgaViewingRestrictionLazyQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionLazyQuery>;
export type GetCgaViewingRestrictionQueryResult = Apollo.QueryResult<GetCgaViewingRestrictionQuery, GetCgaViewingRestrictionQueryVariables>;
export const GetCgaViewingRestrictionsDocument = gql`
    query GetCgaViewingRestrictions($first: Int!, $page: Int!) {
  CGAViewingRestrictions(first: $first, page: $page) {
    data {
      id
      desc
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgaViewingRestrictionsQuery__
 *
 * To run a query within a React component, call `useGetCgaViewingRestrictionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaViewingRestrictionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaViewingRestrictionsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgaViewingRestrictionsQuery(baseOptions: Apollo.QueryHookOptions<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>(GetCgaViewingRestrictionsDocument, options);
      }
export function useGetCgaViewingRestrictionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>(GetCgaViewingRestrictionsDocument, options);
        }
export type GetCgaViewingRestrictionsQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionsQuery>;
export type GetCgaViewingRestrictionsLazyQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionsLazyQuery>;
export type GetCgaViewingRestrictionsQueryResult = Apollo.QueryResult<GetCgaViewingRestrictionsQuery, GetCgaViewingRestrictionsQueryVariables>;
export const GetCgaViewingRestrictionsValidDocument = gql`
    query GetCgaViewingRestrictionsValid {
  CGAViewingRestrictionsValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgaViewingRestrictionsValidQuery__
 *
 * To run a query within a React component, call `useGetCgaViewingRestrictionsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaViewingRestrictionsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaViewingRestrictionsValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgaViewingRestrictionsValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>(GetCgaViewingRestrictionsValidDocument, options);
      }
export function useGetCgaViewingRestrictionsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>(GetCgaViewingRestrictionsValidDocument, options);
        }
export type GetCgaViewingRestrictionsValidQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionsValidQuery>;
export type GetCgaViewingRestrictionsValidLazyQueryHookResult = ReturnType<typeof useGetCgaViewingRestrictionsValidLazyQuery>;
export type GetCgaViewingRestrictionsValidQueryResult = Apollo.QueryResult<GetCgaViewingRestrictionsValidQuery, GetCgaViewingRestrictionsValidQueryVariables>;
export const ExportCgAssetsDocument = gql`
    query ExportCgAssets {
  exportCGAssets {
    file_url
  }
}
    `;

/**
 * __useExportCgAssetsQuery__
 *
 * To run a query within a React component, call `useExportCgAssetsQuery` and pass it any options that fit your needs.
 * When your component renders, `useExportCgAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useExportCgAssetsQuery({
 *   variables: {
 *   },
 * });
 */
export function useExportCgAssetsQuery(baseOptions?: Apollo.QueryHookOptions<ExportCgAssetsQuery, ExportCgAssetsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ExportCgAssetsQuery, ExportCgAssetsQueryVariables>(ExportCgAssetsDocument, options);
      }
export function useExportCgAssetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ExportCgAssetsQuery, ExportCgAssetsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ExportCgAssetsQuery, ExportCgAssetsQueryVariables>(ExportCgAssetsDocument, options);
        }
export type ExportCgAssetsQueryHookResult = ReturnType<typeof useExportCgAssetsQuery>;
export type ExportCgAssetsLazyQueryHookResult = ReturnType<typeof useExportCgAssetsLazyQuery>;
export type ExportCgAssetsQueryResult = Apollo.QueryResult<ExportCgAssetsQuery, ExportCgAssetsQueryVariables>;
export const GetCgAssetDocument = gql`
    query GetCgAsset($id: ID!) {
  CGAsset(id: $id) {
    id
    asset_id
    asset_name
    assetCate {
      id
      code
      desc
    }
    asset_genre
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      id
      desc
    }
    viewingRestriction {
      id
      desc
    }
    broadcastingRight {
      id
      desc
    }
    sharedArea {
      id
      desc
    }
    rights_supplement
    asset_detail
    assetUploads {
      file_name
      url
      file_path
    }
    assetThumbs {
      thumb_file_name
      thumb_url
      thumb_file_path
    }
    assetTags {
      id
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistories {
      id
      created_at
      desc
      revisedUser {
        name
      }
    }
    reviews {
      id
      created_at
      review
      reviewedUser {
        id
        name
      }
      valid_flg
    }
    applyDownloads {
      id
      status
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
    }
    download_count
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;

/**
 * __useGetCgAssetQuery__
 *
 * To run a query within a React component, call `useGetCgAssetQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgAssetQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetQuery, GetCgAssetQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetQuery, GetCgAssetQueryVariables>(GetCgAssetDocument, options);
      }
export function useGetCgAssetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetQuery, GetCgAssetQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetQuery, GetCgAssetQueryVariables>(GetCgAssetDocument, options);
        }
export type GetCgAssetQueryHookResult = ReturnType<typeof useGetCgAssetQuery>;
export type GetCgAssetLazyQueryHookResult = ReturnType<typeof useGetCgAssetLazyQuery>;
export type GetCgAssetQueryResult = Apollo.QueryResult<GetCgAssetQuery, GetCgAssetQueryVariables>;
export const GetCgAssetsAllDocument = gql`
    query GetCgAssetsAll($first: Int!, $page: Int!, $search: CGAssetSearchFormValues) {
  CGAssetsAll(
    first: $first
    page: $page
    orderBy: [{column: "created_at", order: DESC}, {column: "asset_id", order: ASC}]
    search: $search
  ) {
    data {
      id
      asset_id
      asset_name
      assetCate {
        id
        code
        desc
      }
      asset_genre
      asset_app_prod
      asset_format
      asset_size
      asset_renderer
      program_id
      program_name
      registrantAffiliation {
        id
        desc
      }
      viewingRestriction {
        id
        desc
      }
      broadcastingRight {
        id
        desc
      }
      sharedArea {
        id
        desc
      }
      rights_supplement
      asset_detail
      assetUploads {
        file_name
        url
        file_path
      }
      assetThumbs {
        thumb_file_name
        thumb_url
        thumb_file_path
      }
      assetTags {
        id
        tag
        tag_add_edit_flg
        taggedUser {
          name
        }
        created_at
      }
      revisionHistories {
        id
        created_at
        desc
        revisedUser {
          name
        }
      }
      reviews {
        id
        created_at
        review
        reviewedUser {
          id
          name
        }
        valid_flg
      }
      download_count
      userCreate {
        id
        name
        email
        registrantAffiliation {
          id
          desc
        }
        regist_affili_code
        roleCGAssetStore {
          id
          desc
          role
          valid_flg
        }
      }
      userUpdate {
        id
        name
        email
        registrantAffiliation {
          id
          desc
        }
        regist_affili_code
        roleCGAssetStore {
          id
          desc
          role
          valid_flg
        }
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetsAllQuery__
 *
 * To run a query within a React component, call `useGetCgAssetsAllQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetsAllQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetsAllQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetCgAssetsAllQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetsAllQuery, GetCgAssetsAllQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetsAllQuery, GetCgAssetsAllQueryVariables>(GetCgAssetsAllDocument, options);
      }
export function useGetCgAssetsAllLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetsAllQuery, GetCgAssetsAllQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetsAllQuery, GetCgAssetsAllQueryVariables>(GetCgAssetsAllDocument, options);
        }
export type GetCgAssetsAllQueryHookResult = ReturnType<typeof useGetCgAssetsAllQuery>;
export type GetCgAssetsAllLazyQueryHookResult = ReturnType<typeof useGetCgAssetsAllLazyQuery>;
export type GetCgAssetsAllQueryResult = Apollo.QueryResult<GetCgAssetsAllQuery, GetCgAssetsAllQueryVariables>;
export const GetCgAssetsCreatedAllDocument = gql`
    query GetCgAssetsCreatedAll($create_user_id: ID!, $first: Int!, $page: Int!, $section: String, $order: String, $orderAsc: String, $searchTxt: String) {
  CGAssetsCreatedAll(
    create_user_id: $create_user_id
    first: $first
    page: $page
    orderBy: [{column: "c_g_assets.created_at", order: DESC}, {column: "c_g_assets.asset_id", order: ASC}]
    section: $section
    order: $order
    orderAsc: $orderAsc
    searchTxt: $searchTxt
  ) {
    data {
      id
      asset_id
      asset_name
      userCreate {
        name
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetsCreatedAllQuery__
 *
 * To run a query within a React component, call `useGetCgAssetsCreatedAllQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetsCreatedAllQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetsCreatedAllQuery({
 *   variables: {
 *      create_user_id: // value for 'create_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      section: // value for 'section'
 *      order: // value for 'order'
 *      orderAsc: // value for 'orderAsc'
 *      searchTxt: // value for 'searchTxt'
 *   },
 * });
 */
export function useGetCgAssetsCreatedAllQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetsCreatedAllQuery, GetCgAssetsCreatedAllQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetsCreatedAllQuery, GetCgAssetsCreatedAllQueryVariables>(GetCgAssetsCreatedAllDocument, options);
      }
export function useGetCgAssetsCreatedAllLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetsCreatedAllQuery, GetCgAssetsCreatedAllQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetsCreatedAllQuery, GetCgAssetsCreatedAllQueryVariables>(GetCgAssetsCreatedAllDocument, options);
        }
export type GetCgAssetsCreatedAllQueryHookResult = ReturnType<typeof useGetCgAssetsCreatedAllQuery>;
export type GetCgAssetsCreatedAllLazyQueryHookResult = ReturnType<typeof useGetCgAssetsCreatedAllLazyQuery>;
export type GetCgAssetsCreatedAllQueryResult = Apollo.QueryResult<GetCgAssetsCreatedAllQuery, GetCgAssetsCreatedAllQueryVariables>;
export const GetCgAssetsValidDocument = gql`
    query GetCgAssetsValid($first: Int!, $page: Int!, $search: CGAssetSearchFormValues) {
  CGAssetsValid(
    first: $first
    page: $page
    orderBy: [{column: "created_at", order: DESC}, {column: "asset_id", order: ASC}]
    search: $search
  ) {
    data {
      id
      asset_id
      asset_name
      assetCate {
        id
        code
        desc
      }
      asset_genre
      asset_app_prod
      asset_format
      asset_size
      asset_renderer
      program_id
      program_name
      registrantAffiliation {
        id
        desc
      }
      viewingRestriction {
        id
        desc
      }
      broadcastingRight {
        id
        desc
      }
      sharedArea {
        id
        desc
      }
      rights_supplement
      asset_detail
      assetUploads {
        file_name
        url
        file_path
      }
      assetThumbs {
        thumb_file_name
        thumb_url
        thumb_file_path
      }
      assetTags {
        id
        tag
        tag_add_edit_flg
        taggedUser {
          name
        }
        created_at
      }
      revisionHistories {
        id
        created_at
        desc
        revisedUser {
          name
        }
      }
      reviews {
        id
        created_at
        review
        reviewedUser {
          id
          name
        }
        valid_flg
      }
      download_count
      userCreate {
        id
        name
        email
        registrantAffiliation {
          id
          desc
        }
        regist_affili_code
        roleCGAssetStore {
          id
          desc
          role
          valid_flg
        }
      }
      userUpdate {
        id
        name
        email
        registrantAffiliation {
          id
          desc
        }
        regist_affili_code
        roleCGAssetStore {
          id
          desc
          role
          valid_flg
        }
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetsValidQuery__
 *
 * To run a query within a React component, call `useGetCgAssetsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetsValidQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetCgAssetsValidQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetsValidQuery, GetCgAssetsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetsValidQuery, GetCgAssetsValidQueryVariables>(GetCgAssetsValidDocument, options);
      }
export function useGetCgAssetsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetsValidQuery, GetCgAssetsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetsValidQuery, GetCgAssetsValidQueryVariables>(GetCgAssetsValidDocument, options);
        }
export type GetCgAssetsValidQueryHookResult = ReturnType<typeof useGetCgAssetsValidQuery>;
export type GetCgAssetsValidLazyQueryHookResult = ReturnType<typeof useGetCgAssetsValidLazyQuery>;
export type GetCgAssetsValidQueryResult = Apollo.QueryResult<GetCgAssetsValidQuery, GetCgAssetsValidQueryVariables>;
export const GetCgAssetCateDocument = gql`
    query GetCgAssetCate($id: ID!) {
  CGAssetCate(id: $id) {
    id
    code
    desc
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgAssetCateQuery__
 *
 * To run a query within a React component, call `useGetCgAssetCateQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetCateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetCateQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgAssetCateQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>(GetCgAssetCateDocument, options);
      }
export function useGetCgAssetCateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>(GetCgAssetCateDocument, options);
        }
export type GetCgAssetCateQueryHookResult = ReturnType<typeof useGetCgAssetCateQuery>;
export type GetCgAssetCateLazyQueryHookResult = ReturnType<typeof useGetCgAssetCateLazyQuery>;
export type GetCgAssetCateQueryResult = Apollo.QueryResult<GetCgAssetCateQuery, GetCgAssetCateQueryVariables>;
export const GetCgAssetCatesDocument = gql`
    query GetCgAssetCates($first: Int!, $page: Int!) {
  CGAssetCates(first: $first, page: $page) {
    data {
      id
      code
      desc
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetCatesQuery__
 *
 * To run a query within a React component, call `useGetCgAssetCatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetCatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetCatesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgAssetCatesQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>(GetCgAssetCatesDocument, options);
      }
export function useGetCgAssetCatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>(GetCgAssetCatesDocument, options);
        }
export type GetCgAssetCatesQueryHookResult = ReturnType<typeof useGetCgAssetCatesQuery>;
export type GetCgAssetCatesLazyQueryHookResult = ReturnType<typeof useGetCgAssetCatesLazyQuery>;
export type GetCgAssetCatesQueryResult = Apollo.QueryResult<GetCgAssetCatesQuery, GetCgAssetCatesQueryVariables>;
export const GetCgAssetCatesValidDocument = gql`
    query GetCgAssetCatesValid {
  CGAssetCatesValid {
    code
    desc
    id
  }
}
    `;

/**
 * __useGetCgAssetCatesValidQuery__
 *
 * To run a query within a React component, call `useGetCgAssetCatesValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetCatesValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetCatesValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgAssetCatesValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>(GetCgAssetCatesValidDocument, options);
      }
export function useGetCgAssetCatesValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>(GetCgAssetCatesValidDocument, options);
        }
export type GetCgAssetCatesValidQueryHookResult = ReturnType<typeof useGetCgAssetCatesValidQuery>;
export type GetCgAssetCatesValidLazyQueryHookResult = ReturnType<typeof useGetCgAssetCatesValidLazyQuery>;
export type GetCgAssetCatesValidQueryResult = Apollo.QueryResult<GetCgAssetCatesValidQuery, GetCgAssetCatesValidQueryVariables>;
export const GetCgAssetReviewDocument = gql`
    query GetCgAssetReview($id: ID!) {
  CGAssetReview(id: $id) {
    __typename
    id
    review
    cgAsset {
      id
      reviews {
        id
        review
        reviewedUser {
          id
          name
        }
        valid_flg
        created_at
      }
    }
    reviewedUser {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
  }
}
    `;

/**
 * __useGetCgAssetReviewQuery__
 *
 * To run a query within a React component, call `useGetCgAssetReviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetReviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetReviewQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgAssetReviewQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetReviewQuery, GetCgAssetReviewQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetReviewQuery, GetCgAssetReviewQueryVariables>(GetCgAssetReviewDocument, options);
      }
export function useGetCgAssetReviewLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetReviewQuery, GetCgAssetReviewQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetReviewQuery, GetCgAssetReviewQueryVariables>(GetCgAssetReviewDocument, options);
        }
export type GetCgAssetReviewQueryHookResult = ReturnType<typeof useGetCgAssetReviewQuery>;
export type GetCgAssetReviewLazyQueryHookResult = ReturnType<typeof useGetCgAssetReviewLazyQuery>;
export type GetCgAssetReviewQueryResult = Apollo.QueryResult<GetCgAssetReviewQuery, GetCgAssetReviewQueryVariables>;
export const GetCgAssetSearchAppProdDocument = gql`
    query GetCgAssetSearchAppProd($id: ID!) {
  CGAssetSearchAppProd(id: $id) {
    id
    code
    desc
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgAssetSearchAppProdQuery__
 *
 * To run a query within a React component, call `useGetCgAssetSearchAppProdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetSearchAppProdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetSearchAppProdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgAssetSearchAppProdQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetSearchAppProdQuery, GetCgAssetSearchAppProdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetSearchAppProdQuery, GetCgAssetSearchAppProdQueryVariables>(GetCgAssetSearchAppProdDocument, options);
      }
export function useGetCgAssetSearchAppProdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetSearchAppProdQuery, GetCgAssetSearchAppProdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetSearchAppProdQuery, GetCgAssetSearchAppProdQueryVariables>(GetCgAssetSearchAppProdDocument, options);
        }
export type GetCgAssetSearchAppProdQueryHookResult = ReturnType<typeof useGetCgAssetSearchAppProdQuery>;
export type GetCgAssetSearchAppProdLazyQueryHookResult = ReturnType<typeof useGetCgAssetSearchAppProdLazyQuery>;
export type GetCgAssetSearchAppProdQueryResult = Apollo.QueryResult<GetCgAssetSearchAppProdQuery, GetCgAssetSearchAppProdQueryVariables>;
export const GetCgAssetSearchAppProdsDocument = gql`
    query GetCgAssetSearchAppProds($first: Int!, $page: Int!) {
  CGAssetSearchAppProds(first: $first, page: $page) {
    data {
      id
      code
      desc
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetSearchAppProdsQuery__
 *
 * To run a query within a React component, call `useGetCgAssetSearchAppProdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetSearchAppProdsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetSearchAppProdsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgAssetSearchAppProdsQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetSearchAppProdsQuery, GetCgAssetSearchAppProdsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetSearchAppProdsQuery, GetCgAssetSearchAppProdsQueryVariables>(GetCgAssetSearchAppProdsDocument, options);
      }
export function useGetCgAssetSearchAppProdsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetSearchAppProdsQuery, GetCgAssetSearchAppProdsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetSearchAppProdsQuery, GetCgAssetSearchAppProdsQueryVariables>(GetCgAssetSearchAppProdsDocument, options);
        }
export type GetCgAssetSearchAppProdsQueryHookResult = ReturnType<typeof useGetCgAssetSearchAppProdsQuery>;
export type GetCgAssetSearchAppProdsLazyQueryHookResult = ReturnType<typeof useGetCgAssetSearchAppProdsLazyQuery>;
export type GetCgAssetSearchAppProdsQueryResult = Apollo.QueryResult<GetCgAssetSearchAppProdsQuery, GetCgAssetSearchAppProdsQueryVariables>;
export const GetCgAssetSearchAppProdsValidDocument = gql`
    query GetCgAssetSearchAppProdsValid {
  CGAssetSearchAppProdsValid {
    code
    desc
    id
  }
}
    `;

/**
 * __useGetCgAssetSearchAppProdsValidQuery__
 *
 * To run a query within a React component, call `useGetCgAssetSearchAppProdsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetSearchAppProdsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetSearchAppProdsValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgAssetSearchAppProdsValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgAssetSearchAppProdsValidQuery, GetCgAssetSearchAppProdsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetSearchAppProdsValidQuery, GetCgAssetSearchAppProdsValidQueryVariables>(GetCgAssetSearchAppProdsValidDocument, options);
      }
export function useGetCgAssetSearchAppProdsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetSearchAppProdsValidQuery, GetCgAssetSearchAppProdsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetSearchAppProdsValidQuery, GetCgAssetSearchAppProdsValidQueryVariables>(GetCgAssetSearchAppProdsValidDocument, options);
        }
export type GetCgAssetSearchAppProdsValidQueryHookResult = ReturnType<typeof useGetCgAssetSearchAppProdsValidQuery>;
export type GetCgAssetSearchAppProdsValidLazyQueryHookResult = ReturnType<typeof useGetCgAssetSearchAppProdsValidLazyQuery>;
export type GetCgAssetSearchAppProdsValidQueryResult = Apollo.QueryResult<GetCgAssetSearchAppProdsValidQuery, GetCgAssetSearchAppProdsValidQueryVariables>;
export const GetCgAssetSearchGenreDocument = gql`
    query GetCgAssetSearchGenre($id: ID!) {
  CGAssetSearchGenre(id: $id) {
    id
    code
    desc
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgAssetSearchGenreQuery__
 *
 * To run a query within a React component, call `useGetCgAssetSearchGenreQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetSearchGenreQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetSearchGenreQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgAssetSearchGenreQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetSearchGenreQuery, GetCgAssetSearchGenreQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetSearchGenreQuery, GetCgAssetSearchGenreQueryVariables>(GetCgAssetSearchGenreDocument, options);
      }
export function useGetCgAssetSearchGenreLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetSearchGenreQuery, GetCgAssetSearchGenreQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetSearchGenreQuery, GetCgAssetSearchGenreQueryVariables>(GetCgAssetSearchGenreDocument, options);
        }
export type GetCgAssetSearchGenreQueryHookResult = ReturnType<typeof useGetCgAssetSearchGenreQuery>;
export type GetCgAssetSearchGenreLazyQueryHookResult = ReturnType<typeof useGetCgAssetSearchGenreLazyQuery>;
export type GetCgAssetSearchGenreQueryResult = Apollo.QueryResult<GetCgAssetSearchGenreQuery, GetCgAssetSearchGenreQueryVariables>;
export const GetCgAssetSearchGenresDocument = gql`
    query GetCgAssetSearchGenres($first: Int!, $page: Int!) {
  CGAssetSearchGenres(first: $first, page: $page) {
    data {
      id
      code
      desc
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgAssetSearchGenresQuery__
 *
 * To run a query within a React component, call `useGetCgAssetSearchGenresQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetSearchGenresQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetSearchGenresQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgAssetSearchGenresQuery(baseOptions: Apollo.QueryHookOptions<GetCgAssetSearchGenresQuery, GetCgAssetSearchGenresQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetSearchGenresQuery, GetCgAssetSearchGenresQueryVariables>(GetCgAssetSearchGenresDocument, options);
      }
export function useGetCgAssetSearchGenresLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetSearchGenresQuery, GetCgAssetSearchGenresQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetSearchGenresQuery, GetCgAssetSearchGenresQueryVariables>(GetCgAssetSearchGenresDocument, options);
        }
export type GetCgAssetSearchGenresQueryHookResult = ReturnType<typeof useGetCgAssetSearchGenresQuery>;
export type GetCgAssetSearchGenresLazyQueryHookResult = ReturnType<typeof useGetCgAssetSearchGenresLazyQuery>;
export type GetCgAssetSearchGenresQueryResult = Apollo.QueryResult<GetCgAssetSearchGenresQuery, GetCgAssetSearchGenresQueryVariables>;
export const GetCgAssetSearchGenresValidDocument = gql`
    query GetCgAssetSearchGenresValid {
  CGAssetSearchGenresValid {
    code
    desc
    id
  }
}
    `;

/**
 * __useGetCgAssetSearchGenresValidQuery__
 *
 * To run a query within a React component, call `useGetCgAssetSearchGenresValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgAssetSearchGenresValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgAssetSearchGenresValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgAssetSearchGenresValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgAssetSearchGenresValidQuery, GetCgAssetSearchGenresValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgAssetSearchGenresValidQuery, GetCgAssetSearchGenresValidQueryVariables>(GetCgAssetSearchGenresValidDocument, options);
      }
export function useGetCgAssetSearchGenresValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgAssetSearchGenresValidQuery, GetCgAssetSearchGenresValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgAssetSearchGenresValidQuery, GetCgAssetSearchGenresValidQueryVariables>(GetCgAssetSearchGenresValidDocument, options);
        }
export type GetCgAssetSearchGenresValidQueryHookResult = ReturnType<typeof useGetCgAssetSearchGenresValidQuery>;
export type GetCgAssetSearchGenresValidLazyQueryHookResult = ReturnType<typeof useGetCgAssetSearchGenresValidLazyQuery>;
export type GetCgAssetSearchGenresValidQueryResult = Apollo.QueryResult<GetCgAssetSearchGenresValidQuery, GetCgAssetSearchGenresValidQueryVariables>;
export const GetCgaRegistrantAffiliationDocument = gql`
    query GetCgaRegistrantAffiliation($id: ID!) {
  CGARegistrantAffiliation(id: $id) {
    id
    desc
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgaRegistrantAffiliationQuery__
 *
 * To run a query within a React component, call `useGetCgaRegistrantAffiliationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaRegistrantAffiliationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaRegistrantAffiliationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgaRegistrantAffiliationQuery(baseOptions: Apollo.QueryHookOptions<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>(GetCgaRegistrantAffiliationDocument, options);
      }
export function useGetCgaRegistrantAffiliationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>(GetCgaRegistrantAffiliationDocument, options);
        }
export type GetCgaRegistrantAffiliationQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffiliationQuery>;
export type GetCgaRegistrantAffiliationLazyQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffiliationLazyQuery>;
export type GetCgaRegistrantAffiliationQueryResult = Apollo.QueryResult<GetCgaRegistrantAffiliationQuery, GetCgaRegistrantAffiliationQueryVariables>;
export const GetCgaRegistrantAffiliationsDocument = gql`
    query GetCgaRegistrantAffiliations($first: Int!, $page: Int!) {
  CGARegistrantAffiliations(first: $first, page: $page) {
    data {
      id
      desc
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgaRegistrantAffiliationsQuery__
 *
 * To run a query within a React component, call `useGetCgaRegistrantAffiliationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaRegistrantAffiliationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaRegistrantAffiliationsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgaRegistrantAffiliationsQuery(baseOptions: Apollo.QueryHookOptions<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>(GetCgaRegistrantAffiliationsDocument, options);
      }
export function useGetCgaRegistrantAffiliationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>(GetCgaRegistrantAffiliationsDocument, options);
        }
export type GetCgaRegistrantAffiliationsQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffiliationsQuery>;
export type GetCgaRegistrantAffiliationsLazyQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffiliationsLazyQuery>;
export type GetCgaRegistrantAffiliationsQueryResult = Apollo.QueryResult<GetCgaRegistrantAffiliationsQuery, GetCgaRegistrantAffiliationsQueryVariables>;
export const GetCgaRegistrantAffilliationsValidDocument = gql`
    query GetCgaRegistrantAffilliationsValid {
  CGARegistrantAffiliationsValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgaRegistrantAffilliationsValidQuery__
 *
 * To run a query within a React component, call `useGetCgaRegistrantAffilliationsValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaRegistrantAffilliationsValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaRegistrantAffilliationsValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgaRegistrantAffilliationsValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>(GetCgaRegistrantAffilliationsValidDocument, options);
      }
export function useGetCgaRegistrantAffilliationsValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>(GetCgaRegistrantAffilliationsValidDocument, options);
        }
export type GetCgaRegistrantAffilliationsValidQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffilliationsValidQuery>;
export type GetCgaRegistrantAffilliationsValidLazyQueryHookResult = ReturnType<typeof useGetCgaRegistrantAffilliationsValidLazyQuery>;
export type GetCgaRegistrantAffilliationsValidQueryResult = Apollo.QueryResult<GetCgaRegistrantAffilliationsValidQuery, GetCgaRegistrantAffilliationsValidQueryVariables>;
export const GetCgaSharedAreaDocument = gql`
    query GetCgaSharedArea($id: ID!) {
  CGASharedArea(id: $id) {
    id
    desc
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetCgaSharedAreaQuery__
 *
 * To run a query within a React component, call `useGetCgaSharedAreaQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaSharedAreaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaSharedAreaQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCgaSharedAreaQuery(baseOptions: Apollo.QueryHookOptions<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>(GetCgaSharedAreaDocument, options);
      }
export function useGetCgaSharedAreaLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>(GetCgaSharedAreaDocument, options);
        }
export type GetCgaSharedAreaQueryHookResult = ReturnType<typeof useGetCgaSharedAreaQuery>;
export type GetCgaSharedAreaLazyQueryHookResult = ReturnType<typeof useGetCgaSharedAreaLazyQuery>;
export type GetCgaSharedAreaQueryResult = Apollo.QueryResult<GetCgaSharedAreaQuery, GetCgaSharedAreaQueryVariables>;
export const GetCgaSharedAreasDocument = gql`
    query GetCgaSharedAreas($first: Int!, $page: Int!) {
  CGASharedAreas(first: $first, page: $page) {
    data {
      id
      desc
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetCgaSharedAreasQuery__
 *
 * To run a query within a React component, call `useGetCgaSharedAreasQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaSharedAreasQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaSharedAreasQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetCgaSharedAreasQuery(baseOptions: Apollo.QueryHookOptions<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>(GetCgaSharedAreasDocument, options);
      }
export function useGetCgaSharedAreasLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>(GetCgaSharedAreasDocument, options);
        }
export type GetCgaSharedAreasQueryHookResult = ReturnType<typeof useGetCgaSharedAreasQuery>;
export type GetCgaSharedAreasLazyQueryHookResult = ReturnType<typeof useGetCgaSharedAreasLazyQuery>;
export type GetCgaSharedAreasQueryResult = Apollo.QueryResult<GetCgaSharedAreasQuery, GetCgaSharedAreasQueryVariables>;
export const GetCgaSharedAreasValidDocument = gql`
    query GetCgaSharedAreasValid {
  CGASharedAreasValid {
    desc
    id
  }
}
    `;

/**
 * __useGetCgaSharedAreasValidQuery__
 *
 * To run a query within a React component, call `useGetCgaSharedAreasValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCgaSharedAreasValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCgaSharedAreasValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCgaSharedAreasValidQuery(baseOptions?: Apollo.QueryHookOptions<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>(GetCgaSharedAreasValidDocument, options);
      }
export function useGetCgaSharedAreasValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>(GetCgaSharedAreasValidDocument, options);
        }
export type GetCgaSharedAreasValidQueryHookResult = ReturnType<typeof useGetCgaSharedAreasValidQuery>;
export type GetCgaSharedAreasValidLazyQueryHookResult = ReturnType<typeof useGetCgaSharedAreasValidLazyQuery>;
export type GetCgaSharedAreasValidQueryResult = Apollo.QueryResult<GetCgaSharedAreasValidQuery, GetCgaSharedAreasValidQueryVariables>;
export const ApiGetCgAssetsDocument = gql`
    query ApiGetCgAssets($first: Int!, $page: Int!, $search: ApiCgAssetsSearchFormValues) {
  ApiCGAssetsValid(
    first: $first
    page: $page
    orderBy: [{column: "created_at", order: DESC}, {column: "asset_id", order: ASC}]
    search: $search
  ) {
    data {
      id
      asset_id
      asset_name
      assetCate {
        code
        desc
      }
      asset_genre
      asset_app_prod
      asset_format
      asset_size
      asset_renderer
      program_id
      program_name
      registrantAffiliation {
        desc
      }
      viewingRestriction {
        desc
      }
      broadcastingRight {
        desc
      }
      sharedArea {
        desc
      }
      rights_supplement
      asset_detail
      assetUploads {
        file_name
        url
        file_path
      }
      assetThumbs {
        thumb_file_name
        thumb_url
        thumb_file_path
      }
      assetTags {
        tag
        tag_add_edit_flg
        taggedUser {
          name
        }
        created_at
      }
      revisionHistories {
        created_at
        desc
        revisedUser {
          name
        }
      }
      reviews {
        created_at
        review
        reviewedUser {
          id
          name
        }
        valid_flg
      }
      download_count
      userCreate {
        name
      }
      userUpdate {
        name
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useApiGetCgAssetsQuery__
 *
 * To run a query within a React component, call `useApiGetCgAssetsQuery` and pass it any options that fit your needs.
 * When your component renders, `useApiGetCgAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApiGetCgAssetsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useApiGetCgAssetsQuery(baseOptions: Apollo.QueryHookOptions<ApiGetCgAssetsQuery, ApiGetCgAssetsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ApiGetCgAssetsQuery, ApiGetCgAssetsQueryVariables>(ApiGetCgAssetsDocument, options);
      }
export function useApiGetCgAssetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ApiGetCgAssetsQuery, ApiGetCgAssetsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ApiGetCgAssetsQuery, ApiGetCgAssetsQueryVariables>(ApiGetCgAssetsDocument, options);
        }
export type ApiGetCgAssetsQueryHookResult = ReturnType<typeof useApiGetCgAssetsQuery>;
export type ApiGetCgAssetsLazyQueryHookResult = ReturnType<typeof useApiGetCgAssetsLazyQuery>;
export type ApiGetCgAssetsQueryResult = Apollo.QueryResult<ApiGetCgAssetsQuery, ApiGetCgAssetsQueryVariables>;
export const CgAssetDetailClientDocument = gql`
    query CGAssetDetailClient($id: ID!, $apply_user_id: ID!) {
  CGAsset(id: $id) {
    id
    asset_id
    asset_name
    assetCate {
      id
      code
      desc
    }
    asset_genre
    asset_app_prod
    asset_format
    asset_size
    asset_renderer
    program_id
    program_name
    registrantAffiliation {
      id
      desc
    }
    viewingRestriction {
      id
      desc
    }
    broadcastingRight {
      id
      desc
    }
    sharedArea {
      id
      desc
    }
    rights_supplement
    asset_detail
    assetUploads {
      file_name
      url
      file_path
    }
    assetThumbs {
      thumb_file_name
      thumb_url
      thumb_file_path
    }
    assetTags {
      id
      tag
      tag_add_edit_flg
      taggedUser {
        name
      }
      created_at
    }
    revisionHistories {
      id
      created_at
      desc
      revisedUser {
        name
      }
    }
    reviews {
      id
      created_at
      review
      reviewedUser {
        id
        name
      }
      valid_flg
    }
    download_count
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    valid_flg
    created_at
    updated_at
  }
  CGAViewingRestrictionsValid {
    desc
    id
  }
  ApplyDownloadsBoxDeliverGlacierAll(
    apply_user_id: $apply_user_id
    asset_db_id: $id
  ) {
    id
    status
    applyDownloadGlaciers {
      id
      ongoing_request
      expiry_date
      presigned_url
      file_name
    }
  }
}
    `;

/**
 * __useCgAssetDetailClientQuery__
 *
 * To run a query within a React component, call `useCgAssetDetailClientQuery` and pass it any options that fit your needs.
 * When your component renders, `useCgAssetDetailClientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCgAssetDetailClientQuery({
 *   variables: {
 *      id: // value for 'id'
 *      apply_user_id: // value for 'apply_user_id'
 *   },
 * });
 */
export function useCgAssetDetailClientQuery(baseOptions: Apollo.QueryHookOptions<CgAssetDetailClientQuery, CgAssetDetailClientQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CgAssetDetailClientQuery, CgAssetDetailClientQueryVariables>(CgAssetDetailClientDocument, options);
      }
export function useCgAssetDetailClientLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CgAssetDetailClientQuery, CgAssetDetailClientQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CgAssetDetailClientQuery, CgAssetDetailClientQueryVariables>(CgAssetDetailClientDocument, options);
        }
export type CgAssetDetailClientQueryHookResult = ReturnType<typeof useCgAssetDetailClientQuery>;
export type CgAssetDetailClientLazyQueryHookResult = ReturnType<typeof useCgAssetDetailClientLazyQuery>;
export type CgAssetDetailClientQueryResult = Apollo.QueryResult<CgAssetDetailClientQuery, CgAssetDetailClientQueryVariables>;
export const CgAssetEditClientDocument = gql`
    query CGAssetEditClient {
  CGAssetCatesValid {
    code
    desc
    id
  }
  CGARegistrantAffiliationsValid {
    desc
    id
  }
  CGAViewingRestrictionsValid {
    desc
    id
  }
  CGABroadcastingRightsValid {
    desc
    id
  }
  CGASharedAreasValid {
    desc
    id
  }
  CGAssetUploadDirsValid {
    base_path
    id
  }
}
    `;

/**
 * __useCgAssetEditClientQuery__
 *
 * To run a query within a React component, call `useCgAssetEditClientQuery` and pass it any options that fit your needs.
 * When your component renders, `useCgAssetEditClientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCgAssetEditClientQuery({
 *   variables: {
 *   },
 * });
 */
export function useCgAssetEditClientQuery(baseOptions?: Apollo.QueryHookOptions<CgAssetEditClientQuery, CgAssetEditClientQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CgAssetEditClientQuery, CgAssetEditClientQueryVariables>(CgAssetEditClientDocument, options);
      }
export function useCgAssetEditClientLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CgAssetEditClientQuery, CgAssetEditClientQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CgAssetEditClientQuery, CgAssetEditClientQueryVariables>(CgAssetEditClientDocument, options);
        }
export type CgAssetEditClientQueryHookResult = ReturnType<typeof useCgAssetEditClientQuery>;
export type CgAssetEditClientLazyQueryHookResult = ReturnType<typeof useCgAssetEditClientLazyQuery>;
export type CgAssetEditClientQueryResult = Apollo.QueryResult<CgAssetEditClientQuery, CgAssetEditClientQueryVariables>;
export const CgAssetSearchClientDocument = gql`
    query CGAssetSearchClient($first: Int!, $valid: Boolean!) {
  CGAssetCatesValid {
    code
    desc
    id
  }
  CGAssetSearchGenresValid {
    code
    desc
    id
  }
  CGAssetSearchAppProdsValid {
    code
    desc
    id
  }
  CGAssetsInit(
    first: $first
    page: 1
    orderBy: [{column: "created_at", order: DESC}, {column: "asset_id", order: ASC}]
    valid: $valid
  ) {
    data {
      id
      asset_id
      asset_name
      assetCate {
        id
        code
        desc
      }
      asset_genre
      asset_app_prod
      asset_format
      asset_size
      asset_renderer
      program_id
      program_name
      registrantAffiliation {
        id
        desc
      }
      viewingRestriction {
        id
        desc
      }
      broadcastingRight {
        id
        desc
      }
      sharedArea {
        id
        desc
      }
      rights_supplement
      asset_detail
      assetUploads {
        file_name
        url
        file_path
      }
      assetThumbs {
        thumb_file_name
        thumb_url
        thumb_file_path
      }
      assetTags {
        id
        tag
        tag_add_edit_flg
        taggedUser {
          name
        }
        created_at
      }
      revisionHistories {
        id
        created_at
        desc
        revisedUser {
          name
        }
      }
      reviews {
        id
        created_at
        review
        reviewedUser {
          id
          name
        }
        valid_flg
      }
      download_count
      userCreate {
        id
        name
        email
        registrantAffiliation {
          id
          desc
        }
        regist_affili_code
        roleCGAssetStore {
          id
          desc
          role
          valid_flg
        }
      }
      userUpdate {
        id
        name
        email
        registrantAffiliation {
          id
          desc
        }
        regist_affili_code
        roleCGAssetStore {
          id
          desc
          role
          valid_flg
        }
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useCgAssetSearchClientQuery__
 *
 * To run a query within a React component, call `useCgAssetSearchClientQuery` and pass it any options that fit your needs.
 * When your component renders, `useCgAssetSearchClientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCgAssetSearchClientQuery({
 *   variables: {
 *      first: // value for 'first'
 *      valid: // value for 'valid'
 *   },
 * });
 */
export function useCgAssetSearchClientQuery(baseOptions: Apollo.QueryHookOptions<CgAssetSearchClientQuery, CgAssetSearchClientQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CgAssetSearchClientQuery, CgAssetSearchClientQueryVariables>(CgAssetSearchClientDocument, options);
      }
export function useCgAssetSearchClientLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CgAssetSearchClientQuery, CgAssetSearchClientQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CgAssetSearchClientQuery, CgAssetSearchClientQueryVariables>(CgAssetSearchClientDocument, options);
        }
export type CgAssetSearchClientQueryHookResult = ReturnType<typeof useCgAssetSearchClientQuery>;
export type CgAssetSearchClientLazyQueryHookResult = ReturnType<typeof useCgAssetSearchClientLazyQuery>;
export type CgAssetSearchClientQueryResult = Apollo.QueryResult<CgAssetSearchClientQuery, CgAssetSearchClientQueryVariables>;
export const HomeDashboardServerAdminDocument = gql`
    query HomeDashboardServerAdmin($apply_user_id: ID, $manage_user_id: ID, $create_user_id: ID!, $first: Int!, $page: Int!, $section: String) {
  ApplyDownloadsWithDone(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    section_adl: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  ApplyDownloadsOnlyApply(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  ApplyDownloadsApplyOrApprovalOrBoxDeliver(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  CGAssetsCreatedAll(
    create_user_id: $create_user_id
    first: $first
    page: $page
    orderBy: [{column: "c_g_assets.created_at", order: DESC}, {column: "c_g_assets.asset_id", order: ASC}]
    section: $section
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      asset_id
      asset_name
      userCreate {
        name
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  SystemNoticesValid(orderBy: [{column: "notice_date", order: DESC}]) {
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
    id
  }
}
    `;

/**
 * __useHomeDashboardServerAdminQuery__
 *
 * To run a query within a React component, call `useHomeDashboardServerAdminQuery` and pass it any options that fit your needs.
 * When your component renders, `useHomeDashboardServerAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHomeDashboardServerAdminQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      create_user_id: // value for 'create_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      section: // value for 'section'
 *   },
 * });
 */
export function useHomeDashboardServerAdminQuery(baseOptions: Apollo.QueryHookOptions<HomeDashboardServerAdminQuery, HomeDashboardServerAdminQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<HomeDashboardServerAdminQuery, HomeDashboardServerAdminQueryVariables>(HomeDashboardServerAdminDocument, options);
      }
export function useHomeDashboardServerAdminLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomeDashboardServerAdminQuery, HomeDashboardServerAdminQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<HomeDashboardServerAdminQuery, HomeDashboardServerAdminQueryVariables>(HomeDashboardServerAdminDocument, options);
        }
export type HomeDashboardServerAdminQueryHookResult = ReturnType<typeof useHomeDashboardServerAdminQuery>;
export type HomeDashboardServerAdminLazyQueryHookResult = ReturnType<typeof useHomeDashboardServerAdminLazyQuery>;
export type HomeDashboardServerAdminQueryResult = Apollo.QueryResult<HomeDashboardServerAdminQuery, HomeDashboardServerAdminQueryVariables>;
export const HomeDashboardServerEditorDocument = gql`
    query HomeDashboardServerEditor($apply_user_id: ID, $manage_user_id: ID, $create_user_id: ID!, $first: Int!, $page: Int!, $section: String) {
  ApplyDownloadsWithDone(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    section_adl: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  ApplyDownloadsOnlyApply(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  ApplyDownloadsApplyOrApproval(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  CGAssetsCreatedAll(
    create_user_id: $create_user_id
    first: $first
    page: $page
    orderBy: [{column: "c_g_assets.created_at", order: DESC}, {column: "c_g_assets.asset_id", order: ASC}]
    section: $section
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      asset_id
      asset_name
      userCreate {
        name
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  SystemNoticesValid(orderBy: [{column: "notice_date", order: DESC}]) {
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
    id
  }
}
    `;

/**
 * __useHomeDashboardServerEditorQuery__
 *
 * To run a query within a React component, call `useHomeDashboardServerEditorQuery` and pass it any options that fit your needs.
 * When your component renders, `useHomeDashboardServerEditorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHomeDashboardServerEditorQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      create_user_id: // value for 'create_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      section: // value for 'section'
 *   },
 * });
 */
export function useHomeDashboardServerEditorQuery(baseOptions: Apollo.QueryHookOptions<HomeDashboardServerEditorQuery, HomeDashboardServerEditorQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<HomeDashboardServerEditorQuery, HomeDashboardServerEditorQueryVariables>(HomeDashboardServerEditorDocument, options);
      }
export function useHomeDashboardServerEditorLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomeDashboardServerEditorQuery, HomeDashboardServerEditorQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<HomeDashboardServerEditorQuery, HomeDashboardServerEditorQueryVariables>(HomeDashboardServerEditorDocument, options);
        }
export type HomeDashboardServerEditorQueryHookResult = ReturnType<typeof useHomeDashboardServerEditorQuery>;
export type HomeDashboardServerEditorLazyQueryHookResult = ReturnType<typeof useHomeDashboardServerEditorLazyQuery>;
export type HomeDashboardServerEditorQueryResult = Apollo.QueryResult<HomeDashboardServerEditorQuery, HomeDashboardServerEditorQueryVariables>;
export const HomeDashboardServerManagerDocument = gql`
    query HomeDashboardServerManager($apply_user_id: ID, $manage_user_id: ID, $create_user_id: ID!, $first: Int!, $page: Int!, $section: String) {
  ApplyDownloadsWithDone(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    section_adl: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  ApplyDownloadsOnlyApply(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  ApplyDownloadsApplyOrApproval(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  CGAssetsCreatedAll(
    create_user_id: $create_user_id
    first: $first
    page: $page
    orderBy: [{column: "c_g_assets.created_at", order: DESC}, {column: "c_g_assets.asset_id", order: ASC}]
    section: $section
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      asset_id
      asset_name
      userCreate {
        name
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  SystemNoticesValid(orderBy: [{column: "notice_date", order: DESC}]) {
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
    id
  }
}
    `;

/**
 * __useHomeDashboardServerManagerQuery__
 *
 * To run a query within a React component, call `useHomeDashboardServerManagerQuery` and pass it any options that fit your needs.
 * When your component renders, `useHomeDashboardServerManagerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHomeDashboardServerManagerQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      create_user_id: // value for 'create_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      section: // value for 'section'
 *   },
 * });
 */
export function useHomeDashboardServerManagerQuery(baseOptions: Apollo.QueryHookOptions<HomeDashboardServerManagerQuery, HomeDashboardServerManagerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<HomeDashboardServerManagerQuery, HomeDashboardServerManagerQueryVariables>(HomeDashboardServerManagerDocument, options);
      }
export function useHomeDashboardServerManagerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomeDashboardServerManagerQuery, HomeDashboardServerManagerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<HomeDashboardServerManagerQuery, HomeDashboardServerManagerQueryVariables>(HomeDashboardServerManagerDocument, options);
        }
export type HomeDashboardServerManagerQueryHookResult = ReturnType<typeof useHomeDashboardServerManagerQuery>;
export type HomeDashboardServerManagerLazyQueryHookResult = ReturnType<typeof useHomeDashboardServerManagerLazyQuery>;
export type HomeDashboardServerManagerQueryResult = Apollo.QueryResult<HomeDashboardServerManagerQuery, HomeDashboardServerManagerQueryVariables>;
export const HomeDashboardServerOtherDocument = gql`
    query HomeDashboardServerOther($apply_user_id: ID, $manage_user_id: ID, $create_user_id: ID!, $first: Int!, $page: Int!, $section: String) {
  ApplyDownloadsWithDone(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    section_adl: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  ApplyDownloadsOnlyApply(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  CGAssetsCreatedAll(
    create_user_id: $create_user_id
    first: $first
    page: $page
    orderBy: [{column: "c_g_assets.created_at", order: DESC}, {column: "c_g_assets.asset_id", order: ASC}]
    section: $section
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      asset_id
      asset_name
      userCreate {
        name
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  SystemNoticesValid(orderBy: [{column: "notice_date", order: DESC}]) {
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
    id
  }
}
    `;

/**
 * __useHomeDashboardServerOtherQuery__
 *
 * To run a query within a React component, call `useHomeDashboardServerOtherQuery` and pass it any options that fit your needs.
 * When your component renders, `useHomeDashboardServerOtherQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHomeDashboardServerOtherQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      create_user_id: // value for 'create_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      section: // value for 'section'
 *   },
 * });
 */
export function useHomeDashboardServerOtherQuery(baseOptions: Apollo.QueryHookOptions<HomeDashboardServerOtherQuery, HomeDashboardServerOtherQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<HomeDashboardServerOtherQuery, HomeDashboardServerOtherQueryVariables>(HomeDashboardServerOtherDocument, options);
      }
export function useHomeDashboardServerOtherLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomeDashboardServerOtherQuery, HomeDashboardServerOtherQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<HomeDashboardServerOtherQuery, HomeDashboardServerOtherQueryVariables>(HomeDashboardServerOtherDocument, options);
        }
export type HomeDashboardServerOtherQueryHookResult = ReturnType<typeof useHomeDashboardServerOtherQuery>;
export type HomeDashboardServerOtherLazyQueryHookResult = ReturnType<typeof useHomeDashboardServerOtherLazyQuery>;
export type HomeDashboardServerOtherQueryResult = Apollo.QueryResult<HomeDashboardServerOtherQuery, HomeDashboardServerOtherQueryVariables>;
export const HomeDashboardServerUserDocument = gql`
    query HomeDashboardServerUser($apply_user_id: ID, $manage_user_id: ID, $create_user_id: ID!, $first: Int!, $page: Int!, $section: String) {
  ApplyDownloadsWithDone(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    section_adl: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  ApplyDownloadsOnlyApply(
    apply_user_id: $apply_user_id
    manage_user_id: $manage_user_id
    first: $first
    page: $page
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      cgAsset {
        id
        asset_id
        asset_name
      }
      manageUser {
        id
        name
      }
      applyUser {
        id
        name
      }
      applyDownloadGlaciers {
        id
        ongoing_request
        expiry_date
        presigned_url
        file_name
      }
      status
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  CGAssetsCreatedAll(
    create_user_id: $create_user_id
    first: $first
    page: $page
    orderBy: [{column: "c_g_assets.created_at", order: DESC}, {column: "c_g_assets.asset_id", order: ASC}]
    section: $section
    order: null
    orderAsc: null
    searchTxt: null
  ) {
    data {
      id
      asset_id
      asset_name
      userCreate {
        name
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
  SystemNoticesValid(orderBy: [{column: "notice_date", order: DESC}]) {
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
    id
  }
}
    `;

/**
 * __useHomeDashboardServerUserQuery__
 *
 * To run a query within a React component, call `useHomeDashboardServerUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useHomeDashboardServerUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHomeDashboardServerUserQuery({
 *   variables: {
 *      apply_user_id: // value for 'apply_user_id'
 *      manage_user_id: // value for 'manage_user_id'
 *      create_user_id: // value for 'create_user_id'
 *      first: // value for 'first'
 *      page: // value for 'page'
 *      section: // value for 'section'
 *   },
 * });
 */
export function useHomeDashboardServerUserQuery(baseOptions: Apollo.QueryHookOptions<HomeDashboardServerUserQuery, HomeDashboardServerUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<HomeDashboardServerUserQuery, HomeDashboardServerUserQueryVariables>(HomeDashboardServerUserDocument, options);
      }
export function useHomeDashboardServerUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomeDashboardServerUserQuery, HomeDashboardServerUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<HomeDashboardServerUserQuery, HomeDashboardServerUserQueryVariables>(HomeDashboardServerUserDocument, options);
        }
export type HomeDashboardServerUserQueryHookResult = ReturnType<typeof useHomeDashboardServerUserQuery>;
export type HomeDashboardServerUserLazyQueryHookResult = ReturnType<typeof useHomeDashboardServerUserLazyQuery>;
export type HomeDashboardServerUserQueryResult = Apollo.QueryResult<HomeDashboardServerUserQuery, HomeDashboardServerUserQueryVariables>;
export const GetSystemMailTemplateDocument = gql`
    query GetSystemMailTemplate($id: ID!) {
  SystemMailTemplate(id: $id) {
    id
    code
    subject_tpl
    body_tpl
    from_mail
    bcc_mail
    valid_flg
    created_at
    updated_at
  }
}
    `;

/**
 * __useGetSystemMailTemplateQuery__
 *
 * To run a query within a React component, call `useGetSystemMailTemplateQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSystemMailTemplateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSystemMailTemplateQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetSystemMailTemplateQuery(baseOptions: Apollo.QueryHookOptions<GetSystemMailTemplateQuery, GetSystemMailTemplateQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSystemMailTemplateQuery, GetSystemMailTemplateQueryVariables>(GetSystemMailTemplateDocument, options);
      }
export function useGetSystemMailTemplateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSystemMailTemplateQuery, GetSystemMailTemplateQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSystemMailTemplateQuery, GetSystemMailTemplateQueryVariables>(GetSystemMailTemplateDocument, options);
        }
export type GetSystemMailTemplateQueryHookResult = ReturnType<typeof useGetSystemMailTemplateQuery>;
export type GetSystemMailTemplateLazyQueryHookResult = ReturnType<typeof useGetSystemMailTemplateLazyQuery>;
export type GetSystemMailTemplateQueryResult = Apollo.QueryResult<GetSystemMailTemplateQuery, GetSystemMailTemplateQueryVariables>;
export const GetSystemMailTemplatesDocument = gql`
    query GetSystemMailTemplates($first: Int!, $page: Int!) {
  SystemMailTemplates(first: $first, page: $page) {
    data {
      id
      code
      subject_tpl
      body_tpl
      from_mail
      bcc_mail
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetSystemMailTemplatesQuery__
 *
 * To run a query within a React component, call `useGetSystemMailTemplatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSystemMailTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSystemMailTemplatesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetSystemMailTemplatesQuery(baseOptions: Apollo.QueryHookOptions<GetSystemMailTemplatesQuery, GetSystemMailTemplatesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSystemMailTemplatesQuery, GetSystemMailTemplatesQueryVariables>(GetSystemMailTemplatesDocument, options);
      }
export function useGetSystemMailTemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSystemMailTemplatesQuery, GetSystemMailTemplatesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSystemMailTemplatesQuery, GetSystemMailTemplatesQueryVariables>(GetSystemMailTemplatesDocument, options);
        }
export type GetSystemMailTemplatesQueryHookResult = ReturnType<typeof useGetSystemMailTemplatesQuery>;
export type GetSystemMailTemplatesLazyQueryHookResult = ReturnType<typeof useGetSystemMailTemplatesLazyQuery>;
export type GetSystemMailTemplatesQueryResult = Apollo.QueryResult<GetSystemMailTemplatesQuery, GetSystemMailTemplatesQueryVariables>;
export const GetSystemMailTemplatesValidDocument = gql`
    query GetSystemMailTemplatesValid {
  SystemMailTemplatesValid {
    code
    subject_tpl
    body_tpl
    from_mail
    bcc_mail
    created_at
    id
  }
}
    `;

/**
 * __useGetSystemMailTemplatesValidQuery__
 *
 * To run a query within a React component, call `useGetSystemMailTemplatesValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSystemMailTemplatesValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSystemMailTemplatesValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSystemMailTemplatesValidQuery(baseOptions?: Apollo.QueryHookOptions<GetSystemMailTemplatesValidQuery, GetSystemMailTemplatesValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSystemMailTemplatesValidQuery, GetSystemMailTemplatesValidQueryVariables>(GetSystemMailTemplatesValidDocument, options);
      }
export function useGetSystemMailTemplatesValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSystemMailTemplatesValidQuery, GetSystemMailTemplatesValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSystemMailTemplatesValidQuery, GetSystemMailTemplatesValidQueryVariables>(GetSystemMailTemplatesValidDocument, options);
        }
export type GetSystemMailTemplatesValidQueryHookResult = ReturnType<typeof useGetSystemMailTemplatesValidQuery>;
export type GetSystemMailTemplatesValidLazyQueryHookResult = ReturnType<typeof useGetSystemMailTemplatesValidLazyQuery>;
export type GetSystemMailTemplatesValidQueryResult = Apollo.QueryResult<GetSystemMailTemplatesValidQuery, GetSystemMailTemplatesValidQueryVariables>;
export const GetSystemNoticeDocument = gql`
    query GetSystemNotice($id: ID!) {
  SystemNotice(id: $id) {
    id
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    valid_flg
    created_at
    updated_at
  }
}
    `;

/**
 * __useGetSystemNoticeQuery__
 *
 * To run a query within a React component, call `useGetSystemNoticeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSystemNoticeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSystemNoticeQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetSystemNoticeQuery(baseOptions: Apollo.QueryHookOptions<GetSystemNoticeQuery, GetSystemNoticeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSystemNoticeQuery, GetSystemNoticeQueryVariables>(GetSystemNoticeDocument, options);
      }
export function useGetSystemNoticeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSystemNoticeQuery, GetSystemNoticeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSystemNoticeQuery, GetSystemNoticeQueryVariables>(GetSystemNoticeDocument, options);
        }
export type GetSystemNoticeQueryHookResult = ReturnType<typeof useGetSystemNoticeQuery>;
export type GetSystemNoticeLazyQueryHookResult = ReturnType<typeof useGetSystemNoticeLazyQuery>;
export type GetSystemNoticeQueryResult = Apollo.QueryResult<GetSystemNoticeQuery, GetSystemNoticeQueryVariables>;
export const GetSystemNoticesDocument = gql`
    query GetSystemNotices($first: Int!, $page: Int!) {
  SystemNotices(
    first: $first
    page: $page
    orderBy: [{column: "notice_date", order: DESC}]
  ) {
    data {
      id
      message
      notice_date
      userCreate {
        id
        name
        email
        registrantAffiliation {
          id
          desc
        }
        regist_affili_code
        roleCGAssetStore {
          id
          desc
          role
          valid_flg
        }
      }
      userUpdate {
        id
        name
        email
        registrantAffiliation {
          id
          desc
        }
        regist_affili_code
        roleCGAssetStore {
          id
          desc
          role
          valid_flg
        }
      }
      valid_flg
      created_at
      updated_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetSystemNoticesQuery__
 *
 * To run a query within a React component, call `useGetSystemNoticesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSystemNoticesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSystemNoticesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetSystemNoticesQuery(baseOptions: Apollo.QueryHookOptions<GetSystemNoticesQuery, GetSystemNoticesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSystemNoticesQuery, GetSystemNoticesQueryVariables>(GetSystemNoticesDocument, options);
      }
export function useGetSystemNoticesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSystemNoticesQuery, GetSystemNoticesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSystemNoticesQuery, GetSystemNoticesQueryVariables>(GetSystemNoticesDocument, options);
        }
export type GetSystemNoticesQueryHookResult = ReturnType<typeof useGetSystemNoticesQuery>;
export type GetSystemNoticesLazyQueryHookResult = ReturnType<typeof useGetSystemNoticesLazyQuery>;
export type GetSystemNoticesQueryResult = Apollo.QueryResult<GetSystemNoticesQuery, GetSystemNoticesQueryVariables>;
export const GetSystemNoticesValidDocument = gql`
    query GetSystemNoticesValid {
  SystemNoticesValid(orderBy: [{column: "notice_date", order: DESC}]) {
    message
    notice_date
    userCreate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    userUpdate {
      id
      name
      email
      registrantAffiliation {
        id
        desc
      }
      regist_affili_code
      roleCGAssetStore {
        id
        desc
        role
        valid_flg
      }
    }
    created_at
    id
  }
}
    `;

/**
 * __useGetSystemNoticesValidQuery__
 *
 * To run a query within a React component, call `useGetSystemNoticesValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSystemNoticesValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSystemNoticesValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSystemNoticesValidQuery(baseOptions?: Apollo.QueryHookOptions<GetSystemNoticesValidQuery, GetSystemNoticesValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSystemNoticesValidQuery, GetSystemNoticesValidQueryVariables>(GetSystemNoticesValidDocument, options);
      }
export function useGetSystemNoticesValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSystemNoticesValidQuery, GetSystemNoticesValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSystemNoticesValidQuery, GetSystemNoticesValidQueryVariables>(GetSystemNoticesValidDocument, options);
        }
export type GetSystemNoticesValidQueryHookResult = ReturnType<typeof useGetSystemNoticesValidQuery>;
export type GetSystemNoticesValidLazyQueryHookResult = ReturnType<typeof useGetSystemNoticesValidLazyQuery>;
export type GetSystemNoticesValidQueryResult = Apollo.QueryResult<GetSystemNoticesValidQuery, GetSystemNoticesValidQueryVariables>;
export const GetUserRoleCgAssetStoreDocument = gql`
    query GetUserRoleCGAssetStore($id: ID!) {
  UserRoleCGAssetStore(id: $id) {
    id
    role
    desc
    order
    valid_flg
    created_at
  }
}
    `;

/**
 * __useGetUserRoleCgAssetStoreQuery__
 *
 * To run a query within a React component, call `useGetUserRoleCgAssetStoreQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserRoleCgAssetStoreQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserRoleCgAssetStoreQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetUserRoleCgAssetStoreQuery(baseOptions: Apollo.QueryHookOptions<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>(GetUserRoleCgAssetStoreDocument, options);
      }
export function useGetUserRoleCgAssetStoreLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>(GetUserRoleCgAssetStoreDocument, options);
        }
export type GetUserRoleCgAssetStoreQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoreQuery>;
export type GetUserRoleCgAssetStoreLazyQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoreLazyQuery>;
export type GetUserRoleCgAssetStoreQueryResult = Apollo.QueryResult<GetUserRoleCgAssetStoreQuery, GetUserRoleCgAssetStoreQueryVariables>;
export const GetUserRoleCgAssetStoresDocument = gql`
    query GetUserRoleCGAssetStores($first: Int!, $page: Int!) {
  UserRoleCGAssetStores(first: $first, page: $page) {
    data {
      id
      role
      desc
      order
      valid_flg
      created_at
    }
    paginatorInfo {
      count
      currentPage
      hasMorePages
      total
    }
  }
}
    `;

/**
 * __useGetUserRoleCgAssetStoresQuery__
 *
 * To run a query within a React component, call `useGetUserRoleCgAssetStoresQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserRoleCgAssetStoresQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserRoleCgAssetStoresQuery({
 *   variables: {
 *      first: // value for 'first'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetUserRoleCgAssetStoresQuery(baseOptions: Apollo.QueryHookOptions<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>(GetUserRoleCgAssetStoresDocument, options);
      }
export function useGetUserRoleCgAssetStoresLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>(GetUserRoleCgAssetStoresDocument, options);
        }
export type GetUserRoleCgAssetStoresQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoresQuery>;
export type GetUserRoleCgAssetStoresLazyQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoresLazyQuery>;
export type GetUserRoleCgAssetStoresQueryResult = Apollo.QueryResult<GetUserRoleCgAssetStoresQuery, GetUserRoleCgAssetStoresQueryVariables>;
export const GetUserRoleCgAssetStoresValidDocument = gql`
    query GetUserRoleCGAssetStoresValid {
  UserRoleCGAssetStoresValid {
    desc
    id
  }
}
    `;

/**
 * __useGetUserRoleCgAssetStoresValidQuery__
 *
 * To run a query within a React component, call `useGetUserRoleCgAssetStoresValidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserRoleCgAssetStoresValidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserRoleCgAssetStoresValidQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUserRoleCgAssetStoresValidQuery(baseOptions?: Apollo.QueryHookOptions<GetUserRoleCgAssetStoresValidQuery, GetUserRoleCgAssetStoresValidQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserRoleCgAssetStoresValidQuery, GetUserRoleCgAssetStoresValidQueryVariables>(GetUserRoleCgAssetStoresValidDocument, options);
      }
export function useGetUserRoleCgAssetStoresValidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserRoleCgAssetStoresValidQuery, GetUserRoleCgAssetStoresValidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserRoleCgAssetStoresValidQuery, GetUserRoleCgAssetStoresValidQueryVariables>(GetUserRoleCgAssetStoresValidDocument, options);
        }
export type GetUserRoleCgAssetStoresValidQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoresValidQuery>;
export type GetUserRoleCgAssetStoresValidLazyQueryHookResult = ReturnType<typeof useGetUserRoleCgAssetStoresValidLazyQuery>;
export type GetUserRoleCgAssetStoresValidQueryResult = Apollo.QueryResult<GetUserRoleCgAssetStoresValidQuery, GetUserRoleCgAssetStoresValidQueryVariables>;