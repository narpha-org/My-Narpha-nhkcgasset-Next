// Code generated by graphql-codegen. DO NOT EDIT.
/* eslint-disable */
// @ts-nocheck
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`. */
  DateTime: { input: any; output: any; }
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a sample. */
  createSample?: Maybe<Sample>;
  /** Delete a sample. */
  deleteSample?: Maybe<Sample>;
  /** Create a sample. */
  updateSample?: Maybe<Sample>;
};


export type MutationCreateSampleArgs = {
  text?: InputMaybe<Scalars['String']['input']>;
};


export type MutationDeleteSampleArgs = {
  id: Scalars['ID']['input'];
};


export type MutationUpdateSampleArgs = {
  id: Scalars['ID']['input'];
  text: Scalars['String']['input'];
};

/** Allows ordering a list of records. */
export type OrderByClause = {
  /** The column that is used for ordering. */
  column: Scalars['String']['input'];
  /** The direction that is used for ordering. */
  order: SortOrder;
};

/** Aggregate functions when ordering by a relation without specifying a column. */
export enum OrderByRelationAggregateFunction {
  /** Amount of items. */
  Count = 'COUNT'
}

/** Aggregate functions when ordering by a relation that may specify a column. */
export enum OrderByRelationWithColumnAggregateFunction {
  /** Average. */
  Avg = 'AVG',
  /** Amount of items. */
  Count = 'COUNT',
  /** Maximum. */
  Max = 'MAX',
  /** Minimum. */
  Min = 'MIN',
  /** Sum. */
  Sum = 'SUM'
}

/** Information about pagination using a fully featured paginator. */
export type PaginatorInfo = {
  __typename?: 'PaginatorInfo';
  /** Number of items in the current page. */
  count: Scalars['Int']['output'];
  /** Index of the current page. */
  currentPage: Scalars['Int']['output'];
  /** Index of the first item in the current page. */
  firstItem?: Maybe<Scalars['Int']['output']>;
  /** Are there more pages after this one? */
  hasMorePages: Scalars['Boolean']['output'];
  /** Index of the last item in the current page. */
  lastItem?: Maybe<Scalars['Int']['output']>;
  /** Index of the last available page. */
  lastPage: Scalars['Int']['output'];
  /** Number of items per page. */
  perPage: Scalars['Int']['output'];
  /** Number of total available items. */
  total: Scalars['Int']['output'];
};

/** Indicates what fields are available at the top level of a query operation. */
export type Query = {
  __typename?: 'Query';
  /** Find a single sample by an identifying attribute. */
  sample?: Maybe<Sample>;
  /** List multiple samples. */
  samples: SamplePaginator;
  /** List all samples. */
  samplesAll: Array<Sample>;
  /** Find a single user by an identifying attribute. */
  user?: Maybe<User>;
  /** List multiple users. */
  users: UserPaginator;
};


/** Indicates what fields are available at the top level of a query operation. */
export type QuerySampleArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


/** Indicates what fields are available at the top level of a query operation. */
export type QuerySamplesArgs = {
  first?: Scalars['Int']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};


/** Indicates what fields are available at the top level of a query operation. */
export type QueryUserArgs = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


/** Indicates what fields are available at the top level of a query operation. */
export type QueryUsersArgs = {
  first?: Scalars['Int']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
};

/** Sample. */
export type Sample = {
  __typename?: 'Sample';
  /** When the account was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** Non-unique text. */
  text: Scalars['String']['output'];
  /** When the account was last updated. */
  updated_at: Scalars['DateTime']['output'];
};

/** A paginated list of Sample items. */
export type SamplePaginator = {
  __typename?: 'SamplePaginator';
  /** A list of Sample items. */
  data: Array<Sample>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

/** Directions for ordering a list of records. */
export enum SortOrder {
  /** Sort records in ascending order. */
  Asc = 'ASC',
  /** Sort records in descending order. */
  Desc = 'DESC'
}

/** Specify if you want to include or exclude trashed results from a query. */
export enum Trashed {
  /** Only return trashed results. */
  Only = 'ONLY',
  /** Return both trashed and non-trashed results. */
  With = 'WITH',
  /** Only return non-trashed results. */
  Without = 'WITHOUT'
}

/** Account of a person who utilizes this application. */
export type User = {
  __typename?: 'User';
  /** When the account was created. */
  created_at: Scalars['DateTime']['output'];
  /** Unique email address. */
  email: Scalars['String']['output'];
  /** When the email was verified. */
  email_verified_at?: Maybe<Scalars['DateTime']['output']>;
  /** Unique primary key. */
  id: Scalars['ID']['output'];
  /** Non-unique name. */
  name: Scalars['String']['output'];
  /** When the account was last updated. */
  updated_at: Scalars['DateTime']['output'];
};

/** A paginated list of User items. */
export type UserPaginator = {
  __typename?: 'UserPaginator';
  /** A list of User items. */
  data: Array<User>;
  /** Pagination information about the list of items. */
  paginatorInfo: PaginatorInfo;
};

export type CreateSampleMutationVariables = Exact<{
  text: Scalars['String']['input'];
}>;


export type CreateSampleMutation = { __typename?: 'Mutation', createSample?: { __typename?: 'Sample', id: string, text: string } | null };

export type DeleteSampleMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteSampleMutation = { __typename?: 'Mutation', deleteSample?: { __typename?: 'Sample', id: string, text: string } | null };

export type GetSampleQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetSampleQuery = { __typename?: 'Query', sample?: { __typename?: 'Sample', created_at: any, id: string, text: string } | null };

export type SamplesAllQueryVariables = Exact<{ [key: string]: never; }>;


export type SamplesAllQuery = { __typename?: 'Query', samplesAll: Array<{ __typename?: 'Sample', id: string, text: string }> };


export const CreateSampleDocument = gql`
    mutation CreateSample($text: String!) {
  createSample(text: $text) {
    id
    text
  }
}
    `;
export type CreateSampleMutationFn = Apollo.MutationFunction<CreateSampleMutation, CreateSampleMutationVariables>;

/**
 * __useCreateSampleMutation__
 *
 * To run a mutation, you first call `useCreateSampleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSampleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSampleMutation, { data, loading, error }] = useCreateSampleMutation({
 *   variables: {
 *      text: // value for 'text'
 *   },
 * });
 */
export function useCreateSampleMutation(baseOptions?: Apollo.MutationHookOptions<CreateSampleMutation, CreateSampleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSampleMutation, CreateSampleMutationVariables>(CreateSampleDocument, options);
      }
export type CreateSampleMutationHookResult = ReturnType<typeof useCreateSampleMutation>;
export type CreateSampleMutationResult = Apollo.MutationResult<CreateSampleMutation>;
export type CreateSampleMutationOptions = Apollo.BaseMutationOptions<CreateSampleMutation, CreateSampleMutationVariables>;
export const DeleteSampleDocument = gql`
    mutation DeleteSample($id: ID!) {
  deleteSample(id: $id) {
    id
    text
  }
}
    `;
export type DeleteSampleMutationFn = Apollo.MutationFunction<DeleteSampleMutation, DeleteSampleMutationVariables>;

/**
 * __useDeleteSampleMutation__
 *
 * To run a mutation, you first call `useDeleteSampleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSampleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSampleMutation, { data, loading, error }] = useDeleteSampleMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteSampleMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSampleMutation, DeleteSampleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteSampleMutation, DeleteSampleMutationVariables>(DeleteSampleDocument, options);
      }
export type DeleteSampleMutationHookResult = ReturnType<typeof useDeleteSampleMutation>;
export type DeleteSampleMutationResult = Apollo.MutationResult<DeleteSampleMutation>;
export type DeleteSampleMutationOptions = Apollo.BaseMutationOptions<DeleteSampleMutation, DeleteSampleMutationVariables>;
export const GetSampleDocument = gql`
    query GetSample($id: ID!) {
  sample(id: $id) {
    created_at
    id
    text
  }
}
    `;

/**
 * __useGetSampleQuery__
 *
 * To run a query within a React component, call `useGetSampleQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSampleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSampleQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetSampleQuery(baseOptions: Apollo.QueryHookOptions<GetSampleQuery, GetSampleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSampleQuery, GetSampleQueryVariables>(GetSampleDocument, options);
      }
export function useGetSampleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSampleQuery, GetSampleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSampleQuery, GetSampleQueryVariables>(GetSampleDocument, options);
        }
export type GetSampleQueryHookResult = ReturnType<typeof useGetSampleQuery>;
export type GetSampleLazyQueryHookResult = ReturnType<typeof useGetSampleLazyQuery>;
export type GetSampleQueryResult = Apollo.QueryResult<GetSampleQuery, GetSampleQueryVariables>;
export const SamplesAllDocument = gql`
    query SamplesAll {
  samplesAll {
    id
    text
  }
}
    `;

/**
 * __useSamplesAllQuery__
 *
 * To run a query within a React component, call `useSamplesAllQuery` and pass it any options that fit your needs.
 * When your component renders, `useSamplesAllQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSamplesAllQuery({
 *   variables: {
 *   },
 * });
 */
export function useSamplesAllQuery(baseOptions?: Apollo.QueryHookOptions<SamplesAllQuery, SamplesAllQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SamplesAllQuery, SamplesAllQueryVariables>(SamplesAllDocument, options);
      }
export function useSamplesAllLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SamplesAllQuery, SamplesAllQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SamplesAllQuery, SamplesAllQueryVariables>(SamplesAllDocument, options);
        }
export type SamplesAllQueryHookResult = ReturnType<typeof useSamplesAllQuery>;
export type SamplesAllLazyQueryHookResult = ReturnType<typeof useSamplesAllLazyQuery>;
export type SamplesAllQueryResult = Apollo.QueryResult<SamplesAllQuery, SamplesAllQueryVariables>;